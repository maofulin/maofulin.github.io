<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot整合SpringSecurity（六）权限注解</title>
      <link href="/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E5%85%AD%EF%BC%89%E6%9D%83%E9%99%90%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E5%85%AD%EF%BC%89%E6%9D%83%E9%99%90%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>这一篇说一下比较好用的Spring Security注解。</p><p><a name="ecff77a8"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Spring Security默认是禁用注解的，要想开启注解，要在继承<code>WebSecurityConfigurerAdapter</code>的类加<code>@EnableMethodSecurity</code>注解，并在该类中将<code>AuthenticationManager</code>定义为Bean。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>,securedEnabled=<span class="keyword">true</span>,jsr250Enabled=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到<code>@EnableGlobalMethodSecurity</code> 分别有<code>prePostEnabled</code> 、<code>securedEnabled</code>、<code>jsr250Enabled</code> 三个字段，其中每个字段代码一种注解支持，默认为false，true为开启。那么我们就一一来说一下这三总注解支持。</p><p><a name="0ce5a020"></a></p><h3 id="JSR-250注解"><a href="#JSR-250注解" class="headerlink" title="JSR-250注解"></a>JSR-250注解</h3><p>主要注解</p><ul><li><a href="">@DenyAll </a></li><li><a href="">@RolesAllowed </a></li><li><a href="">@PermitAll </a></li></ul><p>这里面<code>@DenyAll</code> 和 <code>@PermitAll</code> 相信就不用多说了 代表拒绝和通过。</p><p><code>@RolesAllowed</code> 使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RolesAllowed</span>(&#123;<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>&#125;)</span><br></pre></td></tr></table></figure><p>代表标注的方法只要具有<code>USER</code>, <code>ADMIN</code>任意一种权限就可以访问。这里可以省略前缀<code>ROLE_</code>，实际的权限可能是<code>ROLE_ADMIN</code>。</p><p><a name="f490d82a"></a></p><h3 id="securedEnabled注解"><a href="#securedEnabled注解" class="headerlink" title="securedEnabled注解"></a>securedEnabled注解</h3><p>主要注解</p><ul><li><a href="">@Secured </a></li></ul><p><code>@Secured</code>在方法上指定安全性要求</p><p>可以使用<code>@Secured</code>在方法上指定安全性要求 角色/权限等 只有对应 角色/权限 的用户才可以调用这些方法。 如果有人试图调用一个方法，但是不拥有所需的 角色/权限，那会将会拒绝访问将引发异常。</p><p><code>@Secured</code>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Secured</span>(<span class="string">"ROLE_ADMIN"</span>)</span><br><span class="line"><span class="meta">@Secured</span>(&#123; <span class="string">"ROLE_DBA"</span>, <span class="string">"ROLE_ADMIN"</span> &#125;)</span><br></pre></td></tr></table></figure><p>还有一点就是<code>@Secured</code>,不支持Spring EL表达式</p><p><a name="68a77e3a"></a></p><h3 id="prePostEnabled注解"><a href="#prePostEnabled注解" class="headerlink" title="prePostEnabled注解"></a>prePostEnabled注解</h3><p>这个开启后支持Spring EL表达式 算是蛮厉害的。如果没有访问方法的权限，会抛出<code>AccessDeniedException</code>。</p><p>主要注解</p><ul><li><a href="">@PreAuthorize </a>    –适合进入方法之前验证授权</li><li><a href="">@PostAuthorize </a>   –检查授权方法之后才被执行</li><li><a href="">@PostFilter </a> –在方法执行之后执行，而且这里可以调用方法的返回值，然后对返回值进行过滤或处理或修改并返回</li><li><a href="">@PreFilter </a> –在方法执行之前执行，而且这里可以调用方法的参数，然后对参数值进行过滤或处理或修改</li></ul><p><code>@PreAuthorize</code> 使用例子</p><p>在方法执行之前执行，而且这里可以调用方法的参数，也可以得到参数值，这里利用JAVA8的参数名反射特性，如果没有JAVA8，那么也可以利用Spring Secuirty的<code>@P</code>标注参数，或利用Spring Data的@Param标注参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无java8</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"#userId == authentication.principal.userId or hasAuthority(‘ADMIN’)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(@P(<span class="string">"userId"</span>)</span> <span class="keyword">long</span> userId )</span>&#123;&#125;</span><br><span class="line"><span class="comment">//有java8</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"#userId == authentication.principal.userId or hasAuthority(‘ADMIN’)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(<span class="keyword">long</span> userId )</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里表示在<code>changePassword</code>方法执行之前，判断方法参数<code>userId</code>的值是否等于<code>principal</code>中保存的当前用户的<code>userId</code>，或者当前用户是否具有<code>ROLE_ADMIN</code>权限，两种符合其一，就可以访问该 方法。</p><p><code>@PostAuthorize</code> 使用例子</p><p>在方法执行之后执行，而且这里可以调用方法的返回值，如果EL为false，那么该方法也已经执行完了，可能会回滚。EL变量<code>returnObject</code>表示返回的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize</span>(<span class="string">"returnObject.userId == authentication.principal.userId or hasPermission(returnObject, 'ADMIN')"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><code>@PostFilter</code></p><p>在执行方法之后执行，而且这里可以调用方法的返回值，然后对返回值进行过滤或处理。EL变量returnObject表示返回的对象。只有方法返回的集合或数组类型的才可以使用。（与分页技术不兼容）</p><p><code>@PreFilter</code></p><p>EL变量filterObject表示参数，如果有多个参数，可以使用@filterTarget注解参数，只有方法是集合或数组才行（与分页技术不兼容）。</p><p><a name="e9704461"></a></p><h2 id="自定义匹配器"><a href="#自定义匹配器" class="headerlink" title="自定义匹配器"></a>自定义匹配器</h2><p>另外说一点就是<code>@PreAuthorize</code> 和 <code>@PostAuthorize</code> 中 除了支持原有的权限表达式之外，也是可以支持自定义的。</p><p>比如</p><p>定义一个自己的权限匹配器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestPermissionEvaluator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Authentication authentication)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"testPermissionEvaluator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPermissionEvaluatorImpl</span> <span class="keyword">implements</span> <span class="title">TestPermissionEvaluator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入了自定义的匹配器"</span> + authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回true 就是有权限 false 则是无权限 。 然后在方法中这样玩即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"@testPermissionEvaluator.check(authentication)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test0</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"说明你有自定义权限"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e449cf10"></a></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>然后呢异常处理类跟之前一样</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedAuthenticationHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccessDeniedAuthenticationHandler</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"没有权限"</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>WebSecurityConfig</code> 中的 <code>configure</code> 中配置即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.anyRequest()</span><br><span class="line">    .authenticated()</span><br><span class="line">    .and().exceptionHandling()</span><br><span class="line">    .accessDeniedHandler(accessDeniedAuthenticationHandler);</span><br></pre></td></tr></table></figure><p>下一篇我们就来说一下SpringSecurity 这个权限校验是一个怎样的流程。</p><p><strong>本博文是基于springboot2.x 和security 5 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity（五）权限控制</title>
      <link href="/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%BA%94%EF%BC%89%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%BA%94%EF%BC%89%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Spring Security具有强大的权限验证。</p><p>权限有些人认为是页面的隐藏，其实不然。权限可以理解为是否可以访问资源，页面隐藏什么的是客户友好度的事情，所以对于web而言，系统的安全不安全，最终取决于对url的控制。</p><blockquote><p>本文章代码可以参考 <code>https://gitee.com/Maoxs/security-test</code>中的 <strong>security-permission</strong></p></blockquote><p><a name="424a2ad8"></a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a name="59ceff46"></a></p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>首先呢是登陆</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"input[name=username]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">"input[name=password]"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (username === <span class="string">""</span> || password === <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"用户名或密码不能为空"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/authentication/form"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"username"</span>: username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"password"</span>: password</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆成功"</span>)</span></span><br><span class="line"><span class="actionscript">                setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    location.href = <span class="string">'/hello'</span>;</span></span><br><span class="line">                &#125;, 1500);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(e,a,b)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.responseText);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆失败"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是我自己测试权限的页面</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登陆成功&lt;/h1&gt;</span><br><span class="line">&lt;button onclick="check(this)" data-href="/java"&gt;检测java角色&lt;/button&gt;</span><br><span class="line">&lt;button onclick="check(this)" data-href="/docker"&gt;检测docker角色&lt;/button&gt;</span><br><span class="line">&lt;button onclick="check(this)" data-href="/php"&gt;检测php角色&lt;/button&gt;</span><br><span class="line">&lt;button onclick="check(this)" data-href="/custom"&gt;检测自定义匹配器&lt;/button&gt;</span><br><span class="line">&lt;a href="/logout"&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">check</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> url = e.dataset.href;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">"POST"</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            success: function (e) &#123;</span><br><span class="line">                alert(e)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function (e, a, b) &#123;</span><br><span class="line">                console.log(e);</span><br><span class="line">                alert(<span class="string">"没有权限"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><a name="0d830788"></a></p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>这里呢我们就不去具体的访问数据库了，准备一些模拟的数据，一个用户可以用多个角色和权限。</p><p>首先俩实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysRole</span><span class="params">(Long id,String roleName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id=id;</span><br><span class="line">    <span class="keyword">this</span>.roleName=roleName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SysRole&gt; roles;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysUser</span><span class="params">(Long id, String userName, String password, List&lt;SysRole&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;SysUser&gt; SYS_USERS = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;SysRole&gt; SYS_ROLES = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SYS_ROLES.add(<span class="keyword">new</span> SysRole(<span class="number">1L</span>, <span class="string">"ROLE_JAVA"</span>);</span><br><span class="line">        SYS_ROLES.add(<span class="keyword">new</span> SysRole(<span class="number">2L</span>, <span class="string">"ROLE_DOCKER"</span>);</span><br><span class="line">        SYS_ROLES.add(<span class="keyword">new</span> SysRole(<span class="number">3L</span>, <span class="string">"ROLE_PHP"</span>);</span><br><span class="line">        SYS_ROLES.add(<span class="keyword">new</span> SysRole(<span class="number">4L</span>, <span class="string">"ROLE_PYTHON"</span>);</span><br><span class="line">        SYS_ROLES.add(<span class="keyword">new</span> SysRole(<span class="number">5L</span>, <span class="string">"ROLE_CENTOS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SYS_USERS.add(</span><br><span class="line">                <span class="keyword">new</span> SysUser(<span class="number">1L</span>, <span class="string">"fulin"</span>, <span class="string">"123456"</span>,</span><br><span class="line">                        SYS_ROLES.stream().filter(o -&gt; StringUtils.equalsAny(o.getRoleName(), <span class="string">"ROLE_JAVA"</span>, <span class="string">"ROLE_DOCKER"</span>)).collect(Collectors.toList())</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        SYS_USERS.add(</span><br><span class="line">                <span class="keyword">new</span> SysUser(<span class="number">2L</span>, <span class="string">"maoxiansheng"</span>, <span class="string">"123456"</span>,</span><br><span class="line">                        SYS_ROLES.stream().filter(o -&gt; StringUtils.equalsAny(o.getRoleName(), <span class="string">"ROLE_PHP"</span>, <span class="string">"ROLE_DOCKER"</span>)).collect(Collectors.toList())</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        SYS_USERS.add(</span><br><span class="line">                <span class="keyword">new</span> SysUser(<span class="number">3L</span>, <span class="string">"happy fish"</span>, <span class="string">"123456"</span>,</span><br><span class="line">                        SYS_ROLES.stream().filter(o -&gt; StringUtils.equalsAny(o.getRoleName(), <span class="string">"ROLE_PYTHON"</span>, <span class="string">"ROLE_CENTOS"</span>)).collect(Collectors.toList())</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是<code>UserDetailsService</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        SysUser sysUser = InitData.SYS_USERS.stream().filter(o -&gt; StringUtils.equals(o.getUserName(), s)).findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (sysUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟从数据库获取角色权限</span></span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;SysRole&gt; roles = sysUser.getRoles();</span><br><span class="line">        <span class="keyword">for</span> (SysRole role : roles) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(sysUser.getUserName(), sysUser.getPassword(), authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="controller"></a></p><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是需要鉴权的<code>controller</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/docker"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"说明你有docker权限"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/custom"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"说明你有自定义权限"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/java"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"说明你有java权限"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/php"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"说明你有最好语言的权限"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就进入重头戏了</p><p><a name="c18e266e"></a></p><h2 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h2><p>这一篇内我们主要讲在<code>configure</code> 中配置的形式，下一篇会说明比较强大的 权限注解。</p><p>先看配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FailureAuthenticationHandler failureAuthenticationHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SuccessAuthenticationHandler successAuthenticationHandler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessDeniedAuthenticationHandler accessDeniedAuthenticationHandler;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebSecurityConfig</span><span class="params">(UserService userService, FailureAuthenticationHandler failureAuthenticationHandler, SuccessAuthenticationHandler successAuthenticationHandler,AccessDeniedAuthenticationHandler accessDeniedAuthenticationHandler)</span>   </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.failureAuthenticationHandler = failureAuthenticationHandler;</span><br><span class="line">        <span class="keyword">this</span>.successAuthenticationHandler = successAuthenticationHandler;</span><br><span class="line">        <span class="keyword">this</span>.accessDeniedAuthenticationHandler = accessDeniedAuthenticationHandler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入身份管理器bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入自定义权限管理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityExpressionHandler <span class="title">webSecurityExpressionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityExpressionHandler handler = <span class="keyword">new</span> DefaultWebSecurityExpressionHandler();</span><br><span class="line">        handler.setPermissionEvaluator(<span class="keyword">new</span> CustomPermissionEvaluator());</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(</span><br><span class="line">                <span class="keyword">new</span> PasswordEncoder() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> charSequence.toString();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .failureHandler(failureAuthenticationHandler) <span class="comment">// 自定义登录失败处理</span></span><br><span class="line">                .successHandler(successAuthenticationHandler) <span class="comment">// 自定义登录成功处理</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/authentication/form"</span>) <span class="comment">// 自定义登录路径</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()<span class="comment">// 对请求授权</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>, <span class="string">"/authentication/require"</span>,</span><br><span class="line">                        <span class="string">"/authentication/form"</span>).permitAll()<span class="comment">// 这些页面不需要身份认证</span></span><br><span class="line">                .antMatchers(<span class="string">"/docker"</span>).hasRole(<span class="string">"DOCKER"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/java"</span>).hasRole(<span class="string">"JAVA"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/java"</span>).hasRole(<span class="string">"JAVA"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/custom"</span>)</span><br><span class="line">                .access(<span class="string">"@testPermissionEvaluator.check(authentication)"</span>)</span><br><span class="line">                .anyRequest()<span class="comment">//其他请求需要认证</span></span><br><span class="line">                .authenticated().and().exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedAuthenticationHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();<span class="comment">// 禁用跨站攻击</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里呢我们要说明一下</p><p><code>authorizeRequests()</code> 就是请求授权，然后其中的<code>antMatchers()</code> 就是匹配对应的url。</p><p>我们看到后面的<code>permitAll()</code> 、<code>hasRole(&quot;ROLE_DOCKER&quot;)</code> 这些都可以叫做权限表达式。我总结了一些差不多有这么多</p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>hasRole([role]</code>)</td><td>用户拥有制定的角色时返回true （<code>Spring security</code>默认会带有<code>ROLE_</code>前缀）</td></tr><tr><td><code>hasAnyRole([role1,role2])</code></td><td>用户拥有任意一个制定的角色时返回true</td></tr><tr><td><code>hasAuthority([authority])</code></td><td>等同于<code>hasRole</code>,但不会带有<code>ROLE_</code>前缀</td></tr><tr><td><code>asAnyAuthority([auth1,auth2])</code></td><td>等同于<code>hasAnyRole</code></td></tr><tr><td><code>permitAll</code></td><td>永远返回true</td></tr><tr><td><code>denyAll</code></td><td>永远返回false</td></tr><tr><td><code>authentication</code></td><td>当前登录用户的<code>authentication</code>对象</td></tr><tr><td><code>fullAuthenticated</code></td><td>当前用户既不是<code>anonymous</code>也不是<code>rememberMe</code>用户时返回true</td></tr><tr><td><code>hasIpAddress(&#39;192.168.1.0/24&#39;))</code></td><td>请求发送的IP匹配时返回true</td></tr></tbody></table><p><a name="4f7b7dcb"></a></p><h3 id="自定义权限表达式"><a href="#自定义权限表达式" class="headerlink" title="自定义权限表达式"></a>自定义权限表达式</h3><p>然后来就要说一下这个<code>access()</code> 了，spring3.0后出了spel 超好用，有了这个我们就可以设置自己的权限验证了</p><p>比如说可以组合操作<code>access(&quot;hasRole(&#39;JAVA&#39;) or hasRole(&#39;DOCKER&#39;)&quot;)</code> 。</p><p>我写的这句 <code>access(&quot;@testPermissionEvaluator.check(authentication)&quot;)</code> 的意思就是 去<code>testPermissionEvaluator</code>这个bean里来执行check方法，<strong>这里需要注意check 方法必须返回值是boolean的因为这个是要给投票器投票的，这个我们以后会说</strong>。</p><p>来看看我这个bean的代码吧</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestPermissionEvaluator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Authentication authentication)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"testPermissionEvaluator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPermissionEvaluatorImpl</span> <span class="keyword">implements</span> <span class="title">TestPermissionEvaluator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里可以拿到登陆信息然后随便的去定制自己的权限 随便你怎么查询</span></span><br><span class="line">        <span class="comment">//true就是过，false就是不过</span></span><br><span class="line">        System.out.println(<span class="string">"进入了自定义的匹配器"</span> + authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要说一下spring security没有权限的时候默认返回的是页面。像我这样js掉用返回json就需要配置一下权限异常处理器了。只需要实现一个<code>AccessDeniedHandler</code> 的接口即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedAuthenticationHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccessDeniedAuthenticationHandler</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"没有权限"</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.FORBIDDEN.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>configure</code> 中这样配置下就行了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.authenticated().and().exceptionHandling().accessDeniedHandler(accessDeniedAuthenticationHandler)</span><br></pre></td></tr></table></figure><p>然后我们启动项目验证一下<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064955467-6f16a0e3-855b-4238-896a-964d48ead720.png#align=left&display=inline&height=317&originHeight=317&originWidth=785&size=0&status=done&width=785" class="lazyload"></p><p>然后下一篇帖子我会说权限注解，那个是真的方便。</p><p><strong>本博文是基于springboot2.x 和security 5 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity（四）记住我</title>
      <link href="/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E5%9B%9B%EF%BC%89%E8%AE%B0%E4%BD%8F%E6%88%91/"/>
      <url>/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E5%9B%9B%EF%BC%89%E8%AE%B0%E4%BD%8F%E6%88%91/</url>
      
        <content type="html"><![CDATA[<p>实现“记住我” 功能 ，在用户登陆一次以后，系统会记住用户一段时间，在这段时间，用户不用反复登陆就可以使用我们的系统。</p><blockquote><p>本文章代码可以参考 <code>https://gitee.com/Maoxs/security-test</code> 中的 <strong>security-rememberme</strong></p></blockquote><p>先说一下使用</p><p><a name="372fd36d"></a></p><h2 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h2><p>拿之前第的入门程序举例子</p><p>改一些<code>login.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>记住我:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"input[name=username]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">"input[name=password]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rememberMe = $(<span class="string">"input[name=remember-me]"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (username === <span class="string">""</span> || password === <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"用户名或密码不能为空"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/authentication/form"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"username"</span>: username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"password"</span>: password,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"remember-me"</span>: rememberMe,</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆成功"</span>)</span></span><br><span class="line"><span class="actionscript">                setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    location.href = <span class="string">'/hello'</span>;</span></span><br><span class="line">                &#125;, 500);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(e,a,b)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(b);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.responseText);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆失败zxczxczc"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在登陆页添加自动登录的选项，注意自动登录字段的 name 必须是 <code>remember-me</code></p><p><a name="78f0d9e6"></a></p><h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><p><a name="cookie"></a></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>没的说 ，在<code>WebSecurityConfigurerAdapter</code> 中 的 <code>configure()</code> 方法添加一个 ``rememberMe() 就行了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//http.httpBasic()  //httpBasic 登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">"/authentication/form"</span>) <span class="comment">// 自定义登录路径</span></span><br><span class="line">            .failureHandler(failureAuthenticationHandler) <span class="comment">// 自定义登录失败处理</span></span><br><span class="line">            .successHandler(successAuthenticationHandler) <span class="comment">// 自定义登录成功处理</span></span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()<span class="comment">// 对请求授权</span></span><br><span class="line">            .antMatchers(<span class="string">"/login"</span>, <span class="string">"/authentication/require"</span>,</span><br><span class="line">                         <span class="string">"/authentication/form"</span>).permitAll()</span><br><span class="line">            .anyRequest() <span class="comment">// 任何请求</span></span><br><span class="line">            .authenticated()<span class="comment">//; // 都需要身份认证</span></span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">            .rememberMeCookieName(<span class="string">"remember"</span>)</span><br><span class="line">            .tokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();<span class="comment">// 禁用跨站攻击</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在登陆的时候勾选一下，这时候登陆成功后，会在浏览器cookie里自动保存一条名为<code>remember-me</code> 的cookie如果你需要改变这个名字可以在 <code>HttpSecurity</code> 链上加入<code>.rememberMeCookieName(&quot;remember&quot;)</code> 即可。</p><p><a name="bdd6631e"></a></p><h3 id="数据库存储"><a href="#数据库存储" class="headerlink" title="数据库存储"></a>数据库存储</h3><p>使用 Cookie 存储虽然很方便，但是大家都知道 Cookie 毕竟是保存在客户端的，而且 Cookie 的值还与用户名、密码这些敏感数据相关，虽然加密了，但是将敏感信息存在客户端，毕竟不太安全。</p><p>Spring security 还提供了另一种相对更安全的实现机制：在客户端的 Cookie 中，仅保存一个无意义的加密串（与用户名、密码等敏感数据无关），然后在数据库中保存该加密串-用户信息的对应关系，自动登录时，用 Cookie 中的加密串，到数据库中验证，如果通过，自动登录才算通过。</p><p><a name="83175ad0"></a></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先需要创建一张表来存储 token 信息：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`persistent_logins`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`series`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`token`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_used`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`series`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>然后创建一个配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemberMeConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemberMeConfig</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl tokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        tokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 如果token表不存在，使用下面语句可以初始化该表；若存在，请注释掉这条语句，否则会报错。</span></span><br><span class="line">        <span class="comment">//tokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">        <span class="keyword">return</span> tokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>configure()</code> 中稍微做修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span>  PersistentTokenRepository persistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//http.httpBasic()  //httpBasic 登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">"/authentication/form"</span>) <span class="comment">// 自定义登录路径</span></span><br><span class="line">            .failureHandler(failureAuthenticationHandler) <span class="comment">// 自定义登录失败处理</span></span><br><span class="line">            .successHandler(successAuthenticationHandler) <span class="comment">// 自定义登录成功处理</span></span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()<span class="comment">// 对请求授权</span></span><br><span class="line">            .antMatchers(<span class="string">"/login"</span>, <span class="string">"/authentication/require"</span>,</span><br><span class="line">                         <span class="string">"/authentication/form"</span>).permitAll()</span><br><span class="line">            .anyRequest() <span class="comment">// 任何请求</span></span><br><span class="line">            .authenticated()<span class="comment">//; // 都需要身份认证</span></span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">            .tokenRepository(persistentTokenRepository())</span><br><span class="line">            .tokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">            .userDetailsService(userDetailsService)</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();<span class="comment">// 禁用跨站攻击</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行程序 勾选自动登录后，Cookie 和数据库中均存储了 token 信息。</p><p><a name="1e079232"></a></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>以前我们说过整个认证的流程，这个流程大概是这样的</p><ol><li><code>UsernamePasswordAuthenticationFilter</code> 认证成功后会走<code>successfulAuthentication</code> 方法</li><li>然后经过<code>successfulAuthentication</code> 的 <code>RememberMeService</code> 其中有个 <code>TokenRepository</code></li><li><code>TokenRepository</code> 生成token，首先将 token 写入到浏览器的 Cookie 中，然后将 token、认证成功的用户名写入到数据库中</li><li>下次请求时，会经过<code>RememberMeAuthenticationFilter</code> 它会读取 Cookie 中的 token，交给 <code>RememberMeService</code> 从数据库中查询记录</li><li>如果存在记录，会读取用户名并去调用 <code>UserDetailsService</code>，获取用户信息，并将用户信息放入Spring Security 中，实现自动登陆。<br><br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564064753986-f760ba30-e74d-47b5-a8ea-adf116c54bc0.jpeg#align=left&display=inline&height=554&originHeight=554&originWidth=1067&size=0&status=done&width=1067" class="lazyload"><br></li></ol><p><strong>注意的是</strong>，过滤连在怎么玩都是链式的 由此我们可以知道</p><p><code>RememberMeAuthenticationFilter</code> 在整个过滤器链中是比较靠后的位置，也就是说在传统登录方式都无法登录的情况下才会使用自动登陆。</p><p><strong>本博文是基于springboot2.x 和security 5 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity（三）验证码登陆</title>
      <link href="/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%B8%89%EF%BC%89%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E9%99%86/"/>
      <url>/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%B8%89%EF%BC%89%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章我们跟踪源码了解到了security整个的登陆流程，这一篇我们就基于这个流程来做一个自己定义的流程，并与security对接。本篇中介绍的是短信登陆，当然验证码登陆跟这个原理是一样的就不多说了。</p><blockquote><p>本文章代码可以参考 <code>https://gitee.com/Maoxs/security-test</code>中的 <strong>security-code</strong></p></blockquote><p><a name="5db70767"></a></p><h2 id="准备页面"><a href="#准备页面" class="headerlink" title="准备页面"></a>准备页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>验证码表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"sms_code"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">onclick</span>=<span class="string">"sendSms()"</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loginSms()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>普通表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendSms</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(<span class="string">'/sms/code?mobile='</span> +  $(<span class="string">"input[name=mobile]"</span>).val());</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">loginSms</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mobile = $(<span class="string">"input[name=mobile]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> smsCode = $(<span class="string">"input[name=sms_code]"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (mobile === <span class="string">""</span> || smsCode === <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"用户名或密码不能为空"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/sms/login"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"mobile"</span>: mobile,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"smsCode"</span>: smsCode</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆成功"</span>)</span></span><br><span class="line"><span class="actionscript">                setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    location.href = <span class="string">'/hello'</span>;</span></span><br><span class="line">                &#125;, 500);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(e,a,b)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(b);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.responseText);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆失败zxczxczc"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"input[name=username]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">"input[name=password]"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (username === <span class="string">""</span> || password === <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"用户名或密码不能为空"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">debugger</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/authentication/form"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"username"</span>: username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"password"</span>: password</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆成功"</span>)</span></span><br><span class="line"><span class="actionscript">                setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    location.href = <span class="string">'/hello'</span>;</span></span><br><span class="line">                &#125;, 500);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(e,a,b)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.responseText);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆失败zxczxczc"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello world from fulinlin.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发短信的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sms/code"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sms</span><span class="params">(String mobile, HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = (<span class="keyword">int</span>) Math.ceil(Math.random() * <span class="number">9000</span> + <span class="number">1000</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">"mobile"</span>, mobile);</span><br><span class="line">        map.put(<span class="string">"code"</span>, code);</span><br><span class="line">        session.setAttribute(<span class="string">"smsCode"</span>, map);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;：为 &#123;&#125; 设置短信验证码：&#123;&#125;"</span>, session.getId(), mobile, code);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你的手机号"</span>+mobile+<span class="string">"验证码是"</span>+code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7edf917e"></a></p><h2 id="准备测试用户"><a href="#准备测试用户" class="headerlink" title="准备测试用户"></a>准备测试用户</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">SysUser <span class="title">findByUsername</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        users.add(<span class="keyword">new</span> SysUser(<span class="number">1L</span>, <span class="string">"fulin"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_DOCKER"</span>)));</span><br><span class="line">        users.add(<span class="keyword">new</span> SysUser(<span class="number">2L</span>, <span class="string">"xiaohan"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_DOCKER"</span>)));</span><br><span class="line">        users.add(<span class="keyword">new</span> SysUser(<span class="number">3L</span>, <span class="string">"longlong"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_DOCKER"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">findByUsername</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.stream().filter(o -&gt; StringUtils.equals(o.getUserName(), userName)).findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="UserDetailsService"></a></p><h2 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        SysUser user = iUserService.findByUsername(s);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把角色放入认证器里</span></span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(user.getUserName(), user.getPassword(), authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="AuthenticationFilter"></a></p><h2 id="AuthenticationFilter"><a href="#AuthenticationFilter" class="headerlink" title="AuthenticationFilter"></a>AuthenticationFilter</h2><p>首先呢我们要有一个自定义的 <code>AuthenticationFilter</code> 来实现对自定义登陆的拦截，我们模仿源码去写，拿到请求中的 <code>mobile</code> 构建一个没有认证的 <code>SmsCodeAuthenticationToken</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信登录的鉴权过滤器，模仿 UsernamePasswordAuthenticationFilter 实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * form表单中手机号码的字段name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_SECURITY_FORM_MOBILE_KEY = <span class="string">"mobile"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobileParameter = SPRING_SECURITY_FORM_MOBILE_KEY;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否仅 POST 方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> postOnly = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCodeAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 短信登录的请求 post 方式的 /sms/login</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"/sms/login"</span>, <span class="string">"POST"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">                    <span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String mobile = obtainMobile(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mobile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mobile = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mobile = mobile.trim();</span><br><span class="line"></span><br><span class="line">        SmsCodeAuthenticationToken authRequest = <span class="keyword">new</span> SmsCodeAuthenticationToken(mobile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Allow subclasses to set the "details" property</span></span><br><span class="line">        setDetails(request, authRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">obtainMobile</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameter(mobileParameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setDetails</span><span class="params">(HttpServletRequest request, SmsCodeAuthenticationToken authRequest)</span> </span>&#123;</span><br><span class="line">        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobileParameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobileParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobileParameter</span><span class="params">(String mobileParameter)</span> </span>&#123;</span><br><span class="line">        Assert.hasText(mobileParameter, <span class="string">"Mobile parameter must not be empty or null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.mobileParameter = mobileParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostOnly</span><span class="params">(<span class="keyword">boolean</span> postOnly)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postOnly = postOnly;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="AuthenticationToken"></a></p><h2 id="AuthenticationToken"><a href="#AuthenticationToken" class="headerlink" title="AuthenticationToken"></a>AuthenticationToken</h2><p>上面说到了构建一个没有认证的<code>SmsCodeAuthenticationToken</code> 那么我们就来自己写一个</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *这一步的作用是为了替换原有系统的 UsernamePasswordAuthenticationToken 用来做验证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 代码都是从UsernamePasswordAuthenticationToken 里粘贴出来的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 UsernamePasswordAuthenticationToken 中该字段代表登录的用户名，</span></span><br><span class="line"><span class="comment">     * 在这里就代表登录的手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个没有鉴权的 SmsCodeAuthenticationToken</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCodeAuthenticationToken</span><span class="params">(Object principal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建拥有鉴权的 SmsCodeAuthenticationToken</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCodeAuthenticationToken</span><span class="params">(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authorities);</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>); <span class="comment">// must use super, as we override</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ~ Methods</span></span><br><span class="line">    <span class="comment">// 剩下的方法不用动就行了 就是从 UsernamePasswordAuthenticationToken 里粘贴出来的</span></span><br><span class="line">    <span class="comment">// ========================================================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.principal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eraseCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eraseCredentials();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="AuthenticationProvider"></a></p><h2 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h2><p>有了<code>AuthenticationFilter</code> <code>AuthenticationToken</code> 都有了，按照上一篇的逻辑走，肯定要有一个<code>AuthenticationProvider</code>  来进行验证吧。那么我们也来写一个</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信登陆鉴权 Provider，要求实现 AuthenticationProvider 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"><span class="comment">//上下文中的 userDetailsService</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        SmsCodeAuthenticationToken authenticationToken = (SmsCodeAuthenticationToken) authentication;</span><br><span class="line"></span><br><span class="line">        String mobile = (String) authenticationToken.getPrincipal();</span><br><span class="line"></span><br><span class="line">        checkSmsCode(mobile);</span><br><span class="line"></span><br><span class="line">        UserDetails userDetails = userDetailsService.loadUserByUsername(mobile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时鉴权成功后，应当重新 new 一个拥有鉴权的 authenticationResult 返回</span></span><br><span class="line">        SmsCodeAuthenticationToken authenticationResult = <span class="keyword">new</span> SmsCodeAuthenticationToken(userDetails, userDetails.getAuthorities());</span><br><span class="line"></span><br><span class="line">        authenticationResult.setDetails(authenticationToken.getDetails());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authenticationResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkSmsCode</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest request = ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();</span><br><span class="line">      </span><br><span class="line">        String inputCode = request.getParameter(<span class="string">"smsCode"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里的验证码我们放session里，这里拿出来跟用户输入的做对比</span></span><br><span class="line">        Map&lt;String, Object&gt; smsCode = (Map&lt;String, Object&gt;) request.getSession().getAttribute(<span class="string">"smsCode"</span>);</span><br><span class="line">        <span class="keyword">if</span> (smsCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"未检测到申请验证码"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String applyMobile = (String) smsCode.get(<span class="string">"mobile"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> code = (<span class="keyword">int</span>) smsCode.get(<span class="string">"code"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!applyMobile.equals(mobile)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"申请的手机号码与登录手机号码不一致"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (code != Integer.parseInt(inputCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"验证码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断 authentication 是不是 SmsCodeAuthenticationToken 的子类或子接口</span></span><br><span class="line">        <span class="keyword">return</span> SmsCodeAuthenticationToken<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">authentication</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">getUserDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDetailsService</span><span class="params">(UserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="SecurityConfigurerAdapter"></a></p><h2 id="SecurityConfigurerAdapter"><a href="#SecurityConfigurerAdapter" class="headerlink" title="SecurityConfigurerAdapter"></a>SecurityConfigurerAdapter</h2><p><code>AuthenticationFilter</code> <code>AuthenticationToken</code> <code>AuthenticationProvider</code>  全部都有了，那么还差啥？</p><p>就差跟 security做绑定了怎么做呢？ 不慌我们先定义下成功处理器和失败处理器</p><p><a name="e53d0c91"></a></p><h3 id="成功处理器"><a href="#成功处理器" class="headerlink" title="成功处理器"></a>成功处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"登录成功"</span>);</span><br><span class="line">        response.setStatus(HttpStatus.OK.value());</span><br><span class="line">        ModelMap modelMap = GenerateModelMap.generateMap(HttpStatus.OK.value(), <span class="string">"登录成功"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(modelMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="fdd98bed"></a></p><h3 id="失败处理器"><a href="#失败处理器" class="headerlink" title="失败处理器"></a>失败处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"登录失败！"</span>);</span><br><span class="line">        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        ModelMap modelMap = GenerateModelMap.generateMap(HttpStatus.INTERNAL_SERVER_ERROR.value(), <span class="string">"验证失败"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(modelMap));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="910d37c9"></a></p><h3 id="加入到过滤链里"><a href="#加入到过滤链里" class="headerlink" title="加入到过滤链里"></a>加入到过滤链里</h3><p><code>SecurityConfigurerAdapter</code> 顾名思义就是 SecurityConfigurer的适配器，我们只需要吧我们刚才写的 <code>AuthenticationFilter</code> <code>AuthenticationToken</code> <code>AuthenticationProvider</code>   都放进来就可以与security挂上了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationSecurityConfig</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurerAdapter</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//我们自己定义的UserDetailsService</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler customAuthenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler customAuthenticationFailureHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SmsCodeAuthenticationFilter smsCodeAuthenticationFilter = <span class="keyword">new</span> SmsCodeAuthenticationFilter();</span><br><span class="line">        <span class="comment">//设置AuthenticationManager</span></span><br><span class="line">        smsCodeAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="comment">//设置失败成功处理器</span></span><br><span class="line">        smsCodeAuthenticationFilter.setAuthenticationSuccessHandler(customAuthenticationSuccessHandler);</span><br><span class="line">        smsCodeAuthenticationFilter.setAuthenticationFailureHandler(customAuthenticationFailureHandler);</span><br><span class="line">        <span class="comment">//设置UserDetailsService</span></span><br><span class="line">        SmsCodeAuthenticationProvider smsCodeAuthenticationProvider = <span class="keyword">new</span> SmsCodeAuthenticationProvider();</span><br><span class="line">        smsCodeAuthenticationProvider.setUserDetailsService(userService);</span><br><span class="line">        <span class="comment">//这里说明要把我们自己写的Provider放在过滤链的哪里</span></span><br><span class="line">        http.authenticationProvider(smsCodeAuthenticationProvider)</span><br><span class="line">                .addFilterAfter(smsCodeAuthenticationFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样只是加入到了security的过滤链里 但是并没有生效，那么怎么配置呢？对就是还要在 <code>WebSecurityConfigurerAdapter</code>  里配置一下。</p><p><a name="WebSecurityConfigurerAdapter"></a></p><h2 id="WebSecurityConfigurerAdapter"><a href="#WebSecurityConfigurerAdapter" class="headerlink" title="WebSecurityConfigurerAdapter"></a>WebSecurityConfigurerAdapter</h2><p>要想让 咱们自定义的配置生效，必须在配置中加入 <code>http.apply(config)</code> 才可以。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler customAuthenticationFailureHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//注入咱们自己定义的登陆流程</span></span><br><span class="line">    <span class="keyword">private</span> SmsCodeAuthenticationSecurityConfig smsCodeAuthenticationSecurityConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(</span><br><span class="line">                <span class="keyword">new</span> PasswordEncoder() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> charSequence.toString();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//表单登陆配置</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .failureHandler(customAuthenticationFailureHandler)</span><br><span class="line">                .successHandler(customAuthenticationSuccessHandler)</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/authentication/form"</span>)</span><br><span class="line">                .and();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        http.apply(smsCodeAuthenticationSecurityConfig)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 如果有允许匿名的url，填在下面</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>, <span class="string">"/sms/**"</span>, <span class="string">"/authentication/form"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭CSRF跨域</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们已经完成了我们自定义的登陆流程。</p><p><strong>本博文是基于springboot2.x 和security 5 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity（二）认证流程</title>
      <link href="/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章我们做了一个简单的入门程序，我们这一篇就来简单的跟踪源码，来分析一下其中的原理，顺便了解了整个流程后更方便我们扩展去做不同的登陆。</p><p><a name="973e5845"></a></p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p>我们就拿上一篇的登陆来做一个分析。</p><p>用户在页面上输入 用户名密码后访问响应的登陆方法 会进入到 <code>UsernamePasswordAuthenticationFilter</code><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064669270-bd2a3e09-95f4-47bb-a61e-a4c90d82642a.png#align=left&display=inline&height=609&originHeight=609&originWidth=918&size=0&status=done&width=918" class="lazyload"><br>然后会进入到<code>attemptAuthentication</code> 方法中。在这个方法里呢我们拿到请求中的用户名 和密码 并且构建了一个 <code>UsernamePasswordAuthenticationToken</code>  我们点进去看一下构建的什么<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668824-ec6758d2-3c15-4d86-9516-4641016ff3d3.png#align=left&display=inline&height=155&originHeight=155&originWidth=760&size=0&status=done&width=760" class="lazyload"><br>原来在构造方法里  <code>setAuthenticated(false)</code> 就代码这个 <code>AuthenticationToken</code> 没有进行认证。</p><p>最后返回值 返回给 <code>AuthenticationManager</code> 进行验证，好我们接着向下走</p><p>随后我们进入到了 <code>ProviderManager</code> 里 顾名思义就是各种 Provider 的管理器。<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668853-0150f40b-9c35-4dc3-9768-91c353870538.png#align=left&display=inline&height=591&originHeight=591&originWidth=1008&size=0&status=done&width=1008" class="lazyload"><br>此时呢 先拿到我们构建未认证的 <code>UsernamePasswordAuthenticationToken</code>  的class 与上下文中的所有 <code>AuthenticationProvider</code> 进行对比，如果通过</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668878-ca4fee71-1edf-4502-a42a-20f786e27e00.png#align=left&display=inline&height=312&originHeight=312&originWidth=844&size=0&status=done&width=844" class="lazyload"><br>会给相对应的 <code>AuthenticationProvider</code> 进行 验证我们继续向下走</p><p>此时我们进入到了 <code>AbstractUserDetailsAuthenticationProvider</code></p><p>这里说明一下 <code>AbstractUserDetailsAuthenticationProvider</code>  是 <code>DaoAuthenticationProvider</code> 的抽象类</p><p>这里呢会调用<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668848-526ca803-32bf-444e-b704-05c09f89cb73.png#align=left&display=inline&height=746&originHeight=746&originWidth=1149&size=0&status=done&width=1149" class="lazyload"><br>自身的  <code>retrieveUser</code> 方法进行用户的查找，我们进去看一下，果然 这里调用了上下文中的<code>UserDetailsService</code> 也就是我们自定义的那个 进行用户的查找</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668959-9bddbf53-56e5-46db-9754-769ee411436e.png#align=left&display=inline&height=502&originHeight=502&originWidth=1018&size=0&status=done&width=1018" class="lazyload"><br>然后接着向下走</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668841-a57bdd99-4f57-40fc-b748-dd957c4eed7d.png#align=left&display=inline&height=768&originHeight=768&originWidth=1058&size=0&status=done&width=1058" class="lazyload"><br>用户找到了 ， 然后我们从前台输入的 认证信息也带过来了，干嘛呢 ？进行对比啊，这里security进行 几层对比</p><p>如果全部通过 则会走<code>Provider</code> 自己的 <code>createSuccessAuthentication</code> 方法 我们进去看一看<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668829-52c2cc6d-5ea4-42bc-9089-9e8b726f31a1.png#align=left&display=inline&height=270&originHeight=270&originWidth=949&size=0&status=done&width=949" class="lazyload"><br>哦 原来这里要在进行密码的比对，方法名为Success 只是用户找到了而已0.0，密码验证通过了才会到真正的方法里然后返回 Authentication<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668935-3a342081-9074-4ec9-9e10-a3c506654b79.png#align=left&display=inline&height=292&originHeight=292&originWidth=902&size=0&status=done&width=902" class="lazyload"><br>不难看出这里重新构建了一个 <code>UsernamePasswordAuthenticationToken</code> 把用户设置为已经认证状态<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668845-5192fd3b-8318-4409-8be9-965fddb673a1.png#align=left&display=inline&height=179&originHeight=179&originWidth=789&size=0&status=done&width=789" class="lazyload"><br>然后这个流程算是走完了 接着回到我们了 <code>ProviderManager</code><br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668954-def7b271-9d15-41c6-9d95-034e2221149f.png#align=left&display=inline&height=424&originHeight=424&originWidth=842&size=0&status=done&width=842" class="lazyload"><br>此时我们的方法已经走完了 这时候我们会进入到 <code>AbstractAuthenticationProcessingFilter</code>   顾名思义就是所有认证处理器的过滤器  的 <code>doFilter()</code> 方法里</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064670274-36ef0901-1df0-4225-9437-078590205171.png#align=left&display=inline&height=664&originHeight=664&originWidth=1020&size=0&status=done&width=1020" class="lazyload"></p><hr><p>然后这个过滤器就走完了</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668981-b154d895-9850-46fe-9545-e600c07646e9.png#align=left&display=inline&height=458&originHeight=458&originWidth=867&size=0&status=done&width=867" class="lazyload"><br>走到<code>successfulAuthentication</code> 或者 <code>unsuccessfulAuthentication</code> 就证明我们走完了整个认证流程。<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564064668878-01156434-1cb3-41d1-b763-75497a9cb026.png#align=left&display=inline&height=476&originHeight=476&originWidth=954&size=0&status=done&width=954" class="lazyload"><br>后续整个方法会吧认证信息放入  <code>SecurityContextHolder.getContext()</code>   其实就是在这里将认证信息放入 Session 中。</p><p>查看 <code>SecurityContext</code> 源码，发现内部就是对 Authentication 的封装，提供了 equals、hashcode、toString等方法，而<code>SecurityContextHolder</code> 可以理解为线程中的 <code>ThreadLocal</code>。</p><p>我们知道一个 HTTP 请求和响应都是在一个线程中执行，因此在整个处理的任何一个方法中都可以通过 <code>SecurityContextHolder.getContext()</code>来取得存放进去的认证信息。</p><p><a name="54bbba80"></a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>上面那些我相信大家都没怎么看，我这里呢就画图来总结一下整个认证流程<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564064670292-d33de238-42d1-4fc9-93d5-8164ec1d6c1d.jpeg#align=left&display=inline&height=641&originHeight=641&originWidth=661&size=0&status=done&width=661" class="lazyload"></p><p>差不多就是这样一个流程</p><ol><li>进入 <code>UsernamePasswordAuthenticationFilter</code>  然后构建一个没有认证的  <code>UsernamePasswordAuthenticationToken</code></li><li>随后交给 <code>AuthenticationManager</code> 进行验证，</li><li><code>AuthenticationManager</code> 找到对应的 <code>AuthenticationProvider</code>进行认证</li><li><code>AuthenticationProvider</code>找到上下文中的<code>UserDetailsService</code>  中寻找用户然后对比</li><li>验证成功返回 <code>Authentication</code> 放入 <code>SecurityContextHolder</code>中</li></ol><p>从 session 中对认证信息的处理由 <code>SecurityContextPersistenceFilter</code> 来处理，它位于 Spring Security 过滤器链的最前面，它的主要作用是：</p><ul><li>当请求时，检查 Session 中是否存在 SecurityContext，如果有将其放入到线程中。</li><li>当响应时，检查线程中是否存在 SecurityContext，如果有将其放入到 Session 中。<br><br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564064668921-27166a8d-9155-47d7-a82e-cab7cd17785e.jpeg#align=left&display=inline&height=573&originHeight=573&originWidth=1229&size=0&status=done&width=1229" class="lazyload"><br><br>Security的过滤链我以后的帖子说权限验证的时候中会详细说明</li></ul><p>我们了解这样一个登陆的流程后 要定制一个自己的登陆过滤器加入到SpringSecurity的过滤连中。下一篇帖子在讲。</p><p><strong>本博文是基于springboot2.x 和security 5 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity（一）入门程序</title>
      <link href="/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/07/25/yuque/SpringBoot%E6%95%B4%E5%90%88SpringSecurity%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>Spring Security是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实标准。</p><p>Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以轻松扩展以满足自定义要求。</p><p>这是Spring Security 官方的说明，早就听闻 Spring Security 功能强大但上手困难，于是上手学习了学习，在此整理出几篇文章，百度的坑是真的多。</p><blockquote><p>本文章代码可以参考<code></code><a href="https://gitee.com/Maoxs/security-test" target="_blank" rel="noopener"><code>https://gitee.com/Maoxs/security-test</code></a><code></code>中的 <strong>security-form</strong></p></blockquote><p><a name="47c5b0be"></a></p><h2 id="首先依赖"><a href="#首先依赖" class="headerlink" title="首先依赖"></a>首先依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="5db70767"></a></p><h2 id="准备页面"><a href="#准备页面" class="headerlink" title="准备页面"></a>准备页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="string">"input[name=username]"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> password = $(<span class="string">"input[name=password]"</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (username === <span class="string">""</span> || password === <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"用户名或密码不能为空"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/authentication/form"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"username"</span>: username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"password"</span>: password</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆成功"</span>)</span></span><br><span class="line"><span class="actionscript">                setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    location.href = <span class="string">'/hello'</span>;</span></span><br><span class="line">                &#125;, 1500);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error: <span class="function"><span class="keyword">function</span> <span class="params">(e,a,b)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.responseText);</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"登陆失败"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello world from fulinlin.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7edf917e"></a></p><h2 id="准备测试用户"><a href="#准备测试用户" class="headerlink" title="准备测试用户"></a>准备测试用户</h2><p>这里呢我们就不连数据库了，创造一些模拟的数据</p><p>首先呢是用户的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roles;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysUser</span><span class="params">(Long id, String userName, String password, List&lt;String&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先呢是接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">SysUser <span class="title">findByUsername</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        users.add(<span class="keyword">new</span> SysUser(<span class="number">1L</span>, <span class="string">"fulin"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_DOCKER"</span>)));</span><br><span class="line">        users.add(<span class="keyword">new</span> SysUser(<span class="number">2L</span>, <span class="string">"xiaohan"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_DOCKER"</span>)));</span><br><span class="line">        users.add(<span class="keyword">new</span> SysUser(<span class="number">3L</span>, <span class="string">"longlong"</span>, <span class="string">"123456"</span>, Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_DOCKER"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">findByUsername</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.stream().filter(o -&gt; StringUtils.equals(o.getUserName(), userName)).findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="74a5d626"></a></p><h2 id="配置SpringSecurity"><a href="#配置SpringSecurity" class="headerlink" title="配置SpringSecurity"></a>配置SpringSecurity</h2><p><a name="98785390"></a></p><h3 id="找到谁"><a href="#找到谁" class="headerlink" title="找到谁"></a>找到谁</h3><p>要想通过Security的用户认证的话 必须要实现一个<code>UserDetailsService</code>的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService iUserService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        SysUser user = iUserService.findByUsername(s);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把角色放入认证器里</span></span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(user.getUserName(), user.getPassword(), authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里呢要实现一个返回 <code>UserDetails</code> 类的方法 ，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面与有各种的用户状态 这里呢</p><p>security默认有一个<code>org.springframework.security.core.userdetails.User</code>的实现  我们返回的时候构建这个类即可，它有三个参数，分别是用户名、密码和权限集。</p><p>这一骤只是为了让security找到你是谁。</p><p><a name="9ea5c7b6"></a></p><h3 id="登陆成功怎么办"><a href="#登陆成功怎么办" class="headerlink" title="登陆成功怎么办"></a>登陆成功怎么办</h3><p>security提供了一个<code>AuthenticationSuccessHandler</code> 的接口默认实现是跳转url，因为程序走ajax了所以我们返回json</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessAuthenticationHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuccessAuthenticationHandler</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"登录成功"</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(authentication));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="68c28d75"></a></p><h3 id="登陆失败怎么办"><a href="#登陆失败怎么办" class="headerlink" title="登陆失败怎么办"></a>登陆失败怎么办</h3><p>与成功处理器对应的还有一个失败处理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailureAuthenticationHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FailureAuthenticationHandler</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"登录失败"</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="WebSecurityConfig"></a></p><h3 id="WebSecurityConfig"><a href="#WebSecurityConfig" class="headerlink" title="WebSecurityConfig"></a>WebSecurityConfig</h3><p>上面做的那么多但是并没有跟security关联上</p><p>这时候我们要继承<code>WebSecurityConfigurerAdapter</code> 这个类来实现security的个性化配置</p><p>把我们自定义的 <code>userDetailsService</code>  、<code>SuccessAuthenticationHandler</code>、<code>FailureAuthenticationHandler</code>注入进来</p><p>这里我们还指定了密码的加密方式（5.0 版本强制要求设置），因为我们构造的数据是明文的，所以明文返回即可，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FailureAuthenticationHandler failureAuthenticationHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SuccessAuthenticationHandler successAuthenticationHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入身份管理器bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把userService 放入AuthenticationManagerBuilder 里</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(</span><br><span class="line">                <span class="keyword">new</span> PasswordEncoder() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> charSequence.toString();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//http.httpBasic()  //httpBasic 登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)<span class="comment">// 登陆的url</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/authentication/form"</span>) <span class="comment">// 自定义登录路径</span></span><br><span class="line">                .failureHandler(failureAuthenticationHandler) <span class="comment">// 自定义登录失败处理</span></span><br><span class="line">                .successHandler(successAuthenticationHandler) <span class="comment">// 自定义登录成功处理</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()<span class="comment">// 对请求授权</span></span><br><span class="line">                 <span class="comment">// 这些页面不需要身份认证,其他请求需要认证</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>, <span class="string">"/authentication/require"</span>,</span><br><span class="line">                        <span class="string">"/authentication/form"</span>).permitAll()</span><br><span class="line">                .anyRequest() <span class="comment">// 任何请求</span></span><br><span class="line">                .authenticated() <span class="comment">// 都需要身份认证</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();<span class="comment">// 禁用跨站攻击</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置拦截忽略文件夹，可以对静态资源放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要将密码加密，可以修改 <code>configure()</code> 方法如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     auth.userDetailsService(userDetailsService)</span><br><span class="line">         .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后启动项目会进入登陆页面，输入正确的用户名和密码即可。</p><p><strong>本博文是基于springboot2.x 和security 5 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 查看接口或者类的关系</title>
      <link href="/2019/07/25/yuque/idea%20%E6%9F%A5%E7%9C%8B%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2019/07/25/yuque/idea%20%E6%9F%A5%E7%9C%8B%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%B1%BB%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>在 IntelliJ IDEA 中可以很方便查看一个类也就是当前类的所有继承关系，包括实现的所有的接口和继承的类,方便研究源码查看实现原理</p><p><a name="de518c83"></a></p><h2 id="查看该类的继承关系"><a href="#查看该类的继承关系" class="headerlink" title="查看该类的继承关系"></a>查看该类的继承关系</h2><p>右键➡点击Diagram  <code>Show Diagram</code> \ <code>Show Diagram Popup</code></p><p>或者使用快捷键<code>Ctrl+Alt+U</code> \ <code>Ctrl+Shirt+Alt+U</code><br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952563-4c71efc7-6b71-46b7-aaae-ece0486fc1f3.png#align=left&display=inline&height=659&originHeight=659&originWidth=1059&size=0&status=done&style=none&width=1059" class="lazyload"></p><p>如果点击了 <code>Show Diagram</code>  则会进入到一个新的tab 页</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952583-95abdc13-0b9b-4034-9e93-229a3058c04b.png#align=left&display=inline&height=765&originHeight=765&originWidth=1232&size=0&status=done&style=none&width=1232" class="lazyload"></p><p>注意左上角的几个小图标</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952627-fca55063-124f-45e9-8908-ed228773ce6b.png#align=left&display=inline&height=98&originHeight=98&originWidth=540&size=0&status=done&style=none&width=540" class="lazyload"></p><p>从左到右依次是   <code>常量</code>  、<code>构造参数</code> 、<code>方法</code> 、<code>属性</code> 、<code>内部类</code>  点击一下即可在图形上直接显示。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952591-86a29e67-63d0-4be2-b8e2-2927e08f4352.png#align=left&display=inline&height=86&originHeight=86&originWidth=101&size=0&status=done&style=none&width=101" class="lazyload"><br>然后小眼睛那个可以过滤访问修饰符</p><p><a name="4d544169"></a></p><h2 id="查看该类的实现"><a href="#查看该类的实现" class="headerlink" title="查看该类的实现"></a>查看该类的实现</h2><p>在你想查看的类上 <code>Ctrl+H</code>（<code>Ctrl+Alt+B</code>是直接弹窗，不能过滤）</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952652-d66f0520-2f4d-41e4-99e2-e440e727f269.png#align=left&display=inline&height=638&originHeight=638&originWidth=1158&size=0&status=done&style=none&width=1158" class="lazyload"></p><p>这样就可以看到该类的所有实现，如果类不好去寻找，想过滤怎么办？</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952604-91425bc3-2e83-4ac3-8cdb-d5594f677d16.png#align=left&display=inline&height=181&originHeight=181&originWidth=152&size=0&status=done&style=none&width=152" class="lazyload">)<img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063952582-b65c29b9-6cbe-40e2-816f-f3e1e20214f0.png#align=left&display=inline&height=680&originHeight=680&originWidth=816&size=0&status=done&style=none&width=816" class="lazyload"><br>最后在scope选择我们刚配置的，这样我就找到了相应范围内原生的实现类了。<br>配合 <code>ctrl+alt+→</code> 和 <code>ctrl+alt+←</code><br>这样就可以爽爽的看源码了（吐血）</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十九）整合MongoDB</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E6%95%B4%E5%90%88MongoDB/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%E6%95%B4%E5%90%88MongoDB/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><p>依赖依赖依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://localhost:27017/test</span>  <span class="comment">#如果没有test就会自动创建</span></span><br></pre></td></tr></table></figure><p>集群呢就这样写</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://192.168.8.101:27017,192.168.8.101:27018/test</span>  <span class="comment">#如果没有test就会自动创建</span></span><br></pre></td></tr></table></figure><p>有密码了怎么办</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://user:secret@127.0.0.1:27017/test</span>  <span class="comment">#如果没有test就会自动创建</span></span><br></pre></td></tr></table></figure><p>springboot中是使用MongoTemplate 来简化操作的。写个简单的例子 创建一个实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fulinlin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"User&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"id="</span>).append(id);</span><br><span class="line">        sb.append(<span class="string">", name='"</span>).append(name).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", password='"</span>).append(password).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fulinlin.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function">List&lt;User&gt; <span class="title">select</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fulinlin.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fulinlin.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.fulinlin.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mongoTemplate.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"id"</span>).is(user.getId()));</span><br><span class="line">        Update update = <span class="keyword">new</span> Update().set(<span class="string">"name"</span>, user.getName()).set(<span class="string">"password"</span>, user.getPassword());</span><br><span class="line">        mongoTemplate.updateFirst(query, update, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"id"</span>).is(id));</span><br><span class="line">        mongoTemplate.remove(query,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  List&lt;User&gt;  <span class="title">select</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> size)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query();</span><br><span class="line">        query.skip(page*size).limit(size);</span><br><span class="line">        List&lt;User&gt; users = mongoTemplate.find(query, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fulinlin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fulinlin.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.fulinlin.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootMongodbApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User(rand.nextInt(<span class="number">100</span>) + <span class="number">1L</span>, <span class="string">"jacl"</span> + i, UUID.randomUUID().toString());</span><br><span class="line">            userDao.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">79L</span>, <span class="string">"fulin"</span>, <span class="string">"wangle"</span>);</span><br><span class="line">        <span class="keyword">this</span>.userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.delete(<span class="number">5L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selcet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;User&gt; select = <span class="keyword">this</span>.userDao.select(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        select.forEach(p -&gt; &#123;</span><br><span class="line">            System.out.println(p.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在用robo看看效果</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063916338-09abcf99-7881-41cb-8bce-30c25674b945.png#align=left&display=inline&height=805&originHeight=805&originWidth=1294&size=0&status=done&width=1294" class="lazyload"></p><hr><p>ok没问题  这里呢在放一个学习手册 <a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.0.RC1/reference/html/" target="_blank" rel="noopener">MongoTemplate 学习手册</a></p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 远程DeBug</title>
      <link href="/2019/07/25/yuque/SpringBoot%20%E8%BF%9C%E7%A8%8BDeBug/"/>
      <url>/2019/07/25/yuque/SpringBoot%20%E8%BF%9C%E7%A8%8BDeBug/</url>
      
        <content type="html"><![CDATA[<p>tags: [SpringBoot,DeBug]<br>categories:  Spring相关</p><hr><p><a name="BqseB"></a></p><h2 id="远程debug调试java代码"><a href="#远程debug调试java代码" class="headerlink" title="远程debug调试java代码"></a>远程debug调试java代码</h2><p>日常环境和预发环境遇到问题时，可以用远程调试的方法本地打断点，在本地调试。生产环境由于网络隔离和系统稳定性考虑，不能进行远程代码调试。也就是说，你本地运行没问题啊，为啥放服务器上就有问题看了，这时候应该怎么办呢？</p><p>整体过程是通过修改远程服务JAVA_OPTS参数，然后本地通过Eclipse或IDEA等工具调试。</p><p><a name="a10f4a8f"></a></p><h2 id="基本理论"><a href="#基本理论" class="headerlink" title="基本理论"></a>基本理论</h2><p>Java远程调试的原理是两个VM之间通过debug协议进行通信，然后以达到远程调试的目的。两者之间可以通过socket进行通信。首先被debug程序的虚拟机在启动时要开启debug模式，启动debug监听程序。jdwp是Java Debug Wire Protocol的缩写。</p><p>命令如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,<span class="built_in">suspend</span>=n -jar demo.jar</span><br></pre></td></tr></table></figure><p>这是jdk1.7版本之前的方法，1.7之后可以这样用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -agentlib:jdwp=transport=dt_socket,address=8000,server=y,<span class="built_in">suspend</span>=n -jar demo.jar</span><br></pre></td></tr></table></figure><p>差不多就是这样一个原理</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063867959-f94ee3c8-208f-402e-b787-49a45357f4d1.png#align=left&display=inline&height=336&originHeight=336&originWidth=507&size=0&status=done&style=none&width=507" class="lazyload"></p><p><a name="21f2fa80"></a></p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p><strong>transport</strong></p><p>指定运行的被调试应用和调试者之间的通信协议，它由几个可选值：</p><ul><li><code>dt_socket</code>：主要的方式，采用 socket 方式连接</li><li><code>dt_shmem</code>：采用共享内存方式连接，仅支持 Windows 平台（暂未验证）</li></ul><p><strong>server</strong></p><p>当前应用作为调试服务端还是客户端，默认为 <code>n</code>。</p><p>如果你想将当前应用作为被调试应用，设置该值为 <code>y</code>；如果你想将当前应用作为客户端，作为调试的发起者，设置该值为 <code>n</code>。</p><p><strong>suspend</strong></p><p>当前应用启动后，是否阻塞应用直到被连接，默认值为 <code>y</code>。</p><p><code>suspend=n</code>表示启动时不需要应用阻塞等待连接，表示当前是调试服务端</p><p><code>suspend=y</code>表示当前是调试客户端 ，那么当前的VM就是<code>suspend</code>直到有<code>debug client</code>连接进来才开始执行程序，方便调试项目启动不了的问题。</p><p><strong>address</strong></p><p>暴露的调试连接端口，默认值为 <code>8000</code>。</p><p><strong>onthrow</strong></p><p>当程序抛出设定异常时，中断调试。</p><p><strong>onuncaught</strong></p><p>当程序抛出未捕获异常时，是否中断调试，默认值为 <code>n</code>。</p><p><strong>launch</strong></p><p>当调试中断时，执行的程序。</p><p><strong>timeout</strong></p><p>该参数限定为 <code>java -agentlib:jdwp=…</code> 可用，单位为毫秒ms。</p><p>当 suspend = y 时，该值表示等待连接的超时；当 suspend = n 时，该值表示连接后的使用超时。</p><p><a name="57741772"></a></p><h2 id="参考实例"><a href="#参考实例" class="headerlink" title="参考实例"></a>参考实例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,address=8000</span><br></pre></td></tr></table></figure><p>以 Socket 方式监听 8000 端口，程序启动阻塞（suspend的默认值为y）直到被连接。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,address=localhost:8000,timeout=5000</span><br></pre></td></tr></table></figure><p>以 Socket 方式监听 8000 端口，当程序启动后5秒无调试者连接的话终止，程序启动阻塞（suspend的默认值为y）直到被连接。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_shmem,server=y,<span class="built_in">suspend</span>=n</span><br></pre></td></tr></table></figure><p>选择可用的共享内存连接地址并使用 stdout 打印，程序启动不阻塞。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,address=myhost:8000</span><br></pre></td></tr></table></figure><p>以 socket 方式连接到 myhost:8000上的调试程序，在连接成功前启动阻塞。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,\</span><br><span class="line">address=8000,onthrow=java.io.IOException,launch=/usr/<span class="built_in">local</span>/bin/debugstub</span><br></pre></td></tr></table></figure><p>以 Socket 方式监听 8000 端口，程序启动阻塞（suspend的默认值为y）直到被连接。当抛出 IOException 时中断调试，转而执行 <code>usr/local/bin/debugstub</code>程序。</p><p><a name="60ed02ab"></a></p><h2 id="IDEA-远程调试"><a href="#IDEA-远程调试" class="headerlink" title="IDEA 远程调试"></a>IDEA 远程调试</h2><p>先运行这个程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=8000 -jar demo.jar</span><br></pre></td></tr></table></figure><p>这时候程序就会开一个<code>8000</code> 端口然后在idea中</p><p><code>Edit Configurations-&gt; + -&gt; Remote</code></p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063867987-3a5d3dd2-6c09-4159-bb2b-b400f644a59d.png#align=left&display=inline&height=646&originHeight=646&originWidth=1403&size=0&status=done&style=none&width=1403" class="lazyload"><br>设置后</p><p>在<code>Use module classpath</code> 中设置你要 调试的代码 点击启动即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 systemctl的使用</title>
      <link href="/2019/07/25/yuque/Centos7%20systemctl%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/25/yuque/Centos7%20systemctl%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>CentOS7的服务systemctl脚本存放在:<code>/usr/lib/systemd/</code>,有系统（system）和用户（user）之分,需要开机不登陆就能运行的程序，存在系统服务里，即：<code>/usr/lib/systemd/system</code>目录下.这样说吧 ，它融合之前service和chkconfig的功能于一体！！！</p><p><a name="f411d0f1"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>CentOS7的每一个服务以.service结尾，一般会分为3部分：[Unit]、[Service]和[Install]</p><ul><li>[Unit] 服务的说明<ul><li>Description 描述服务</li><li>After 描述服务类别</li></ul></li><li>[Service] 服务的关键，是服务的一些具体运行参数的设置<ul><li>Type=forking是后台运行的形式</li><li>User=users是设置服务运行的用户</li><li>Group=users是设置服务运行的用户组</li><li>PIDFile为存放PID的文件路径</li><li>ExecStart为服务的具体运行命令</li><li>ExecReload为重启命令</li><li>ExecStop为停止命令</li><li>PrivateTmp=True表示给服务分配独立的临时空间</li></ul></li></ul><p><strong>注意：[Service]部分的启动、重启、停止命令全部要求使用绝对路径，使用相对路径则会报错！</strong></p><ul><li>[Install] 部分是服务安装的相关设置，可设置为多用户的</li></ul><p><a name="029b0af4"></a></p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>就拿tomcat为栗子吧</p><p>首先</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure><p>然后加入内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=java tomcat project</span><br><span class="line">After=tomcat.service</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=users</span><br><span class="line">Group=users</span><br><span class="line">PIDFile=/usr/local/tomcat/tomcat.pid</span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecReload=</span><br><span class="line">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">PrivateTmp=true</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>添加可执行权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 754 /usr/lib/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure><p>然后就可以使用了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start  tomcat.service</span><br></pre></td></tr></table></figure><p><a name="584a7cd1"></a></p><h2 id="常规的操作"><a href="#常规的操作" class="headerlink" title="常规的操作"></a>常规的操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled xxx.service  //查询服务是否开机启动</span><br><span class="line"> systemctl enable xxx.service  //开机运行服务</span><br><span class="line"> systemctl disable xxx.service //取消开机运行</span><br><span class="line"> systemctl start xxx.service //启动服务</span><br><span class="line"> systemctl stop xxx.service //停止服务</span><br><span class="line"> systemctl restart xxx.service //重启服务</span><br><span class="line"> systemctl reload xxx.service //重新加载服务配置文件</span><br><span class="line"> systemctl status xxx.service //查询服务运行状态</span><br><span class="line"> systemctl --failed //显示启动失败的服务</span><br><span class="line"> systemctl list-unit-files|grep enabled //查看已启动的服务列表</span><br></pre></td></tr></table></figure><p>只能说俩字 niubi。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> Systemctl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装mongodb</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85mongodb/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85mongodb/</url>
      
        <content type="html"><![CDATA[<p>tags: [Centos7,Mongodb]<br>categories:  环境配置</p><hr><p>MongoDB 是一个基于分布式 文件存储的NoSQL数据库</p><p><a name="d6f4c679"></a></p><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><p>在<code>/etc/yum.repos.d</code> 目录下创建<code>mongodb-org.repo</code>的一个文件</p><p>并在文件中加入如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mongodb-org]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></table></figure><p>然后基本操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mongod</span><br><span class="line">systemctl stop mongod</span><br><span class="line">systemctl restart mongod</span><br><span class="line">systemctl enable mongod</span><br><span class="line">systemctl status mongod</span><br></pre></td></tr></table></figure><p>配置文件在</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><p><a name="993e6568"></a></p><h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><p>下载mongodb的tar包<code>mongodb-linux-x86_64-3.6.3.tgz</code></p><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf mongodb-linux-x86_64-3.6.3.tgz</span><br></pre></td></tr></table></figure><p>然后吧解压好的文件移动到 <code>/usr/local/mongodb</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv mongodb-linux-x86_64-3.6.3/* /usr/local/mongodb/</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mongodb</span><br></pre></td></tr></table></figure><p>创建个data文件夹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br></pre></td></tr></table></figure><p>在usr/local/mongodb文件夹下创建logs文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch /usr/local/mongodb/logs</span><br></pre></td></tr></table></figure><p>进入/usr/local/mongodb/bin目录下，启动mongodb服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs --logappend  --port=27017 --fork</span><br></pre></td></tr></table></figure><p><a name="f4ec74c1"></a></p><h3 id="设置systemctl"><a href="#设置systemctl" class="headerlink" title="设置systemctl"></a>设置systemctl</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/mongodb.service</span><br></pre></td></tr></table></figure><p>然后加入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mongodb</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target  </span><br><span class="line">  </span><br><span class="line">[Service]  </span><br><span class="line">Type=forking  </span><br><span class="line">ExecStart=/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/bin/mongod.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/bin/mongod.conf</span><br><span class="line">PrivateTmp=true  </span><br><span class="line">    </span><br><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 754 /usr/lib/systemd/system/mongodb.service</span><br></pre></td></tr></table></figure><p>然后这些操作就行了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装nginx</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<p>tags: [Centos7,Nginx]<br>categories:  环境配置</p><hr><p>Nginx 是 C语言 开发，建议在 Linux 上运行。</p><p><a name="d6f4c679"></a></p><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><p>安装响应的nginx依赖</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>nginx源头</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>Nginx配置路径：/etc/nginx/</p><ul><li>PID目录：/var/run/<a href="[https://www.cent](https://www.cent">nginx.pid</a> os.bz/tag/nginx-pid/)</li><li>错误日志：/var/log/nginx/<a href="https://www.centos.bz/tag/error/" target="_blank" rel="noopener">error</a>.log</li><li>访问日志：/var/log/nginx/access.log</li><li>默认站点目录：/usr/share/nginx/html</li></ul><p>事实上，只需知道Nginx配置路径，其他路径均可在/etc/nginx/nginx.conf 以及/etc/nginx/conf.d/default.conf 中查询到。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl stop nginx</span><br><span class="line">systemctl restart nginx</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>这些就是基本操作。</p><p><a name="993e6568"></a></p><h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><p>去官方下载tar包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br><span class="line">cd nginx-1.14.2</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>默认配置的安装路径为<code>/usr/local/nginx</code></p><p>可以在执行configure 时候更改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/nginx</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>基本操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p><a name="f4ec74c1"></a></p><h3 id="设置systemctl"><a href="#设置systemctl" class="headerlink" title="设置systemctl"></a>设置systemctl</h3><p>首先</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure><p>加入如下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 754 /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure><p>然后就可以玩了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈极限编程</title>
      <link href="/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a name="DWPcp"></a></p><h2 id="为什么出现极限编程-？"><a href="#为什么出现极限编程-？" class="headerlink" title="为什么出现极限编程 ？"></a>为什么出现极限编程 ？</h2><p>敏捷方法论有一个共同的特点，<strong>那就是都将矛头指向了“文档”</strong>，它们认为传统的软件工程方法文档量太“重”了，称为“重量级”方法，而相应的敏捷方法则是“轻量级”方法。正是因为“轻量级”感觉没有什么力量，不但不能够有效体现灵活性，反而显得是不解决问题的方法论似的。因此，就有了一次划时代的会议，创建了敏捷联盟。</p><p>在敏捷方法论领域中，比较知名的、有影响力的，是拥有与 Microsoft 的操作系统相同缩写语——XP的极限编程（eXtreme Programming）。极限编程方法论可以说是敏捷联盟中最鲜艳的一面旗帜，也是被研究、尝试、应用、赞扬、批判最多的一种方法论，也是相对来说最成熟的一种。</p><p>这一被誉为“黑客文化”的方法论的雏形最初形成于1996—1999年间，Kent Beck、Ward Cunninggham、Ron Jeffrey 在开发 C3 项目（Chrysler Comprehensive Compensation）的实践中总结出了 XP 的基本元素。在此之后，Kent Beck 和他的一些好朋友们一起在实践中完善提高，终于形成了极限编程方法论。</p><p><a name="42e97bb5"></a></p><h2 id="什么是解析极限编程"><a href="#什么是解析极限编程" class="headerlink" title="什么是解析极限编程 ?"></a>什么是解析极限编程 ?</h2><p>那么什么是 极限编程呢？ <strong>这里我们把极限编程简称为 XP</strong></p><p><strong>XP 是一种轻量（敏捷）、高效、低风险、柔性、可预测、科学而且充满乐趣的软件开发方式</strong>。与其他方法论相比，其最大的不同在于：</p><ul><li>在更短的周期内，更早地提供具体、持续的反馈信息。</li><li>在迭代的进行计划编制，首先在最开始迅速生成一个总体计划，然后在整个项目开发过程中不断的发展它。</li><li>依赖于自动测试程序来监控开发进度，并及早地捕获缺陷。</li><li>依赖于口头交流、测试和源程序进行沟通。</li><li>倡导持续的演化式设计。</li><li>依赖于开发团队内部的紧密协作。</li><li>尽可能达到程序员短期利益和项目长期利益的平衡。</li></ul><p>Kent Beck 曾经说过“开车”就是一个 XP 的范例，即使看上去进行得很顺利，也不要把视线从公路上移开，因为路况的变化，将使得你必须随时做出一些这样那样的调整。而在软件项目中，客户就是司机，他们也没有办法确切地知道软件应该做什么，因此程序员就需要向客户提供方向盘，并且告知我们现在的位置。</p><p>XP 包括写什么呢？如图，<code>XP 由价值观、原则、实践和行为四个部分组成，它们彼此相互依赖、关联， 并通过行为贯穿于整个生命期。</code></p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063718991-29167fcf-916c-42d8-8bc5-88af4b8e4953.png#align=left&display=inline&height=282&originHeight=282&originWidth=185&size=0&status=done&width=185" class="lazyload"></p><p><a name="055f2aff"></a></p><h2 id="四大价值观"><a href="#四大价值观" class="headerlink" title="四大价值观"></a>四大价值观</h2><p>XP 的核心是其总结的</p><p><strong>沟通（Communication）</strong></p><p><strong>简单（Simplicity）</strong></p><p><strong>反馈（Feedback）</strong></p><p><strong>勇气（Courage）</strong></p><p>四大价值观，它们是XP的基础，也是XP的灵魂。</p><p>此外还扩展了第五个价值观：谦逊（Modesty）。 XP用“沟通、简单、反馈、勇气和谦逊”来减轻开发压力和包袱；XP 精神可以启发我们如何学习和对待快速变化、多样的开发技术。成功学习 XP 的关键，是用“沟通、简单、反馈、勇气和谦逊”的态度来对待 XP；轻松愉快地来感受 XP 的实践思想；自己认真实践后，通过对真实反馈的分析，来决定 XP 对自己的价值；有勇气接受它，或改进它。</p><p><code>PS 吐槽：对吧，我老实程序员。拿这几个价值观去恋爱去了，但是现在还是单身0.0</code></p><p><a name="a5346f0e"></a></p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>通常程序员给人留下的印象就是“内向、不善言谈”，然后项目中的许多问题就出在这些<strong>缺乏沟通</strong>的开发人员身上。<strong>经常由于某个程序员做出了一个设计决定，但是却不能及时地通知大家</strong>，结果使得大家在协作与配合上出现了很多的麻烦，而在传统的方法论中，并不在意这种口头沟通不畅的问题，而是希望借助于完善的流程和面面俱到的文档、报表、计划来替代，但是这同时又引入了效率不高的新问题。</p><p>XP 方法论认为，<strong>如果小组成员之间无法做到持续的、无间断的交流，那么协作就无从谈起</strong>，从这个角度能够发现，通过文档、报表等人工制品进行交流面临巨大的局限性。因此，XP 组合了诸如对编程这样的最佳实践，<strong>鼓励大家进行口头交流，通过交流解决问题，提高效率</strong>。</p><p><code>PS 吐槽： 闷头苦干？不见得你带来的效益更高</code></p><p><a name="d517acb6"></a></p><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p>XP 方法论提倡在工作中秉承“够用就好”的思路，也就是<strong>尽量地简单化，只要今天够用就行，不考虑明天会发现的新问题</strong>。这一点看上去十分容易，但是要真正做到保持简单的工作其实很难的。因为在传统的开发方法中，都要求大家对未来做一些预先规划，以便对今后可能发生的变化预留一些扩展的空间。</p><p>正如对传统开发方法的认识一样，许多开发人员也会质疑 XP，保持系统的扩展性很重要，如果都保持简单，那么如何使得系统能够有良好的扩展性呢？其实不然，保持简单的理由有两个：</p><ul><li><strong>开发小组在开发时所做的规划，并无法保证其符合客户需要的，因此做的大部分工作都将落空，使得开发过程中重复的、没有必要的工作增加，导致整体效率降低</strong>。</li><li>在 XP 中<strong>提倡时刻对代码进行重构，一直保持其良好的结构与可扩展性</strong>。也就是说，可扩展性和为明天设计并不是同一个概念，XP 是反对为明天考虑而工作，并不是说代码要失去扩展性</li></ul><p>而且简单和沟通之间还有一种相对微妙的相互支持关系。当一个团队之间，沟通的越多，那么就越容易明白哪些工作需要做，哪些工作不需要做。另一方面，<strong>系统越简单，需要沟通的内容也就越少，沟通也将更加全面</strong>。</p><p><code>PS 吐槽： 唉~~~~~</code></p><p><a name="1d50fa5b"></a></p><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>是什么原因使得我们的客户、管理层这么不理解开发团队？为什么客户、管理层总是喜欢给我们一个死亡之旅？究其症结，就是开发的过程中缺乏必要的反馈。在许许多多项目中，<strong>当开发团队经历过了需求分析阶段之后，在相当长的一段时间内，是没有任何反馈信息的</strong>。整个<strong>开发过程对于客户和管理层而言就像一个黑盒子</strong>，进度完全是不可见的。</p><p>而且在项目的过程中，这样的现象不仅出现在开发团队与客户、管理层之间，还包括在开发团队内部。这一切问题都需要我们更加注重反馈。，反馈对于任何软件项目的成功都是至关重要的，而在 XP 方法论中则更进一步，通过持续、明确的反馈来暴露软件状态的问题。具体而言就是：</p><ul><li>在开发团队内部，<strong>通过提前编写单元测试代码，时时反馈代码的问题与进展</strong>。</li><li>在开发过程中，还应该加强集成工作，做到持续集成，使得每一次增量都是一个可执行的工作版本，也就是逐渐是软件长大，整个过程中，应该通过向客户和管理层演示这些可运行的版本，以便及早地反馈，及早地发现问题。</li></ul><p>同时，我们也会发现反馈与沟通也有着良好的配合，及时和良好的反馈有助于沟通。而简单的系统更有利于测试和反馈。</p><p><code>PS 吐槽：不得不说啊 测试也是很重要的一环</code></p><p><a name="781301cb"></a></p><h3 id="勇气"><a href="#勇气" class="headerlink" title="勇气"></a>勇气</h3><p>在应用 XP 方法论时，我们每时每刻都在应对变化：由于沟通良好，因此会有更多需求变更的机会；由于时刻保持系统的简单，因此新的变化会带来一些重新开发的需要；由于反馈及时，因此会有更多中间打断你的思路的新需求。</p><p>总之这一切，使得你立刻处于变化之中，因此这时就<strong>需要你有勇气来面对快速开发，面对可能的重新开发</strong>。也许你会觉得，为什么要让我们的开发变得如此零乱，但是其实这些变化若你不让它早暴露，那么它就会迟一些出现，并不会因此消亡，因此，XP 方法论让它们早出现、早解决，是实现“小步快走”开发节奏的好办法。</p><p>也就是 XP 方法论要求开发人员穿上强大、自动测试的盔甲，<strong>勇往直前，在重构、编码规范的支持下，有目的地快速开发</strong>。</p><p><strong>勇气可以来源于沟通</strong>，因为它使得高风险、高回报的试验成为可能；勇气可以来源于简单，因为面对简单的系统，更容易鼓起勇气；勇气可以来源于反馈，因为你可以及时获得每一步前进的状态（自动测试），会使得你更勇于重构代码。</p><p><code>PS 吐槽：拒绝做羞涩的程序员</code></p><p><a name="c9952e5f"></a></p><h3 id="四大价值观之外"><a href="#四大价值观之外" class="headerlink" title="四大价值观之外"></a>四大价值观之外</h3><p>在这四大价值观之下，隐藏着一个更深刻的东西，那就是尊重。因为这一切都建立在团队<strong>成员之间的相互关心、相互理解的基础之上</strong>。</p><p><a name="ebb94c7f"></a></p><h2 id="五个原则"><a href="#五个原则" class="headerlink" title="五个原则"></a>五个原则</h2><p><a name="79342d30"></a></p><h3 id="快速反馈"><a href="#快速反馈" class="headerlink" title="快速反馈"></a>快速反馈</h3><p>及时地、快速地获取反馈，并将所学到的知识尽快地投入到系统中去。也就是指开发人员应该通过较短的反馈循环迅速地了解现在的产品是否满足了客户的需求。这也是对反馈这一价值观的进一步补充。</p><p><a name="c5054ca1"></a></p><h3 id="简单性假设"><a href="#简单性假设" class="headerlink" title="简单性假设"></a>简单性假设</h3><p>类似地，简单性假设原则是对简单这一价值观的进一步补充。这一原则要求开发人员将每个问题都看得十分容易解决，也就是说只为本次迭代考虑，不去想未来可能需要什么，相信具有将来必要时增加系统复杂性的能力，也就是号召大家出色地完成今天的任务。</p><p><a name="8db13d5a"></a></p><h3 id="逐步修改"><a href="#逐步修改" class="headerlink" title="逐步修改"></a>逐步修改</h3><p>就像开车打方向盘一样，不要一次做出很大的改变，那样将会使得可控性变差，更适合的方法是进行微调。而在软件开发中，这样的道理同样适用，任何问题都应该通过一系列能够带来差异的微小改动来解决。</p><p><a name="f7caca65"></a></p><h3 id="提倡更改"><a href="#提倡更改" class="headerlink" title="提倡更改"></a>提倡更改</h3><p>在软件开发过程中，最好的办法是在解决最重要问题时，保留最多选项的那个。也就是说，尽量为下一次修改做好准备。</p><p><a name="c47c41cd"></a></p><h3 id="优质工作"><a href="#优质工作" class="headerlink" title="优质工作"></a>优质工作</h3><p>在实践中，<strong>经常看到许多开发人员喜欢将一些细小的问题留待后面解决</strong>。例如，界面的按钮有一些不平整，由于不影响使用就先不管；某一两个成员函数暂时没用就不先写等。这就是一种工作拖泥带水的现象，这样的坏习惯一旦养成，必然使得代码质量大打折扣。</p><p>而在 XP 方法论中，贯彻的是“小步快走”的开发原则，因此工作质量决不可打折扣，通常采用测试先行的编码方式来提供支持</p><p><code>PS 吐槽：细节！！！0.0</code></p><p><a name="3d09d655"></a></p><h2 id="十三个最佳实践"><a href="#十三个最佳实践" class="headerlink" title="十三个最佳实践"></a>十三个最佳实践</h2><p>在 XP 中，集成了 13 个最佳实践，有趣的是，它们没有一个是创新的概念，大多数概念和编程一样老。其主要创新点在于提供一种良好的思路，将这些最佳实践结合在一起，并且确保尽可能彻底地执行它们，使得它们能够在最大程度上相互支持，紧接下来，我们就对每一种最佳实践进行一番了解。</p><p><a name="89f33a4f"></a></p><h3 id="计划游戏"><a href="#计划游戏" class="headerlink" title="计划游戏"></a>计划游戏</h3><p>计划游戏的主要思想就是先快速地制定一份概要的计划，<strong>然后随着项目细节的不断清晰，再逐步完善这份计划</strong>。计划游戏产生的结果是一套用户故事及后续的一两次迭代的概要计划。</p><p>“客户负责业务决策，开发团队负责技术决策”是计划游戏获得成功的前提条件。也就是说，系统的范围、下一次迭代的发布时间、用户故事的优先级应该由客户决定；而每个用户故事所需的开发时间、不同技术的成本、如何组建团队、每个用户故事的风险，以及具体的开发顺序应该由开发团队决定。</p><p>好了，明白这些就可以进行计划游戏了。首先客户和开发人员坐在同一间屋子里，每个人都准备一支笔、一些用于记录用户故事的纸片，最好再准备一个白板，就可以开始了。</p><ul><li>客户编写故事：<strong>由客户谈论系统应该完成什么功能</strong>，然后用通俗的自然语言，使用自己的语汇，将其写在卡片上，这也就是用户故事。</li><li>开发人员进行估算：<strong>首先客户按优先级将用户故事分成必须要有、希望有、如果有更好三类</strong>，然后开发人员对每个用户故事进行估算，先从高优先级开始估算。如果在估算的时候，感到有一些故事太大，不容易进行估算，或者是估算的结果超过 2人/周，那么就应该对其进行分解，拆成 2 个或者多个小故事。</li><li>确定迭代的周期：接下来就是<strong>确定本次迭代的时间周期</strong>，这可以根据实际的情况进行确定，不过最佳的迭代周期是 2~3 周。有了迭代的时间之后，再结合参与的开发人数，算出可以完成的工作量总数。然后根据估算的结果，与客户协商，挑出时间上够、优先级合适的用户故事组合，形成计划。</li></ul><p><code>PS 吐槽：客户期望与 客户的期望--。--</code></p><p><a name="379eb4a3"></a></p><h3 id="小型发布"><a href="#小型发布" class="headerlink" title="小型发布"></a>小型发布</h3><p>XP 方法论秉承的是“持续集成，小步快走”的哲学，也就是说每一次发布的版本应该尽可能的小，当然前提条件是每个版本有足够的商业价值，值得发布。</p><p>由于小型发布可以使得集成更频繁，<strong>客户获得的中间结果也越频繁，反馈也就越频繁</strong>，客户就能够实时地了解项目的进展情况，从而提出更多的意见，以便在下一次迭代中计划进去。以实现更高的客户满意度。</p><p><code>PS 吐槽：走持续集成吧，不然产品真的拼不过向上的互联网公司</code></p><p><a name="f95b04b2"></a></p><h3 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h3><p>相对而言，隐喻这一个最佳实践是最令人费解的。什么是隐喻呢？根据词典中的解释是：“一种语言的表达手段，它用来暗示字面意义不相似的事物之间的相似之处”。那么这在软件开发中又有什么用呢？总结而言，常常用于四个方面。</p><ul><li><strong>寻求共识</strong>：也就是鼓励开发人员在寻求问题共识时，可以借用一些沟通双方都比较熟悉的事物来做类比，从而帮助大家更好地理解解决方案的关键结构，也就是更好地理解系统是什么、能做什么。</li><li><strong>发明共享词汇</strong>：通过隐喻，有助于提出一个用来表示对象、对象间的关系通用名称。例如，策略模式（用来表示可以实现多种不同策略的设计模式）、工厂模式（用来表示可以按需“生产”出所需类得设计模式）等。</li><li><strong>创新的武器</strong>：有的时候，可以借助其他东西来找到解决问题的新途径。例如：“我们可以将工作流看做一个生产线”。</li><li><strong>描述体系结构</strong>：体系结构是比较抽象的，引入隐喻能够大大减轻理解的复杂度。例如管道体系结构就是指两个构件之间通过一条传递消息的“管道”进行通信。</li></ul><p>当然，如果能够找到合适的隐喻是十分快乐的，但并不是每种情况都可以找到恰当的隐喻，你也<strong>没有必要强求</strong></p><p><a name="36ea26f4"></a></p><h3 id="简单设计"><a href="#简单设计" class="headerlink" title="简单设计"></a>简单设计</h3><p>强调简单设计的价值观，引出了简单性假设原则，落到实处就是“简单设计”实践。这个实践看上去似乎很容易理解，但却又经常被误解，许多批评者就指责 XP 忽略设计是不正确的。其实，XP 的简单设计实践并不是要忽略设计，而且认为设计不应该在编码之前一次性完成，因为那样只能建立在“情况不会发生变化”或者“我们可以预见所有的变化”之类的谎言的基础上的。</p><p>Kent Beck 概念中简单设计是这样的：</p><ul><li>能够通过所有的测试程序。</li><li>没有包括任何重复的代码。</li><li>清楚地表现了程序员赋予的所有意图。</li><li>包括尽可能少的类和方法</li><li>他认为要想保持设计简单的系统，需要具备简单思考的能力，拥有理解代码和修改的勇气，以及为了消除代码的“坏味道”而定期重构的习惯。</li><li>那么如何开始进行简单的设计呢？XP 实践者们也总结也一些具体的、可操作的思考方法。</li><li>首先写测试代码：具体将在后面详细描述。</li><li>保持每个类只负责一件事：SRP（单一职责原则）是面向对象设计的基础原则之一。</li><li>使用 Demeter（迪米特）法则：迪米特法则，也称为 LoD 法则、最少知识原则。也就是指一个对象应当对其他对象尽可能少地了解。用隐喻的方法来解释的话就是“只与你直接的朋友通信”、“不要和陌生人说话”。</li><li>使用 CRC 卡片进行探索。</li></ul><p><a name="91132b1b"></a></p><h3 id="测试先行／测试驱动开发"><a href="#测试先行／测试驱动开发" class="headerlink" title="测试先行／测试驱动开发"></a>测试先行／测试驱动开发</h3><p>当我第一次看到“测试先行”这个概念的时候，我的第一感觉就是不解，陷入了“程序都还没有写出来，测试什么呀？”的迷思。我开始天马行空地寻求相关的隐喻，终于找到了能够启发我的工匠，首先，我们来看看两个不同的工匠是如何工作的吧。</p><ul><li>工匠一：先拉上一根水平线，砌每一块砖时，都与这跟水平线进行比较，使得每一块砖都保持水平。</li><li>工匠二：先将一排砖都砌完，然后再拉上一根水平线，看看哪些砖有问题，对有问题的砖进行适当的调整。</li></ul><p>你会选择哪种工作方法呢？你一定会骂工匠二笨吧！这样多浪费时间呀！然而你自己想想，你平时在编写程序的时候又是怎么做的呢？我们就是按工匠二的方法在工作呀！甚至有时候比工匠二还笨，是整面墙都砌完了，直接进行“集成测试”，经常让整面的墙倒塌。看到这里，你还会觉得自己的方法高明吗？这个连工匠都明白的道理，自己却画地为牢呀。</p><p>不仅我们没有采用工匠一的工作方法，甚至有的时候程序员会以“开发工作太紧张”为理由，而忽略测试工作。但这样却导致了一个恶性循环，越是没有空编写测试程序，代码的效率与质量越差，花在找 Bug、解决 Bug 的时间也越来越多，实际产能大打降低。由于产能降低了，因此时间更紧张，压力更大。你想想，为什么不拉上一根水平线呢？难道，我们不能够将后面浪费的时间花在单元测试上，使得我们的程序一开始就更健壮，更加易于修改吗？不过，<strong>编写测试程序当然要比拉一条水平线难道多</strong>，所以我们需要引入“自动化测试工具”，免费的 xUnit 测试框架就是你最佳的选择。</p><p>为了鼓励程序员原意甚至喜欢在编写程序之前编写测试代码，XP 方法论还提供了许多有说服力的理由。</p><ul><li>如果你已经保持了简单的设计，那么编写测试代码根本不难。</li><li>如果你在结对编程，那么如果你想出一个好的测试代码，那么你的伙伴一定行。</li><li>当所有的测试都通过的时候，你再也不会担心所写的代码今后会“暗箭伤人”，那种感觉是相当棒的。</li><li>当你的客户看到所有的测试都通过的时候，会对程序充满前所未有的信心。</li><li>当你需要进行重构时，测试代码会给你带来更大的勇气，因为你要测试是否重构成功只需要一个按钮。</li></ul><p>测试先行是 XP 方法论中一个十分重要的最佳实践，并且其中所蕴含的知识与方法也十分丰富。</p><p><code>PS 吐槽：是啊测试也要强，你会发现一个好的互联网公司，不仅开发强，是什么都强！！要想改变产品的质量，人员的变革是必不可少的</code></p><p><a name="f1787db4"></a></p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>重构时一种对代码进行改进而不影响功能实现的技术，XP 需要开发人员在闻到代码的坏味道时，有重构代码的勇气。重构的目的是降低变化引发的风险，使得代码优化更加容易。通常重构发生在两种情况之下。</p><ul><li>实现某个特性之前：尝试改变现有的代码结构，以使得实现新的特性更加容易。</li><li>实现某个特性之后：检查刚刚写完的代码后，认真检查一下，看是否能够进行简化。</li></ul><p>在《重构》一书中，作者 Martin Fowler 提示我们：在考虑重构时，应该要养成编写并经常运行测试代码的习惯；要先编写代码，再进行重构；把每一次增加功能都当做一次重构的好时机；将每一个纠正错误当做一次重构的重要时机。同时，该书中也列出大量需要重构的情况和重构方法。</p><p>最后类似地，给还没有足够勇气进行重构的程序员打几剂强心针：</p><ul><li>XP 提倡集体代码所有制，因此你可以大胆地在任何需要修改的地方做改动。</li><li>由于在 XP 项目组中有完整的编码标准，因此在重构前无须重新定义格式。</li><li>在重构中遇到困难，和你结对编程的伙伴能够为你提供有效的帮助。</li><li>简单的设计，会给重构带来很大的帮助。</li><li>测试先行让你拥有了一个有效的检验器，随时运行一下就知道你重构的工作是否带来了影响。</li><li>由于 XP 在持续集成，因此你重构所带来的破坏很快就能够暴露，并且得以解决。</li></ul><p><strong>重构技术是对简单性设计的一个良好的补充</strong>，也是 XP 中重视“优质工作”的体现，这也是<strong>优秀的程序员必备的一项技能</strong>。</p><p><code>PS 吐槽：拿的工资多的</code></p><p><a name="bba011bf"></a></p><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>“什么！两个人坐在一起写程序？那岂不是对人力的巨大浪费吗？而且我在工作时可不喜欢有一个人坐在边上当检察官。”是的，正如这里列举出来的问题一样，结对编程技术还是被很多人质疑的。</p><p>不过，自从 20 世纪 60 年代，就有类似的实践在进行，长期以来的研究结果却给出了另外一番景象，那就是结对编程的效率反而比单独编程更高。<strong>一开始虽然会牺牲一些速度，但慢慢的，开发速度会逐渐加快，究其原因，主要是结对编程大打降低了沟通的成本，提供了工作的质量</strong>，具体表现在：</p><ul><li>所有的设计决策确保不是由一个人做出的。</li><li>系统的任何一个部分都肯定至少有 2 个人以上熟悉。</li><li>几乎不可能有 2 个人都忽略的测试项或者其他任务</li><li>结对组合的动态性，是一个企业知识管理的好途径。</li><li>代码总是能够保证被评审过。</li><li>而且 XP 方法论集成的其他最佳实践也能够使得结对编程更加容易进行：</li><li>编码标准可以消除一些无谓的分歧。</li><li>隐喻可以帮助结对伙伴更好地沟通。</li><li>简单设计可以使得结对伙伴更了解他们所从事的工作。</li></ul><p>结对编程技术被誉为 XP 保持工作质量、强调人文主义的一个典型的实践，应用得当还能够使得开发团队之前的协作更加流畅、知识交流与共享更加频繁，团队的稳定性也会更加稳固。</p><p><code>PS 吐槽：其实吧，在中国不太好有这样的环境，大多数老板是以先赚钱后产品为生，不是以产品为上后打销路的。。。</code></p><p><a name="0c9c1477"></a></p><h3 id="集体代码所有制"><a href="#集体代码所有制" class="headerlink" title="集体代码所有制"></a>集体代码所有制</h3><p>由于 XP 方法论鼓励团队进行结对编程，而且认为结对编程的组合应该动态地搭配，根据任务的不同、专业技能的不同进行最优组合。由于每个人都肯定会遇到不同的代码，<strong>所以代码的所有制就不再适合于私有，因为那样会给修改工作带来巨大的不便</strong>。</p><p>也就是说，团队中的每个成员都拥有对代码进行改进的权利，每个人都拥有全部代码，也都需要对全部代码负责。同时，XP 强调代码是谁破坏的（也就是修改后发生问题），就应该由谁来修复。</p><p>由于在 XP 中，有一些与之匹配的最佳实践，因此你并无须担心采用集体代码所有制会让你的代码变得越来越乱：</p><ul><li>由于在 XP 项目中，集成工作是一件经常性得工作，因此当有人修改代码而带来了集成的问题，会在很快的时间内被发现。</li><li>由于每一个类都会有一个测试代码，因此不论谁修改了代码，都需要运行这个测试代码，这样偶然性的破坏发生的概率将很小。</li><li>由于每一个代码的修改就是通过了结对的两个程序员共同思考，因此通常做出的修改都是对系统有益的。</li><li>由于大家都坚持了相同的编码标准，因此代码的可读性、可修改性都会比较好，而且还能够避免由于命名法、缩进等小问题引发经常性得代码修改。</li></ul><p>集成代码所有制是 XP 与其他敏捷方法的一个较大不同，也是从另一个侧面体现了 XP 中蕴含的很深厚的编码情节。</p><p><code>PS 吐槽：其实吧，在中国敢把代码给你，疯了吧？？？？</code></p><p><a name="ba50ec6f"></a></p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>在前面谈到小型发布、重构、结对编程、集体代码所有制等最佳实践的时候，我们多次看到“持续集成”的身影，可以说持续集成是对这些最佳实践的基本支撑条件。</p><p>可能大家会对持续集成与小型发布代表的意思混淆不清，其实小型发布是指在开发周期经常发布中间版本，而持续集成的含义则是要求 XP 团队每天尽可能多次地做代码集成，每次都在确保系统运行的单元测试通过之后进行。</p><p>这样，就可以及早地暴露、消除由于重构、集体代码所有制所引入的错误，从而减少解决问题的痛苦</p><p>要在开发过程中做到持续集成并不容易，首先需要养成这个习惯。而且集成工作往往是十分枯燥、烦琐的，因此适当地引入每日集成工具是十分必要的。XP 建议大家首先使用配置管理服务器将代码管理起来，然后使用 Ant 或 Nant 等 XP 工具，编写集成脚本，调用 xUint 等测试框架，这样就可以实现每当程序员将代码 Check in 到配置服务器上时，Ant 就会自动完成编译和集成，并调用测试代码完成相应的测试工作。</p><p><a name="e5594f39"></a></p><h3 id="每周工作-40-小时／可持续的速度"><a href="#每周工作-40-小时／可持续的速度" class="headerlink" title="每周工作 40 小时／可持续的速度"></a>每周工作 40 小时／可持续的速度</h3><p>这是最让开发人员开心的、管理者反对的一个最佳实践了，加班、再加班早已成为开发人员的家常便饭，也是管理者最常使用的一种策略，而 XP 方法论认为，加班最终会扼杀团队的积极性，最终导致项目失败，这也充分体现了 XP 方法关注人的因素比关注过程的因素更多一些。</p><p>Kent Beck 认为开发人员即使能够工作更长的时间，他们也不该这样做，因为这样做会使他们更容易厌倦编程工作，从而产生一些影响他们效能的其他问题。因此，每周工作 40 小时是一种顺势行为，是一种规律。其实对于开发人员和管理者来说，违反这种规律是不值得的。</p><ul><li>开发人员：如果不懂得休息，那么就无法将自己的节奏调整到最佳状态，那么就会带来很大的负面影响。而且在精神不集中的状态下，开发质量也得不到保证。</li><li>管理者：也许这可以称得上“第二种人月神话”，那就是你不得不通过延长每天的工作时间来获得更多的人月。这是因为，每个开发人员的工作精力是有限的，不可能无限增长，在精力不足的时候，不仅写出来的代码质量没有保障，而且还可能为项目带来退步的效果。因此采用加班的方式并不是一个理性的方式，是得不偿失的。</li></ul><p>不过有一点是需要解释的，“每周工作 40 小时”中的 40 不是一个绝对数，它所代表的意思是团队应该保证按照“正常的时间”进行工作。那么如何做到这一点呢？</p><ul><li>首先，定义符合你团队情况的“正常工作时间”。</li><li>其次，逐步将工作时间调整到“正常工作时间”。</li><li>再次，除非你的时间计划一团糟，否则不应该在时间妥协。</li><li>最后，鼓起勇气，制定一个合情合理的时间表。</li></ul><p>正如米卢说过的“享受足球”一样，同样地，每一个开发人员应该做到“享受编程”，那么“每周工作 40 小时”就是你的起点。</p><p>团队只有持久才有获胜的希望。他们以能够长期维持的速度努力工作，他们保存精力，他们把项目看作是马拉松长跑，而不是全速短跑。</p><p><code>PS 吐槽：这里的40小时 是打引号的哈哈哈</code></p><p><a name="6567f930"></a></p><h3 id="现场客户"><a href="#现场客户" class="headerlink" title="现场客户"></a>现场客户</h3><p>为了保证开发出来的结果与客户的预想接近，XP 方法论认为最重要的需要将客户请到开发现场。就像计划游戏中提到过的，在 XP 项目中，应该时刻保证客户负责业务决策，开发团队负责技术决策。因此，在项目中有客户在现场明确用户故事，并做出相应的业务决策，对于 XP 项目而言有着十分重要的意义。</p><p>也许有人会问，客户提交了用户故事之后不就完成工作了吗？其实很多尝试过用户故事的团队都会发现其太过简单，包含的信息量极少，XP方法论不会不了解，因此，不会把用户故事当做开发人员交付代码的唯一指示。用户故事只是一个起点，后面的细节还需要开发人员与客户之间建立起来的良好沟通来补充。</p><p>作为一名有经验的开发人员，绝对不会对现场客户的价值产生任何怀疑，但是都会觉得想要实现现场客户十分困难。要实现这一点，需要对客户进行沟通，让其明白，想对于开发团队，项目成功对于客户而言更为重要。而现场客户则是保障项目成功的一个重要措施，想想在你装修房子的时候，你是不是常常在充当现场客户的角色呢？其实这隐喻就是让客户理解现场客户重要性最好的突破口。</p><p>其实现场客户在具体实施时，也不是一定需要客户一直和开发团队在一起，而是在开发团队应该和客户能够随时沟通，可以是面谈，可以是在线聊天，可以是电话，当然面谈是必不可少的。其中的关键是当开发人员需要客户做出业务决策是，需要进一步了解业务细节时能够随时找到相应的客户。</p><p>不过，也有一些项目是可以不要现场客户参与的：</p><ul><li>当开发组织中已经有相关的领域专家时。</li><li>当做一些探索性工作，而且客户也不知道他想要什么时（例如新产品、新解决方案的研究与开发）。</li></ul><p>去尝试吧，现场客户不仅可以争取得到，而且还能使得团队焕然一新，与客户建立起良好的合作与信任。</p><p><a name="2bba9647"></a></p><h3 id="编码标准"><a href="#编码标准" class="headerlink" title="编码标准"></a>编码标准</h3><p>编码标准是一个“雅俗共享”的最佳实践，不管是代表重型方法论的 RUP，PSP，还是代表敏捷方法论的 XP，都认为开发团队应该拥有一个编码标准。XP 方法论认为拥有编码标准可以避免团队在一些与开发进度无关的细节问题上发生争论，而且会给重构、结对编程带来很大麻烦。试想如果有人将你上次写的代码的变量命名法做了修改，下次你需要再改这部分代码时，会是一种什么感觉呢？</p><p>不过，XP 方法论的编码标准的目的不是创建一个事无巨细的规则表，而是只要能够提供一个确保代码清晰，便于交流的指导方针。</p><p>如果你的团队已经拥有编码标准，就可以直接使用它，并在过程中进行完善。如果还没有，那么大家可以先进行编码，然后在过程中逐步总结出编码规则，边做边形成。当然除了这种文字规范以外，还可以采用一些如自动格式化代码工具之类的方法进行代码规范。，事实上，你只需要很好地贯彻执行其他的实践并且进行沟通，编码标准会很容易地浮现出来。</p><p><code>PS 吐槽：我看不懂你，你看不懂我</code></p><p><a name="f64ecfd7"></a></p><h3 id="配合是关键"><a href="#配合是关键" class="headerlink" title="配合是关键"></a>配合是关键</h3><p>有句经典名言“1+1 &gt; 2 ”最适合表达 XP 的观点，Kent Beck 认为 XP 方法论的最大价值在于在项目中融会贯通地运用12个最佳实践，而非单独地使用。你当然可以使用其中的一些实践，但这并不意味着你就运用了 XP 方法论。XP 方法论真正能够发挥其效能，就必须完整地运用12个实践。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063718858-b66e79ee-1f7c-4b8e-99c5-e14cee9d1edc.png#align=left&display=inline&height=540&originHeight=540&originWidth=720&size=0&status=done&width=720" class="lazyload"></p><p>其实吧，唉算了不总结了，好好工作吧，多学一点<del>~</del></p><p><a href="https://blog.csdn.net/fw0124/article/details/48713959" target="_blank" rel="noopener">本文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十八）轻松集成WebSocket</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E8%BD%BB%E6%9D%BE%E9%9B%86%E6%88%90WebSocket/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E8%BD%BB%E6%9D%BE%E9%9B%86%E6%88%90WebSocket/</url>
      
        <content type="html"><![CDATA[<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>springboot提供了相关整合starter</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--websocket--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="b6453aea"></a></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>我们就试着配置使用一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(value = <span class="string">"/tipschant"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebScoketController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSession</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"打开WebScoket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"发送的信息是:"</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"关闭了连接"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(<span class="string">"出错了：&#123;&#125;"</span>,e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**<a href="">@ServerEndpoint </a> ** 中的内容就是 <code>WebSocket</code> 协议的地址</p><ul><li><strong>HTTP 协议：<code>http://localhost:8080/path</code></strong></li><li><strong>WebSocket 协议：<code>ws://localhost:8080/path</code></strong></li></ul><p>*<em>@OnOpen、@OnMessage、@OnClose、<a href="">@OnError </a> *</em> 注解与 <code>WebSocket</code> 中监听事件是相对应的。</p><ul><li><strong>onopen</strong> 建立 WebSocket 连接时触发。</li><li><strong>message</strong> 客户端监听服务端事件，当服务端向客户端推送消息时会被监听到。</li><li><strong>error</strong> WebSocket 发生错误时触发。</li><li><strong>close</strong> 关闭 WebSocket 连接时触发。</li></ul><p>然后在配置一个Bean就行了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWebSocketConfig</span></span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="2f8216ed"></a></p><h2 id="扩展一些"><a href="#扩展一些" class="headerlink" title="扩展一些"></a>扩展一些</h2><p>与 AJAX 轮训的方式差不多，但长连接不像 AJAX 轮训一样，而是采用的阻塞模型（一直打电话，没收到就不挂电话）；客户端发起连接后，如果没消息，就一直不返回 Response 给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p><p>在没有 <code>WebSocket</code> 之前，大家常用的手段应该就是轮训了，比如每隔几秒发起一次请求，但这样带来的就是高性能开销，都知道一次 HTTP 响应是需要经过三次握手和四次挥手，远不如 TCP 长连接来的划算。</p><p>假设我们要做一个 后台管理系统登陆在线发信息的玩意怎么办呢？因为在之后的服务器消息类中要用到用户信息，所以要提前加入用户信息</p><p>可以这样玩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (websocket配置)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年9月15日 上午10:27:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWebSocketConfig</span> <span class="keyword">extends</span> <span class="title">ServerEndpointConfig</span>.<span class="title">Configurator</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改握手,就是在握手协议建立之前修改其中携带的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sec</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyHandshake</span><span class="params">(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比如说这里用的是shiro</span></span><br><span class="line">        sec.getUserProperties().put(<span class="string">"user"</span>, SecurityUtils.getSubject().getPrincipal().toString());</span><br><span class="line">        <span class="keyword">super</span>.modifyHandshake(sec, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在呢想用这个配置的话可以这样写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(value = <span class="string">"/tipschant"</span>, configurator = SpringWebSocketConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebScoketController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSession</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        String user = session.getUserProperties().get(<span class="string">"user"</span>).toString();</span><br><span class="line">        <span class="comment">//存入大map</span></span><br><span class="line">        LIVING_SESSIONS_CACHE.put(user, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        String user = session.getUserProperties().get(<span class="string">"user"</span>).toString();</span><br><span class="line">        LIVING_SESSIONS_CACHE.remove(user);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便把我的工具类也贴出来</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/6/26 0026</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟存储 websocket session 使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; LIVING_SESSIONS_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageAll</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        LIVING_SESSIONS_CACHE.forEach((sessionId, session) -&gt; sendMessage(session, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送给指定用户消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 用户 session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 发送内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> RemoteEndpoint.Basic basic = session.getBasicRemote();</span><br><span class="line">        <span class="keyword">if</span> (basic == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            basic.sendText(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢贴一下前台代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="literal">null</span>;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> curWwwPath=<span class="built_in">window</span>.document.location.href;</span><br><span class="line">        <span class="keyword">var</span> sos=curWwwPath.indexOf(<span class="string">"//"</span>);</span><br><span class="line">        <span class="comment">//获取主机地址，如： localhost:8080</span></span><br><span class="line">        <span class="keyword">var</span> localhostPaht=curWwwPath.substring(sos+<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//判断支持不支持webSocket</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">            ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://"</span>+localhostPaht+<span class="string">"tipschant"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">'Not support websocket'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"建立 websocket 连接..."</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//服务端发送的消息</span></span><br><span class="line">            alert(event.data);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"关闭 websocket 连接..."</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 关闭页面的时候管理websocket</span></span><br><span class="line">        <span class="built_in">window</span>.onbeforeunload  = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ws) &#123;</span><br><span class="line">                ws.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>顺便说一下怎么发消息写一个<code>get</code>请求即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/tips/&#123;username&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Message</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span> String username, String message) </span>&#123;</span><br><span class="line">    Session session = LIVING_SESSIONS_CACHE.get(username);</span><br><span class="line">    sendMessage(session, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="138a6766"></a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在服务器端消息处理类中如果直接注入会失败，需要通过ApplicationContext对象去获取你想用的类。需要在springboot的启动类中配置：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MisApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(MisApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ConfigurableApplicationContext configurableApplicationContext = springApplication.run(args);</span><br><span class="line">        UserMessageSocket.setApplicationContext(configurableApplicationContext);<span class="comment">//解决WebSocket不能注入的问题</span></span><br><span class="line">        logger.info(<span class="string">"MisApplication is success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就搞定了</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot logback日志存入mongodb</title>
      <link href="/2019/07/25/yuque/SpringBoot%20logback%E6%97%A5%E5%BF%97%E5%AD%98%E5%85%A5mongodb/"/>
      <url>/2019/07/25/yuque/SpringBoot%20logback%E6%97%A5%E5%BF%97%E5%AD%98%E5%85%A5mongodb/</url>
      
        <content type="html"><![CDATA[<p>tags: [Logback,Mongodb,SpringBoot]<br>categories:  Spring相关</p><hr><p>首先继承 <code>logback</code> 中的 <code>ch.qos.logback.core.UnsynchronizedAppenderBase</code> 类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBAppender</span> <span class="keyword">extends</span> <span class="title">UnsynchronizedAppenderBase</span>&lt;<span class="title">ILoggingEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(ILoggingEvent eventObject)</span> </span>&#123;</span><br><span class="line">        MongoTemplate mongoTemplate = ApplicationContextProvider.getBean(MongoTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (mongoTemplate != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> BasicDBObject doc = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">            doc.append(<span class="string">"level"</span>, eventObject.getLevel().toString());</span><br><span class="line">            doc.append(<span class="string">"logger"</span>, eventObject.getLoggerName());</span><br><span class="line">            doc.append(<span class="string">"thread"</span>, eventObject.getThreadName());</span><br><span class="line">            doc.append(<span class="string">"message"</span>, eventObject.getFormattedMessage());</span><br><span class="line">            mongoTemplate.insert(doc, <span class="string">"log"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里呢我使用了<code>spring-data-mongodb</code> 不喜欢的朋友可以自己使用 <code>mongo-java-driver</code>  这里的 <code>ApplicationContextProvider</code>   代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextProvider</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext ac)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context = ac;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(tClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(name, tClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>logback-spring.xml</code> 中加入如下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"PATTERN"</span> <span class="attr">value</span>=<span class="string">"%-1(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) |-%-5level [%thread] %c [%L] -| %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"MONGO"</span> <span class="attr">class</span>=<span class="string">"com.fulinlin.log.MongoDBAppender"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.fulinlin"</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MONGO"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以了 就是这么简单</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十七）优雅的参数校验</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%BC%98%E9%9B%85%E7%9A%84%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E4%BC%98%E9%9B%85%E7%9A%84%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p><a name="u4ORa"></a></p><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>在开发中经常需要写一些字段校验的代码，比如字段非空，字段长度限制，邮箱格式验证等等，写这些与业务逻辑关系不大的代码个人感觉有两个麻烦：</p><ul><li>验证代码繁琐，重复劳动</li><li>方法内代码显得冗长</li><li>每次要看哪些参数验证是否完整，需要去翻阅验证逻辑代码</li></ul><p>你看这样？我感觉不行 ~有啥好办法不</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name 不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name.length() &lt; <span class="number">2</span> || name.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"name 长度必须在 2 - 10 之间"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="6c6588e1"></a></p><h2 id="使用hibernate-validator"><a href="#使用hibernate-validator" class="headerlink" title="使用hibernate-validator"></a>使用hibernate-validator</h2><p><code>spring-boot-starter-web</code>包里面有<code>hibernate-validator</code>包，不需要引用hibernate validator依赖。在 <code>pom.xml</code> 中添加上 <code>spring-boot-starter-web</code> 的依赖即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建如下实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"name 不允许为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">2</span>, max = <span class="number">10</span>, message = <span class="string">"name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="f7bf97cf"></a></p><h3 id="实体校验"><a href="#实体校验" class="headerlink" title="实体校验"></a>实体校验</h3><p>然后呢在 controller 中这样写即可验证</p><p>验证加<code>@RequestBody</code> 的参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@Validated @RequestBody  Book book)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候呢会出现<code>MethodArgumentNotValidException</code>异常可以在<code>ControllerAdvice</code> 做全局异常处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line"><span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">ModelMap</span>&gt; <span class="title">ex</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    log.error(<span class="string">"请求参数不合法。"</span>, e);</span><br><span class="line">    ModelMap modelMap = <span class="keyword">new</span> ModelMap();</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line">        modelMap.put(<span class="string">"message"</span>, getErrors(((MethodArgumentNotValidException) e).getBindingResult()));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(modelMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getErrors</span><span class="params">(BindingResult result)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;FieldError&gt; list = result.getFieldErrors();</span><br><span class="line">    <span class="keyword">for</span> (FieldError error : list) &#123;</span><br><span class="line">        map.put(error.getField(), error.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@Validated Book book)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则会出<code>BindException</code> 异常，则又可以在<code>ControllerAdvice</code>  中加入判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line"><span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">ModelMap</span>&gt; <span class="title">ex</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    log.error(<span class="string">"请求参数不合法。"</span>, e);</span><br><span class="line">    ModelMap modelMap = <span class="keyword">new</span> ModelMap();</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line">        modelMap.put(<span class="string">"message"</span>, getErrors(((BindException) e).getBindingResult()));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line">        modelMap.put(<span class="string">"message"</span>, getErrors(((MethodArgumentNotValidException) e).getBindingResult()));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(modelMap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getErrors</span><span class="params">(BindingResult result)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      List&lt;FieldError&gt; list = result.getFieldErrors();</span><br><span class="line">      <span class="keyword">for</span> (FieldError error : list) &#123;</span><br><span class="line">          map.put(error.getField(), error.getDefaultMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e67af0ac"></a></p><h3 id="验证参数"><a href="#验证参数" class="headerlink" title="验证参数"></a>验证参数</h3><p>如果是get请求参数呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@Validated @NotBlank(message = <span class="string">"name 不允许为空"</span>)</span> String name) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"111"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现这样根本不好使，其实呢这种需要在类上加入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@NotBlank(message = <span class="string">"name 不允许为空"</span>)</span> String name) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"111"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才可以生效，此时呢返回<code>ConstraintViolationException</code> 异常可以在全局异常中这样处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line"><span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">ModelMap</span>&gt; <span class="title">ex</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    log.error(<span class="string">"请求参数不合法。"</span>, e);</span><br><span class="line">    ModelMap modelMap = <span class="keyword">new</span> ModelMap();</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HttpMediaTypeException) &#123;</span><br><span class="line">        modelMap.put(<span class="string">"message"</span>, <span class="string">"请求体不对"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConstraintViolationException) &#123;</span><br><span class="line">        ConstraintViolationException exs = (ConstraintViolationException) e;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = exs.getConstraintViolations();</span><br><span class="line">        modelMap.put(<span class="string">"message"</span>, getErrors(violations));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(modelMap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getErrors</span><span class="params">(Set&lt;ConstraintViolation&lt;?&gt;&gt; violations)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ConstraintViolation&lt;?&gt; item : violations) &#123;</span><br><span class="line">        map.put(item.getPropertyPath().toString(), item.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="3c997295"></a></p><h3 id="Model校验"><a href="#Model校验" class="headerlink" title="Model校验"></a>Model校验</h3><p>如过不是想验证传参呢？就是想验证一个实体怎么玩呢？</p><p>这样就可以解决了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>).setName(<span class="string">""</span>);</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Book&gt;&gt; violationSet = validator.validate(book);</span><br><span class="line">        <span class="keyword">return</span> getErrors(violationSet);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Map&lt;String, String&gt; <span class="title">getErrors</span><span class="params">(Set&lt;ConstraintViolation&lt;T&gt;&gt; violations)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;?&gt; item : violations) &#123;</span><br><span class="line">            map.put(item.getPropertyPath().toString(), item.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="4f1559ad"></a></p><h3 id="对象级联校验"><a href="#对象级联校验" class="headerlink" title="对象级联校验"></a>对象级联校验</h3><p>在比如book那个实体中加入了一个具有对象这时候改怎么办呢？</p><p>只需要在实体上加入<code>@Valid</code> 即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"name 不允许为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">2</span>, max = <span class="number">10</span>, message = <span class="string">"name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NotBlank</span>(message = <span class="string">"Author.name 不允许为空"</span>)</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="8b1544dc"></a></p><h3 id="hibernate-validator-的校验模式"><a href="#hibernate-validator-的校验模式" class="headerlink" title="hibernate-validator 的校验模式"></a>hibernate-validator 的校验模式</h3><p>这时候要说点东西了</p><p>上面例子中一次性返回了所有验证不通过的集合，通常按顺序验证到第一个字段不符合验证要求时，就可以直接拒绝请求了。Hibernate Validator有以下两种验证模式</p><ol><li>普通模式（默认是这个模式）</li></ol><p>普通模式(会校验完所有的属性，然后返回所有的验证失败信息)</p><ol start="2"><li>快速失败返回模式</li></ol><p>快速失败返回模式(只要有一个验证失败，则返回)</p><pre><code>`true` 快速失败返回模式    `false`普通模式</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator<span class="class">.<span class="keyword">class</span> )</span></span><br><span class="line"><span class="class">        .<span class="title">configure</span>()</span></span><br><span class="line"><span class="class">        .<span class="title">failFast</span>( <span class="title">true</span> )</span></span><br><span class="line"><span class="class">        .<span class="title">buildValidatorFactory</span>()</span>;</span><br><span class="line">Validator validator = validatorFactory.getValidator();</span><br></pre></td></tr></table></figure><p>或者这样配</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator<span class="class">.<span class="keyword">class</span> )</span></span><br><span class="line"><span class="class">        .<span class="title">configure</span>()</span></span><br><span class="line">        .addProperty( "hibernate.validator.fail_fast", "true" )</span><br><span class="line">        .buildValidatorFactory();</span><br><span class="line">Validator validator = validatorFactory.getValidator();</span><br></pre></td></tr></table></figure><p>这样配置就行了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodValidationPostProcessor <span class="title">methodValidationPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MethodValidationPostProcessor postProcessor = <span class="keyword">new</span> MethodValidationPostProcessor();</span><br><span class="line">    <span class="comment">/**设置validator模式为快速失败返回*/</span></span><br><span class="line">    postProcessor.setValidator(validator());</span><br><span class="line">    <span class="keyword">return</span> postProcessor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator<span class="class">.<span class="keyword">class</span> )</span></span><br><span class="line"><span class="class">    .<span class="title">configure</span>()</span></span><br><span class="line">    .addProperty( "hibernate.validator.fail_fast", "true" )</span><br><span class="line">    .buildValidatorFactory();</span><br><span class="line">    Validator validator = validatorFactory.getValidator();</span><br><span class="line">    <span class="keyword">return</span> validator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="f26ae4ed"></a></p><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><p><strong>分组顺序校验时，按指定的分组先后顺序进行验证，前面的验证不通过，后面的分组就不行验证。</strong></p><p>有这样一种场景，新增的时候，不需要验证<code>Id</code>（因为系统生成）；修改的时候需要验证<code>Id</code>，这时候可用用户到validator的分组验证功能。</p><p>设置validator为普通验证模式<code>（&quot;hibernate.validator.fail_fast&quot;, &quot;false&quot;）</code>，用到的验证GroupA、GroupB和实体：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GroupA、GroupB</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupA</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupB</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后改造一下<code>Book</code>实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Range</span>(min = <span class="number">1</span>, max = Integer.MAX_VALUE, message = <span class="string">"必须大于0"</span>, groups = &#123;GroupA<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Integer</span> <span class="title">id</span></span>;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"name 不允许为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">20</span>, message = <span class="string">"name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间"</span>, groups = &#123;GroupB<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Range</span>(min = <span class="number">0</span>, max = <span class="number">100</span>, message = <span class="string">"年龄必须在[0,100]"</span>, groups = &#123;Default<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Integer</span> <span class="title">age</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GroupA验证字段id；</li><li>GroupB验证字段name；</li><li>Default验证字段age(Default是Validator自带的默认分组)</li></ul><p>这样去验证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Book book = <span class="keyword">new</span> Book();</span><br><span class="line">    <span class="comment">/**GroupA验证不通过*/</span></span><br><span class="line">    book.setId(-<span class="number">10086</span>);</span><br><span class="line">    <span class="comment">/**GroupA验证通过*/</span></span><br><span class="line">    <span class="comment">//book.setId(10010);</span></span><br><span class="line">    book.setName(<span class="string">"a"</span>);</span><br><span class="line">    book.setAge(<span class="number">110</span>);</span><br><span class="line">    Set&lt;ConstraintViolation&lt;Book&gt;&gt; validate = validator.validate(book, GroupA<span class="class">.<span class="keyword">class</span>, <span class="title">GroupB</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (ConstraintViolation&lt;Book&gt; item : validate) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者这样</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(@Validated(&#123;GroupA.class, GroupB.class&#125;)</span> Book book, BindingResult result) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : allErrors) &#123;</span><br><span class="line">            System.out.println(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这样验证务必要给 组一个序列，不然不行的还是无法实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GroupSequence</span>(&#123;GroupA<span class="class">.<span class="keyword">class</span>, <span class="title">GroupB</span>.<span class="title">class</span>, <span class="title">Default</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">GroupOrder</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就好了然后这样玩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;ConstraintViolation&lt;Book&gt;&gt; validate = validator.validate(book, GroupOrder<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Validated(&#123;GroupOrder.class&#125;)Book book, BindingResult result</span><br></pre></td></tr></table></figure><p><a name="e8b96cb0"></a></p><h2 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h2><p>如果不想全局拦截异常想看到直观的错误可以在方法参数中加入<code>BindingResult result</code></p><p>单一的可以这样玩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="params">(@Validated DemoModel demo, BindingResult result)</span></span></span><br></pre></td></tr></table></figure><p>验证多个的话可以这样玩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="params">(@Validated DemoModel demo, BindingResult result,@Validated DemoModel demo2, BindingResult result2)</span></span></span><br></pre></td></tr></table></figure><p><a name="3f045a21"></a></p><h2 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h2><p>一般情况，自定义验证可以解决很多问题。但也有无法满足情况的时候，此时，我们可以实现validator的接口，自定义自己需要的验证器。</p><p>首先呢定义个注解，在注解上加入注解<code>@Constraint</code> 绑定验证类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;FIELD, PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = DateTimeValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">DateTime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "格式错误"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> "yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看验证类 实现<code>ConstraintValidator&lt;A extends Annotation, T&gt;</code>即可  <code>A</code>是注解 <code>T</code>是标注的参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">DateTime</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DateTime dateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(DateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateTime = dateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果 value 为空则不进行格式验证，为空验证可以使用 @NotBlank @NotNull @NotEmpty 等注解来进行控制，职责分离</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String format = dateTime.format();</span><br><span class="line">        <span class="keyword">if</span> (value.length() != format.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            simpleDateFormat.parse(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这样用就行啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@DateTime(message = <span class="string">"您输入的格式错误，正确的格式为：&#123;format&#125;"</span>, format = <span class="string">"yyyy-MM-dd HH:mm"</span>)</span> String date) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="4d1a1c68"></a></p><h2 id="JSR-303-注释介绍"><a href="#JSR-303-注释介绍" class="headerlink" title="JSR-303 注释介绍"></a>JSR-303 注释介绍</h2><p><code>hibernate-validator</code>均实现了 <code>JSR-303</code> 这里只列举了 <code>javax.validation</code> 包下的注解，同理在 <code>spring-boot-starter-web</code> 包中也存在 <code>hibernate-validator</code> 验证包，里面包含了一些 <code>javax.validation</code> 没有的注解，有兴趣的可以看看</p><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>@NotNull</code></td><td align="left"><strong>限制必须不为null</strong></td></tr><tr><td align="left"><code>@NotEmpty</code></td><td align="left"><strong>验证注解的元素值不为 null 且不为空（字符串长度不为0、集合大小不为0）</strong></td></tr><tr><td align="left"><code>@NotBlank</code></td><td align="left"><strong>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</strong></td></tr><tr><td align="left"><code>@Pattern(value)</code></td><td align="left"><strong>限制必须符合指定的正则表达式</strong></td></tr><tr><td align="left"><code>@Size(max,min)</code></td><td align="left"><strong>限制字符长度必须在 min 到 max 之间（也可以用在集合上）</strong></td></tr><tr><td align="left"><code>@Email</code></td><td align="left"><strong>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</strong></td></tr><tr><td align="left"><code>@Max(value)</code></td><td align="left"><strong>限制必须为一个不大于指定值的数字</strong></td></tr><tr><td align="left"><code>@Min(value)</code></td><td align="left"><strong>限制必须为一个不小于指定值的数字</strong></td></tr><tr><td align="left"><code>@DecimalMax(value)</code></td><td align="left"><strong>限制必须为一个不大于指定值的数字</strong></td></tr><tr><td align="left"><code>@DecimalMin(value)</code></td><td align="left"><strong>限制必须为一个不小于指定值的数字</strong></td></tr><tr><td align="left"><code>@Null</code></td><td align="left"><strong>限制只能为null（很少用）</strong></td></tr><tr><td align="left"><code>@AssertFalse</code></td><td align="left"><strong>限制必须为false （很少用）</strong></td></tr><tr><td align="left"><code>@AssertTrue</code></td><td align="left"><strong>限制必须为true （很少用）</strong></td></tr><tr><td align="left"><code>@Past</code></td><td align="left"><strong>限制必须是一个过去的日期</strong></td></tr><tr><td align="left"><code>@Future</code></td><td align="left"><strong>限制必须是一个将来的日期</strong></td></tr><tr><td align="left"><code>@Digits(integer,fraction)</code></td><td align="left"><strong>限制必须为一个小数，且整数部分的位数不能超过 integer，小数部分的位数不能超过 fraction （很少用）</strong></td></tr></tbody></table><p>哦对，这些校验不仅能在<code>controller</code>层用 在任何地方都可以的</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈死海效应</title>
      <link href="/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%AD%BB%E6%B5%B7%E6%95%88%E5%BA%94/"/>
      <url>/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%AD%BB%E6%B5%B7%E6%95%88%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p><a name="9bV45"></a></p><h2 id="什么是死海效应？"><a href="#什么是死海效应？" class="headerlink" title="什么是死海效应？"></a>什么是死海效应？</h2><p>Bruce F. Webster 在 2008 年写了一篇文章「The Wetware Crisis: the Dead Sea effect」， 翻译过来是死海效应。</p><p>Bruce 在文章中阐述了一个概念：一个团队可能陷入一种反模式，称之为死海效应。 死海是位于约旦的一个高盐分水域，由于水分被蒸发，这里的盐度是正常海水的 8 倍。 将水分比喻为高质量人才，盐分比喻为低质量人才。 水分容易被蒸发，而补入不足，盐分不容易蒸发日积月累，进而导致整个团队的人才质量劣化。</p><p>借用经济学里面的一个概念：劣币驱逐良币。</p><p><a name="50765eda"></a></p><h2 id="为什么会有死海效应呢？"><a href="#为什么会有死海效应呢？" class="headerlink" title="为什么会有死海效应呢？"></a>为什么会有死海效应呢？</h2><p>在一个正常运作的团队中，整个人才系统应该是循环的。有新的成员加入，也有老的成员离开。 只要市场上人才质量不发生剧烈的波动，团队内人才质量应该是平稳的。 但死海效应中不这样，好的人才不断流失，低质量人才被留存，这个团队素质越来越差。 形成这种状况的原因其实挺简单：环境恶化，高质量人才有更强的实力，可以自由地选择满足自己期望的团队。 而低质量人才没有更多选择空间，从而只能在当前的环境下继续生存。</p><p>死海效应导致的恶劣后果是显而易见的。 现代组织中人是生产第一要素。 如果人才质量持续降低，那么整个团队会缺乏战斗力，商业上得不到发展，这个团队将面临瓦解的风险。</p><p>什么样的团队容易滋生死海效应，<strong>我总结了几个点：无压、不透明、人情。</strong></p><p><a name="d893448d"></a></p><h3 id="无压力"><a href="#无压力" class="headerlink" title="无压力"></a><strong>无压力</strong></h3><p>当一个公司的业务发展进入瓶颈期，战略上面没有远见， 抑或是已经占据了市场中的有利地形，温饱不愁，那么就容易失去压力。 我对商业的理解有限，就拿技术团队来做比喻： 当一个技术团队给业务提供的支撑足够并且业务发展平稳， 那么技术团队有两个选择：维持平稳的状态；给自己提出更高的技术要求。 前者是舒适的，后者长期带来回报，但是短期辛苦并且有风险。 前者的团队空间有限，挑战难度低，更容易产生死海效应。</p><p><code>PS 吐槽：真是看不惯那些接收不了新玩意的老派！！</code></p><p><a name="c3b8f768"></a></p><h3 id="不透明"><a href="#不透明" class="headerlink" title="不透明"></a>不透明</h3><p>这种不透明体现在多个方面： 战略上是否向全体员工透明？业绩结果是否向全体员工透明？团队和个人绩效结果是否透明？评价标准是否透明？ 不透明会会导致团队的不公平。 一线员工看不到未来发展的方向和业绩，无法感受到个体被组织所尊重。 也许有些人尸位素餐，却能获得高收益，自然无法让团队的高贡献者认可。 Google 有一系列方法，包括 OKR 透明化，TGIF（Thank God It’s Friday） 全体沟通会，有效的解决这个问题。</p><p><a name="6b15c406"></a></p><h3 id="重人情"><a href="#重人情" class="headerlink" title="重人情"></a>重人情</h3><p>大家在一起工作，时间一长或多或少会产生羁绊。 中国社会又特别讲究人情来往，今天你帮我一些忙，那我就得记在心上，未来有机会要还给你。 这当然是一种人和人之间沟通的一种黏合剂和缓冲，但是也是职业化程度低的表现。 企业的存在是有使命和目的，营造一种大家庭的氛围一定不在其使命中。 小团队早期可以家族化管理，但是一旦走上正轨，一定要规范化管理。 人情其实是对标准和制度的破坏，而企业的正常运转，恰恰最是需要对标准和制度的遵守。 讲究人情，也会对职责和评价产生破坏，这又会导致不公平，死海效应也会应运而生。 这点我是非常佩服阿里，它有一个出名的职务轮换制度，管理层不能长期担任同一职位，需要定期轮换。 这样就能保证关键人才在企业内部是流动的，不会锁定在特定岗位。 也就避免了长期锁定带来的人情账户、内部小团体。</p><p><code>PS 吐槽：能坚持到最后的人不一定都是精品，还有可能是糟粕！</code></p><p><a name="7abf79d5"></a></p><h2 id="怎么摆脱死海效应呢？"><a href="#怎么摆脱死海效应呢？" class="headerlink" title="怎么摆脱死海效应呢？"></a>怎么摆脱死海效应呢？</h2><p><strong>有这么些方法：追求卓越、制度和透明、人才标准和流动。</strong></p><p>我以前和一个候选人沟通，他的一句话让我印象深刻：公司业务高速发展时，就不会存在复杂的管理问题。 这是一种理想情况。 但业务发展需要时间，进入瓶颈期之后，想继续保持团队活力，改怎么办？追求卓越。 效率能否再提高一些？自动化的程度是否能够再提高？能不能向一流团队 FLAG 看齐？ 这样就开阔了团队和个人的发展空间。 一旦有了追求卓越的信念，即便业务发展稍缓，仍然能够抵御死海效应。</p><p>高质量人才离开往往是觉得受了委屈才离开，那么公平的制度和透明的实施就尤其重要。 保证不由某个个体的意志力转移，而是像机器一样可以运转，像数学一样可以被计算。 这个需要自上而下的贯彻，否则实施起来非常困难。 举一个例子，如果团队大部分成员会在月末调整绩效目标而获得更高的评分。 那么坚持不调整的人可能获得较低评分，这不是个体能够影响的局面。 没有自上而下的推动，制度和透明就只能是一阵清风。</p><p>最后是人才标准和流动。人才流动并非是一个坏事，如同人的生理循环，吸收有益物质，排除有害物质。 这个循环必须正向运行，设定合理的准入标准和淘汰标准，高质量输入，低质量淘汰。 末尾淘汰制听起来残酷，其实在广泛实施，比如阿里的 3.25 的考核，腾讯的年末淘汰一人。 对于大部分非家族公司来说，如果真的出现害群之马，难道不淘汰么？ 淘汰应该制度化，让所有人看到并且重视，而不是担心会造成集体不安就隐性操作， 这反而更容易产生猜测和担忧。</p><p><a name="9415a826"></a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一旦进入死海效应的恶性循环，我认为乱世用重典为佳，小打小闹不能形成大影响。 关键时刻就必须搞运动，做动员，大张旗鼓。 当然这需要高层有足够的决心和意志力。如果管理层计划偏安一隅，没有宏伟愿景， 那么十几年的企业寿命也能为股东赚回足够的钱，死海效应是存在即合理的现象。 <strong>低质量的人才管理成本也低，人才死海效应和业务劣化恶性循环， 最后进入企业衰老期，天道轮回，有生必有死，看开就好</strong>。</p><p><a href="https://mp.weixin.qq.com/s/XFnEguHzFOjBjigetA3iGA" target="_blank" rel="noopener">本文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈技术债</title>
      <link href="/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E5%80%BA/"/>
      <url>/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E5%80%BA/</url>
      
        <content type="html"><![CDATA[<p><a name="59xki"></a></p><h2 id="技术债是什么？"><a href="#技术债是什么？" class="headerlink" title="技术债是什么？"></a><strong>技术债是什么？</strong></h2><p>出自于沃德·坎宁安之口，他首次将技术的复杂比作为负债，简称技术负债（技术债）。软件开发本来就是一项很复杂的工程，所以很多人都软件开发当作软件工程看待。开发出来的软件是用来服务于各个领域（金融，医疗，购物等），我们程序员不一定能完全了解某个领域（<strong>术业有专攻</strong>），所以就没法很好的把控这个领域的软件架构，必然就会产生技术负债。技术债是无法避免的，只是产生技术债或多或少的问题。</p><p>为什么会有技术债呢？</p><p>我认为技术债大概分为三大类。</p><p><a name="4841f34a"></a></p><h2 id="文档负债（包括需求分析负债，开发文档负债，测试文档负债）"><a href="#文档负债（包括需求分析负债，开发文档负债，测试文档负债）" class="headerlink" title="文档负债（包括需求分析负债，开发文档负债，测试文档负债）"></a><strong>文档负债（包括需求分析负债，开发文档负债，测试文档负债）</strong></h2><p><a name="d98920bb"></a></p><h3 id="需求分析负债"><a href="#需求分析负债" class="headerlink" title="需求分析负债"></a><strong>需求分析负债</strong></h3><p>不懂需求分析的软件开发工程师不是好的软件开发工程师，遇到问题一定要与上级领导或者客户及时反馈，及时沟通，某些需求不能做就是不能做，<strong>要持有一种质疑的心</strong>。找正确的途径去反馈问题而不是背地里去发恼骚，要懂得有效的沟通方式，让客户或者是领导理解技术实现痛点。从项目开始就必须要做好调研，不然软件开发工程师没有理解好项目需求而盲目开发项目，必然导致领域业务与开发业务不匹配， 从而付出更多的时间与精力去开发项目。不仅仅如此，调研期间必须要跟开发的经理做好沟通。</p><p><a name="5aaa1d7e"></a></p><h3 id="开发文档负债"><a href="#开发文档负债" class="headerlink" title="开发文档负债"></a><strong>开发文档负债</strong></h3><p>软件开发文档不齐全，或者是软件文档功能与项目代码功能不一致。</p><p>有两种以下情况：</p><ul><li>项目没有制定开发文档。没有制定代码规范文档，接口文档等相关技术文档。光看代码不看文档就够辛苦了，即使语义化变量名与函数名，也难易快速理解。（少见）</li><li>项目没有更新开发文档。项目开发初期还有文档，后来文档没有对应没有更新，因为有些需求几乎都是临时新增的，导致后期项目迭代的时候就造成大量的冗余代码。（常见）</li></ul><p><strong>软件开发文档是项目最系统最全面的反映，看文档比看代码更容易理解项目的功能模块</strong>。</p><p><a name="e04d6111"></a></p><h3 id="测试文档负债"><a href="#测试文档负债" class="headerlink" title="测试文档负债"></a><strong>测试文档负债</strong></h3><p>体现于软件测试覆盖率低，测试用例不足。</p><p>在大多数的企业中，为了控制人力成本，软件测试都是由软件开发工程师去完成，而不是由专业的软件测试人员去负责，这样做往往会忽略了一些软件漏洞（当局者迷，旁观者清），也给技术债埋下了更多的种子。一个企业如果不重视软件测试的话，做出来的软件项目绝对是一个不合格的产品。</p><p><a name="4b34299f"></a></p><h2 id="代码负债（包括架构负债，编码负债，业务负债）"><a href="#代码负债（包括架构负债，编码负债，业务负债）" class="headerlink" title="代码负债（包括架构负债，编码负债，业务负债）"></a>代码负债（包括架构负债，编码负债，业务负债）</h2><p><a name="cef02ea1"></a></p><h3 id="架构负债"><a href="#架构负债" class="headerlink" title="架构负债"></a><strong>架构负债</strong></h3><p><strong>前期项目架构评估不够充分，导致项目组织不合理，软件耦合度高，后期项目难以拓展与维护</strong>。</p><p>正所谓牵一发而动全身，业务需求不断新增，软件项目很难迭代，稍有不慎就容易出现漏洞，后来发现代码没法改，不得不推倒重来，重新开发项目。</p><p><a name="f5469fe6"></a></p><h3 id="编码负债"><a href="#编码负债" class="headerlink" title="编码负债"></a><strong>编码负债</strong></h3><p><strong>编码质量不高</strong>，导致开发团队难以协同工作。当遇到软件产品迭代就会出现一堆技术债，软件产品更是漏洞百出，难以维护。</p><p>体现在以下几个方面</p><ul><li>代码命名规范：代码命名没有规范，存在大量杂乱不堪的命名代码。</li><li>代码复杂度：条件语句过多，流程控制过于复杂，代码嵌套过多。（常见回调地狱）</li><li>代码耦合度：代码中参数，类，接口高耦合，需要大量修改代码。</li><li>代码行数：存在大量未使用的代码。</li></ul><p>良好的，统一的编码规范更好维护以及迭代项目，有利于代码的重构，一定程度上减少技术债。</p><p><a name="ebbb0efa"></a></p><h2 id="管理负债（包括工期负债，人员负债，协同负债，成本负债）"><a href="#管理负债（包括工期负债，人员负债，协同负债，成本负债）" class="headerlink" title="管理负债（包括工期负债，人员负债，协同负债，成本负债）"></a><strong>管理负债（包括工期负债，人员负债，协同负债，成本负债）</strong></h2><p><a name="27f6db0c"></a></p><h3 id="工期负债"><a href="#工期负债" class="headerlink" title="工期负债"></a><strong>工期负债</strong></h3><p><strong>项目期限也是技术债产生原因之一</strong>。现在的项目正如马士兵老师说的那样，现在的项目赶紧做，做完之后赶紧拿钱，说白了就是赚快钱。企业为了抢占市场占有率，必然想短期出产品，因此软件开发工程师必然只能沿用一些老解决方案，加快想项目开发进度。开发出来的产品质量和以前没有太大区别，软件生命周期短。</p><p><code>PS 吐槽：想做高大上不花成本和时间怎么可能呢？</code></p><p><a name="96fee94f"></a></p><h3 id="人员负债"><a href="#人员负债" class="headerlink" title="人员负债"></a><strong>人员负债</strong></h3><p>一个人员流动性大的开发团队导致项目开发难以开展或者是开发进度缓慢，再加上团队中的开发人员能力不尽相同，各有各的风格，即使规范了代码风格，但每个人的代码实现思路也不尽相同。技术债也随着人员流动而加大。</p><p><a name="8d6cd195"></a></p><h3 id="协同负债"><a href="#协同负债" class="headerlink" title="协同负债"></a><strong>协同负债</strong></h3><p>让开发团队的人知道“我是谁，我在哪，我在干什么”。</p><p>有两种以下值得注意：</p><ul><li>管理者必定充分认识自己的定位，该做什么就做什么，不要过分干涉组员的工作，但要监督组员工作质量。</li><li>管理者必定认真分配组员的开发任务，分工明确，各尽其职，避免重复开发模块。</li></ul><p>良好的协同可以避免一些重复工作，减少软件冗余代码，促使项目开发效率会事半功倍，保证如期进行，从而减少技术债增加。</p><p><a name="8e5dee3b"></a></p><h3 id="成本负债"><a href="#成本负债" class="headerlink" title="成本负债"></a><strong>成本负债</strong></h3><p>项目的软硬件环境配置决定项目的成本负债。控制好成本负债才可以获得更多的收益。<strong>聪明的管理者绝不会贪小便宜，只顾眼前的成本利益而造成更大的陈本负债，该花钱的地方就有花，不要节省。</strong></p><p><code>PS 吐槽：做产品的为什么不思考思考呢？</code></p><p><a name="74ffd8bb"></a></p><h2 id="技术债需要还吗？"><a href="#技术债需要还吗？" class="headerlink" title="技术债需要还吗？"></a><strong>技术债需要还吗？</strong></h2><p>不还？还出来混？！！</p><p>还债的好处，避免软件漏洞，提高软件健壮性，能保证一段时间不用加班（996）。</p><p>还债的缺点，无法支撑大规模的新项目需求，在原有基础上重构业务逻辑代码有一定的技术风险。</p><p><strong>不还债的好处，等待项目推倒重来，重新架构软件模型，提高软件扩展性与稳定性。</strong></p><p><strong>不还债的缺点，新项目必然花费的人力成本与时间更多，加班难以避免。</strong></p><p><code>PS 吐槽：越来越臃肿造成不必要的996？？？</code></p><p>还不还债，自己看着办吧。</p><p>总之，一个好产品好公司的诞生，是必须要跟上时代的！才能赢得同行的尊敬。</p><p><a href="http://www.cnblogs.com/Sroot/p/9110835.html" target="_blank" rel="noopener">本文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 常用用法</title>
      <link href="/2019/07/25/yuque/nginx%20%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/"/>
      <url>/2019/07/25/yuque/nginx%20%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>tags: [nginx]<br>categories:  web服务器</p><hr><p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。我就介绍几个我在工作中用到的nginx的反向代理功能。</p><p><a name="93d35dd2"></a></p><h2 id="代理本地目录"><a href="#代理本地目录" class="headerlink" title="代理本地目录"></a>代理本地目录</h2><p>这个需求是比如vue项目或者h5 要发布到服务器上，这时候就用到了nginx ，因为nginx处理静态资源非常的nice，我们就会代理一个目录。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>     <span class="number">8002</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>   /usr/local/path;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是做图片代理访问也是可以的</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8088</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /home/image;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="138a6766"></a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>有些同学在使用linux服务器代理图片访问的时候可能出现了403这样的错误，解决方式有两种</p><ul><li>在nginx.conf 中加入 <code>user root</code> 即可</li><li>授予访问目录755 权限</li></ul><p><a name="5b97e540"></a></p><h2 id="代理域名"><a href="#代理域名" class="headerlink" title="代理域名"></a>代理域名</h2><p>有这样一个需求，<code>a.fulinlin.com</code> 要访问服务器里的项目A ，而<code>b.fulinlin.com</code> 要访问服务器里的项目B，这时候该怎么办呢，服务器只有一个80端口，此时呢可以用nginx解决</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  a.fulinlin.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  b.fulinlin.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置就能做到 访问 不用的域名或者二级域名跳转到不同的项目里。</p><p><a name="0efba7f9"></a></p><h2 id="代理路径"><a href="#代理路径" class="headerlink" title="代理路径"></a>代理路径</h2><p>有这样一个需求，假设有一个域名<code>www.fulinlin.com</code> 想实现<code>www.fulinlin.com/wiki</code>  和 <code>www.fulinlin.com/bolg</code> 这样区分访问两个项目，怎么办到呢? 其实呢不难配置</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.fulinlin.com;</span><br><span class="line">    <span class="attribute">location</span> /wiki &#123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /blog &#123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="63a06c1c"></a></p><h2 id="ssl证书代理"><a href="#ssl证书代理" class="headerlink" title="ssl证书代理"></a>ssl证书代理</h2><p>此时呢，项目经理想做道 <code>https</code> 套ssl证书访问网站，这时候怎么办呢？没关系nginx还能解决</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span>      cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  cert.key;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填写证书相应的 pem和key即可 。</p><p>但是呢领导还有需求 怎么办到访问<code>http</code> 的时候跳转到<code>https</code>呢 ? 那么nginx还能帮你解决 只用在80里加一行代码即可。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span>     <span class="number">80</span>;</span><br><span class="line">   <span class="attribute">server_name</span>  localhost;</span><br><span class="line">   <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$&#123;server_name&#125;</span><span class="variable">$1</span> <span class="literal">permanent</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e9af7ebd"></a></p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>ngxin还有个强大的地方就是代理静态资源超快。以下配置的意思是  访问80 代理到 tomcat下，然后访问到 <code>js|css|ico|png|jpg|eot|svg|ttf|woff</code> 相应的文件后，会去<code>/var/lib/project/static</code> 下去访问，或者就是去另一个专门放静态资源的服务器去访问。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index; </span><br><span class="line">         <span class="comment">#指向tomcat </span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css|ico|png|jpg|eot|svg|ttf|woff)</span> &#123;</span><br><span class="line">      <span class="comment">#简单点说我们弄了一台服务器放置静态资源，然后通过这个路径进行代理过去</span></span><br><span class="line">        <span class="comment"># proxy_pass http://ip:端口;</span></span><br><span class="line">        <span class="comment">#所有静态文件直接读取硬盘</span></span><br><span class="line">        <span class="attribute">root</span> /var/lib/project/static ;</span><br><span class="line">        <span class="comment">#缓存30天</span></span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#其他页面反向代理到tomcat容器</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*$</span> &#123;</span><br><span class="line">        <span class="attribute">index</span> index;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://ip:端口;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="5c371147"></a></p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>Nginx为我们提供了请求限制模块<code>（ngx_http_limit_req_module）</code>、基于令牌桶算法的流量限制模块<code>（ngx_stream_limit_conn_module）</code>，可以方便的控制令牌速率，自定义调节限流，实现基本的限流控制。</p><p>请求限制的功能来自于 <code>ngx_http_limit_req_module</code> 模块。使用它需要首先在 http 配置段中定义限制的参照标准和状态缓存区大小。</p><ul><li><code>limit_req_zone</code> 只能配置在 <code>http</code> 范围内；</li><li><code>$binary_remote_addr</code> 表示客户端请求的IP地址；</li><li><code>mylimit</code> 自己定义的变量名；</li><li><code>rate</code> 请求频率，每秒允许多少请求；</li><li><code>limit_req</code> 与 <code>limit_req_zone</code> 对应，<code>burst</code> 表示缓存住的请求数，也就是任务队列。</li></ul><p>下面的配置就是定义了使用客户端的 IP 作为参照依据，并使用一个 10M 大小的状态缓存区。结尾的 rate=1r/s 表示针对每个 IP 的请求每秒只接受一次。</p><p>10M 的状态缓存空间够不够用呢？官方给出的答案是 1M 的缓存空间可以在 32 位的系统中服务 3.2 万 IP 地址，在 64 位的系统中可以服务 1.6 万 IP 地址，所以需要自己看情况调整。如果状态缓存耗光，后面所有的请求都会收到 503(Service Temporarily Unavailable) 错误。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义了一个 mylimit 缓冲区（容器），请求频率为每秒 1 个请求（nr/s）</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=mylimit:<span class="number">10m</span> rate=1r/s;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># nodelay 不延迟处理</span></span><br><span class="line">        <span class="comment"># burst 是配置超额处理,可简单理解为队列机制</span></span><br><span class="line">        <span class="comment"># 上面配置同一个 IP 没秒只能发送一次请求（1r/s），这里配置了缓存3个请求，就意味着同一秒内只能允许 4 个任务响应成功，其它任务请求则失败（503错误）</span></span><br><span class="line"><span class="attribute">limit_req</span> zone=mylimit burst=<span class="number">3</span> nodelay;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:7070;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="4eaa6f6d"></a></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>假设有这样一个需求，服务A要做集群， 这时候假设有 <code>192.168.8.100:8080</code> 和 <code>192.168.8.101:8080</code> 这两个服务，要做负载怎么办呢？nginx可以做到</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> linuxidc &#123; </span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.8.100:8080</span>; </span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.8.101:8080</span>; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span>     <span class="number">80</span>;</span><br><span class="line">   <span class="attribute">server_name</span>  localhost;</span><br><span class="line">   <span class="attribute">location</span> / &#123; </span><br><span class="line">            <span class="attribute">root</span>  html; </span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm; </span><br><span class="line">            <span class="attribute">proxy_pass</span> http://linuxidc; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样呢负载均衡就设置完毕了，但是是轮训的，有没有什么更好的负载放生呢？</p><p><a name="8435d500"></a></p><h3 id="weight（权重）"><a href="#weight（权重）" class="headerlink" title="weight（权重）"></a>weight（权重）</h3><p>指定轮询几率，weight和訪问比率成正比，用于后端服务器性能不均的情况。例如以下所看到的。<code>192.168.8.101</code>的訪问比率要比<code>192.168.8.100</code>的访问比率高一倍。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> linuxidc&#123; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.8.100:8080</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.8.101:8080</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="490d8105"></a></p><h3 id="ip-hash（访问ip）"><a href="#ip-hash（访问ip）" class="headerlink" title="ip_hash（访问ip）"></a>ip_hash（访问ip）</h3><p>   每一个请求按訪问ip的hash结果分配。这样每一个訪客固定訪问一个后端服务器，能够解决session的问题。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> favresin&#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.8.100:8080</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.8.101:8080</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="a61497c3"></a></p><h3 id="fair（第三方）"><a href="#fair（第三方）" class="headerlink" title="fair（第三方）"></a>fair（第三方）</h3><p>需要安装模块， 按后端服务器的响应时间来分配请求。响应时间短的优先分配。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> favresin&#123;      </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.8.100:8080</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.8.101:8080</span>; </span><br><span class="line">    fair; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bb848c42"></a></p><h3 id="url-hash（第三方）"><a href="#url-hash（第三方）" class="headerlink" title="url_hash（第三方）"></a>url_hash（第三方）</h3><p>按访问url的hash结果来分配请求，使每一个url定向到同一个后端服务器。后端服务器为缓存时比较有效。</p><p>注意：在upstream中加入hash语句。server语句中不能写入weight等其他的參数，hash_method是使用的hash算法。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> resinserver&#123; </span><br><span class="line">     <span class="attribute">server</span> <span class="number">192.168.8.100:8080</span>; </span><br><span class="line">     <span class="attribute">server</span> <span class="number">192.168.8.101:8080</span>; </span><br><span class="line">     <span class="attribute">hash</span> <span class="variable">$request_uri</span>; </span><br><span class="line">     <span class="attribute">hash_method</span> crc32; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e466ce16"></a></p><h3 id="细节配置"><a href="#细节配置" class="headerlink" title="细节配置"></a>细节配置</h3><p>upstream还能够为每一个设备设置状态值，这些状态值的含义分别例如以下：</p><ul><li>down 表示单前的server临时不參与负载.</li><li>weight 默觉得1.weight越大，负载的权重就越大。</li><li>max_fails ：同意请求失败的次数默觉得1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</li><li>fail_timeout : max_fails次失败后。暂停的时间。</li><li>backup： 其他全部的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</li></ul><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> bakend&#123; </span><br><span class="line">      <span class="comment">#定义负载均衡设备的Ip及设备状态 </span></span><br><span class="line">      ip_hash; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">192.168.8.100:8080</span> down; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">192.168.8.101:8080</span> weight=<span class="number">2</span>; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">192.168.8.102:8080</span>; </span><br><span class="line">      <span class="attribute">server</span> <span class="number">192.168.8.103:8080</span> backup; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="9ae5690d"></a></p><h2 id="怎么安装模块"><a href="#怎么安装模块" class="headerlink" title="怎么安装模块"></a>怎么安装模块</h2><p>上面说到好多什么第三方 模块啥的 ，那么到底怎么安装第三方模块呢？</p><p>去github 寻找响应的模块安装包然后来 就可以安装了。以fair为栗子。</p><p><a name="c2e2b7e1"></a></p><h3 id="未安装的nginx"><a href="#未安装的nginx" class="headerlink" title="未安装的nginx"></a>未安装的nginx</h3><p>配置：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx  --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf  --pid-path=/usr/local/nginx/nginx.pid  --add-module=/home/nginx-upstream-fair-master</span><br></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make intstall</span><br></pre></td></tr></table></figure><p><a name="d30c876f"></a></p><h3 id="安装过Nginx"><a href="#安装过Nginx" class="headerlink" title="安装过Nginx"></a>安装过Nginx</h3><p>切换到nginx目录执行一下操作</p><p>配置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx  --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid  --add-module=/home/nginx-upstream-fair-master</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>复制nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp objs/nginx /usr/<span class="built_in">local</span>/nginx/nginx</span><br></pre></td></tr></table></figure><p><a name="1bbbb204"></a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>已安装nginx，配置第三方模块时，只需要<code>--add-module=/</code>第三方模块目录，然后make编译一下就可以，不要 <code>make install</code>安装。编译后复制objs下面的nginx到指定目录下。</p><p>这知识介绍了我学习中常用的一点点配置，其实还有很多非常复杂的配置实现更复杂的功能，哈哈但是我不会，慢慢学习补充吧 0.0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装超牛逼的api管理平台yapi</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85%E8%B6%85%E7%89%9B%E9%80%BC%E7%9A%84api%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0yapi/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85%E8%B6%85%E7%89%9B%E9%80%BC%E7%9A%84api%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0yapi/</url>
      
        <content type="html"><![CDATA[<p>tags: [Centos7,Yapi]<br>categories:  环境配置</p><hr><p><a name="qaCPU"></a></p><h1 id="yapi-是什么"><a href="#yapi-是什么" class="headerlink" title="yapi 是什么"></a><strong>yapi 是什么</strong></h1><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。提供了 api 文档管理，api 数据 模拟（Mock），调试和自动化测试 api 等功能可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。简单点就是说，前后程序员可以减少接触，以减少不必要的争♂吵！</p><p>主要解决前后端分离带来的以下痛点：</p><blockquote><p>1、接口文档不可靠。很多小伙伴管理接口文档，有使用wiki的，有word文档的，甚至还有用聊天软件口口相传的，后端接口对于前端就像一个黑盒子，经常遇到问题是接口因未知原因增加参数了，参数名变了，参数被删除了。<br>2、mock 数据生成方案没有统一出口。我们都有这样的经历，前端开发功能依赖后端，解决方案有自己在代码注入json的，还有后端工程师临时搭建一套测试数据服务器，这种情况下势必会影响工作效率和代码质量，也不能及时进行更新。<br>3、资源分散，无法共享。接口调试每个开发者单独维护一套Postman接口集，每个人无法共用其他人的接口集，存在大量重复填写请求参数工作，最重要的是postman没法跟接口定义关联起来，导致后端没有动力去维护接口文档。<br>4、集成 api 自动化测试困难。yapi 提供了可视化的 api 自动化测试方案，只需要简单的填写参数，增加断言，就能实现 api 自动化测试。</p></blockquote><p><a name="b6780d84"></a></p><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nodejs(7.6+)</span><br><span class="line">mongodb(2.6+）</span><br></pre></td></tr></table></figure><p><a name="a0c989d0"></a></p><h1 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h1><p>首先安装阿里云镜像这里呢需要在<code>/etc/yum.repos.d</code> 目录下创建<code>mongodb-org.repo</code>的一个文件</p><p>并在文件中加入如下</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mongodb-org]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">MongoDB Repository</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br><span class="line">systemctl start mongod</span><br><span class="line">systemctl <span class="built_in">enable</span> mongod</span><br></pre></td></tr></table></figure><p>然后呢进入mongodb 创建一个用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br><span class="line">use api</span><br><span class="line">db.createUser(&#123;user:<span class="string">'api'</span>,<span class="built_in">pwd</span>:<span class="string">'wangle'</span>,roles:[&#123;role:<span class="string">'readWrite'</span>,db:<span class="string">'api'</span>&#125;]&#125;)</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">db.auth(<span class="string">'api'</span>,<span class="string">'wangle'</span>)</span><br></pre></td></tr></table></figure><p><a name="6c4b708e"></a></p><h1 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class="line"></span><br><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure><p><strong>如果没有编译环境，则需要yum install gcc-c++ make -y</strong></p><p><a name="f9674deb"></a></p><h1 id="安装与配置YApi工具"><a href="#安装与配置YApi工具" class="headerlink" title="安装与配置YApi工具"></a>安装与配置YApi工具</h1><p>这里采取了离线安装，原因不多说</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir yapi</span><br><span class="line"><span class="built_in">cd</span> yapi</span><br><span class="line">tar zxvf yapi-1.5.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> yapi-1.5.7</span><br></pre></td></tr></table></figure><p>当然如果网速给力的话可以在服务器上安装git 然后clone仓库也行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span>  https://github.com/YMFE/yapi.git</span><br></pre></td></tr></table></figure><p><a name="8e813a1e"></a></p><h2 id="yapi工具包"><a href="#yapi工具包" class="headerlink" title="yapi工具包"></a>yapi工具包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a name="2ebdb2a4"></a></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"port"</span>: <span class="string">"3000"</span>,</span><br><span class="line">  <span class="attr">"adminAccount"</span>: <span class="string">"admin@admin.com"</span>,</span><br><span class="line">  <span class="attr">"db"</span>: &#123;</span><br><span class="line">    <span class="attr">"servername"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"DATABASE"</span>:  <span class="string">"api"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">27017</span>,</span><br><span class="line">    <span class="attr">"user"</span>: <span class="string">"api"</span>,</span><br><span class="line">    <span class="attr">"pass"</span>: <span class="string">"wangle"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mail"</span>: &#123;</span><br><span class="line">    <span class="attr">"enable"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"smtp.163.com"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">465</span>,</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"***@163.com"</span>,</span><br><span class="line">    <span class="attr">"auth"</span>: &#123;</span><br><span class="line">        <span class="attr">"user"</span>: <span class="string">"***@163.com"</span>,</span><br><span class="line">        <span class="attr">"pass"</span>: <span class="string">"*****"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="1e7d53d0"></a></p><h2 id="安装node模块"><a href="#安装node模块" class="headerlink" title="安装node模块"></a>安装node模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --production --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a name="dd26e301"></a></p><h2 id="安装yapi软件"><a href="#安装yapi软件" class="headerlink" title="安装yapi软件"></a>安装yapi软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run install-server</span><br></pre></td></tr></table></figure><p><a name="33d81c9d"></a></p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server/app.js &amp;</span><br></pre></td></tr></table></figure><p>访问<code>http://ip:3000</code>即可</p><p>另附上一个谷歌浏览器插件，后续在YApi调试接口中会用到 crossRequest</p><p><a name="c284ad50"></a></p><h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><p>forever 包搞定，解决方案如下：</p><p><code>sudo npm install -g forever --registry=http://registry.cnpmjs.org</code><br /><code>forever start</code>你的脚本文件(如server.js)<br /><code>forever list</code>查看所有 forever 运行的进程<br /><code>forever stop uid</code>停止运行指定 uid 的进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install forever -g   <span class="comment">#安装</span></span><br><span class="line">forever start app.js          <span class="comment">#启动</span></span><br><span class="line">forever stop app.js           <span class="comment">#关闭</span></span><br><span class="line">forever start -l forever.log -o out.log -e err.log app.js   <span class="comment">#输出日志和错误</span></span><br></pre></td></tr></table></figure><p><a name="019d3658"></a></p><h1 id="代理方式："><a href="#代理方式：" class="headerlink" title="代理方式："></a>代理方式：</h1><p>如果是从nginx代理，请配置nginx支持websocket</p><p>在location /添加</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">proxy_set_header Connection "upgrade";</span><br><span class="line">proxy_pass http://ip:port;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot传参转换枚举</title>
      <link href="/2019/07/25/yuque/SpringBoot%E4%BC%A0%E5%8F%82%E8%BD%AC%E6%8D%A2%E6%9E%9A%E4%B8%BE/"/>
      <url>/2019/07/25/yuque/SpringBoot%E4%BC%A0%E5%8F%82%E8%BD%AC%E6%8D%A2%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<p>tags: [SpringBoot]<br>categories:  Spring相关</p><hr><p>有时候，我们传参的时候，希望使用枚举类来当作参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> VipEnum &#123;</span><br><span class="line">    HUANG(<span class="number">1</span>, <span class="string">"黄钻"</span>),</span><br><span class="line">    HONG(<span class="number">2</span>, <span class="string">"红钻"</span>);</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    VipEnum(Integer id, String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们期望的是这样，参数中传一个1  后台就自动转换为枚举类的<code>VipEnum.HUANG</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/vip"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> VipEnum <span class="title">convert</span><span class="params">(VipEnum vipEnum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> vipEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="8ae0ab39"></a></p><h3 id="实现Converter接口"><a href="#实现Converter接口" class="headerlink" title="实现Converter接口"></a>实现Converter接口</h3><p>这时候该怎么办呢？我们开始分析，是不是可以用到spring的类型转换器呢？ spring为我们提供了一个类型自动转换接口Converter&lt;S, T&gt;，可以实现从一个Object转为另一个Object的功能。除了Converter接口之外</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢我们就稍微实现一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">VipEnum</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> VipEnum <span class="title">convert</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"参数是: &#123;&#125;"</span>, value);</span><br><span class="line">        <span class="keyword">return</span> (VipEnum) PersonConverter.getEnum(VipEnum<span class="class">.<span class="keyword">class</span>, <span class="title">value</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends VipEnum&gt; <span class="function">Object <span class="title">getEnum</span><span class="params">(Class&lt;T&gt; targerType, String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T enumObj : targerType.getEnumConstants()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source.equals(String.valueOf(enumObj.getId()))) &#123;</span><br><span class="line">                <span class="keyword">return</span> enumObj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样呢就实现了转换，需要注意啊  <strong>在Spring MVC和Spring Boot中，由于从客户端接收到的请求都被视为String类型，所以只能用String转枚举的converter</strong>。</p><p><a name="6bd4db74"></a></p><h3 id="ConverterFactory接口"><a href="#ConverterFactory接口" class="headerlink" title="ConverterFactory接口"></a>ConverterFactory接口</h3><p>ConverterFactory的出现可以让我们统一管理一些相关联的Converter。顾名思义，ConverterFactory就是产生Converter的一个工厂，确实ConverterFactory就是用来产生Converter的。我们先来看一下ConverterFactory接口的定义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConverterFactory</span>&lt;<span class="title">S</span>, <span class="title">R</span>&gt; </span>&#123;  </span><br><span class="line">    &lt;T extends R&gt; <span class="function">Converter&lt;S, T&gt; <span class="title">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 总共有 三个泛型S、R、T，其中</p><ul><li>S表示原类型</li><li>R表示目标类型</li><li>T是类型R的一个子类</li></ul><p>ConverterFactory相比converter的好处在于ConverterFactory可以将原类型转换成一组实现了相同接口类型的对象，而Converter则只能转换成一种类型，总不能一个枚举去实现一个Converter啊，这样肯定不行的。有了ConverterFactory之后，事情就变得简单了不少！</p><p>首先弄个基类接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEnum</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后让枚举类实现它</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> VipEnum implements IEnum&lt;Integer&gt; &#123;</span><br><span class="line">    HUANG(<span class="number">1</span>, <span class="string">"黄钻"</span>),</span><br><span class="line">    HONG(<span class="number">2</span>, <span class="string">"红钻"</span>);</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    VipEnum(Integer id, String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个枚举工厂转换类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumConvertFactory</span> <span class="keyword">implements</span> <span class="title">ConverterFactory</span>&lt;<span class="title">String</span>, <span class="title">IEnum</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends IEnum&gt; <span class="function">Converter&lt;String, T&gt; <span class="title">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringToIEum&lt;&gt;(targetType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToIEum</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">IEnum</span>&gt; <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Class&lt;T&gt; targerType;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StringToIEum</span><span class="params">(Class&lt;T&gt; targerType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.targerType = targerType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(source)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (T) EnumConvertFactory.getIEnum(<span class="keyword">this</span>.targerType, source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends IEnum&gt; <span class="function">Object <span class="title">getIEnum</span><span class="params">(Class&lt;T&gt; targerType, String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T enumObj : targerType.getEnumConstants()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source.equals(String.valueOf(enumObj.getId()))) &#123;</span><br><span class="line">                <span class="keyword">return</span> enumObj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样还不行，紧接着，需要把转换工厂注入spring容器，这里呢我使用的是springbooot2.x</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EnumConvertFactory enumConvertFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverterFactory(enumConvertFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来就可以进行转换了，需要转换的枚举实现基类接口就可以啦，是不是棒棒的！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装zabbix</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85zabbix/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85zabbix/</url>
      
        <content type="html"><![CDATA[<p>tags: [Centos7,Zabbix]<br>categories:  环境配置</p><hr><p>Zabbix是一个高度集成的企业级开源网络监控解决方案，与Cacti、Nagios并称监控三剑客，提供分布式监控以及集中的WEB管理界面。被监控对象只要支持SNMP协议或者运行Zabbix_agents即可。Zabbix具备创建商业监控软件所具备的功能，例如主机性能监控、网络设备性能监控、数据库性能监控、ftp等通用协议的监控，能够利用灵活的可定制警告机制，允许用户对事件发送基于E-mail的警告，保证相关维护人员对问题做出快速解决，还可以利用存储数据提供杰出的报表及实时的图形化数据处理，实现对Linux、Windows主机的7*24小时集中监控。监控的项目可以包括CPU、内存、磁盘、网卡流量、服务可用性等各种资源。</p><p><a name="eac52bf6"></a></p><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><ol><li>虚拟机版本：centos 7.4</li><li><strong>关闭虚拟机防火墙   及    selinux</strong></li><li>虚拟机分配<table><thead><tr><th>主机</th><th>IP地址</th><th>主要软件</th></tr></thead><tbody><tr><td>zabbix服务器</td><td>192.168.8.100</td><td>zabbix-server-mysql-4.0.0-1、zabbix-web-mysql-4.0.0-1</td></tr><tr><td>mysql服务器</td><td>192.168.8.101</td><td>zabbix-agent-4.0.0-1</td></tr></tbody></table></li></ol><p><a name="1281f4cd"></a></p><h2 id="安装配置zabbix服务"><a href="#安装配置zabbix服务" class="headerlink" title="安装配置zabbix服务"></a>安装配置zabbix服务</h2><p>Zabbix通过C/S模式采集数据，通过B/S模式在Web端展示和配置。zabbix服务需要使用LAMP平台来承载数据库和Web界面。本次实验环境，为了节约时间，LAMP架构采用的yum安装的方式简单部署。</p><p><a name="424a2ad8"></a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>管理防火墙</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">停止：</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">禁用：</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><ol start="2"><li>关闭selinux</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">临时关闭：</span><br><span class="line">[root@localhost ~]<span class="comment"># getenforce</span></span><br><span class="line">Enforcing</span><br><span class="line">[root@localhost ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@localhost ~]<span class="comment"># getenforce Permissive</span></span><br><span class="line">-------------------------------------</span><br><span class="line">永久关闭：</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/selinux</span></span><br><span class="line">SELINUX=enforcing 改为 SELINUX=disabled</span><br><span class="line">重启服务reboot</span><br></pre></td></tr></table></figure><p><a name="9e4e7380"></a></p><h3 id="yum快速部署LAMP"><a href="#yum快速部署LAMP" class="headerlink" title="yum快速部署LAMP"></a>yum快速部署LAMP</h3><p>首先呢安装软件包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y \</span><br><span class="line">httpd \</span><br><span class="line">mariadb-server mariadb \</span><br><span class="line">php \</span><br><span class="line">php-mysql \</span><br><span class="line">php-gd \</span><br><span class="line">libjpeg* \</span><br><span class="line">php-ldap \</span><br><span class="line">php-odbc \</span><br><span class="line">php-pear \</span><br><span class="line">php-xml \</span><br><span class="line">php-xmlrpc \</span><br><span class="line">php-mhash</span><br></pre></td></tr></table></figure><p><a name="321dd449"></a></p><h4 id="配置httpd服务"><a href="#配置httpd服务" class="headerlink" title="配置httpd服务"></a>配置httpd服务</h4><p>httpd配置文件的修改包括按方面，一、域名的修改，二、监听地址修改，三、DirectoryIndex中增加index.php</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">Listen 192.168.8.100:80</span><br><span class="line">ServerName www.benet.com      //域名自定义</span><br><span class="line">DirectoryIndex index.html index.php</span><br></pre></td></tr></table></figure><p><a name="55e11494"></a></p><h4 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">date.timezone = PRC    //设置时区为中国</span><br></pre></td></tr></table></figure><p><a name="33d81c9d"></a></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start httpd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd.service</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb.service</span><br><span class="line">netstat -ntap | egrep <span class="string">'(80|3306)'</span></span><br></pre></td></tr></table></figure><p><a name="063127ae"></a></p><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p><a name="340c3876"></a></p><h4 id="数据库的创建及用户授权"><a href="#数据库的创建及用户授权" class="headerlink" title="数据库的创建及用户授权"></a>数据库的创建及用户授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">GRANT all privileges ON *.* TO <span class="string">'zabbix'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'wangle'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><a name="8a598ad9"></a></p><h4 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/www/html/index.php   //创建测试页</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$link</span>=mysql_connect(<span class="string">'192.168.8.100'</span>,<span class="string">'zabbix'</span>,<span class="string">'wangle'</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$link</span>) <span class="built_in">echo</span> <span class="string">"&lt;h1&gt;数据库连接成功&lt;/h1&gt;"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"&lt;h1&gt;数据库连接失败&lt;/h1&gt;"</span>;</span><br><span class="line">mysql_close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后访问<code>192.168.8.100/index.php</code>页面显示<strong>数据库连接成功</strong>  即可</p><p><a name="7e4b6543"></a></p><h3 id="解决本地用户无法登陆问题"><a href="#解决本地用户无法登陆问题" class="headerlink" title="解决本地用户无法登陆问题"></a>解决本地用户无法登陆问题</h3><p>有时我们会遇到在mysql数据库中添加用户，并授权其远程登陆，但是在你测试时却是无法登陆，甚至在本地也无法登陆，可能原因是在mysql的用户列表中有空用户，对本地用户登陆造成了干扰，导致无法登陆。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">select user,host from mysql.user;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| user   | host      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| zabbix | %         |</span><br><span class="line">| root   | 127.0.0.1 |</span><br><span class="line">| root   | ::1       |</span><br><span class="line">|        | cacti     |                  //存在空用户</span><br><span class="line">| root   | cacti     |</span><br><span class="line">|        | localhost |                  //空用户</span><br><span class="line">| root   | localhost |</span><br><span class="line">+--------+-----------+</span><br><span class="line">drop user &apos;&apos;@localhost;</span><br><span class="line">drop user &apos;&apos;@cacti;                     //删除这两个空用户</span><br><span class="line">flush privileges;                       //刷新使修改生效</span><br></pre></td></tr></table></figure><p><a name="cfa2ecef"></a></p><h3 id="安装zabbix服务程序"><a href="#安装zabbix服务程序" class="headerlink" title="安装zabbix服务程序"></a>安装zabbix服务程序</h3><p><a name="3e2e8b9a"></a></p><h4 id="安装php模块"><a href="#安装php模块" class="headerlink" title="安装php模块"></a>安装php模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install php-bcmath php-mbstring -y</span><br></pre></td></tr></table></figure><p><a name="1777b37e"></a></p><h4 id="安装zabbix软件"><a href="#安装zabbix软件" class="headerlink" title="安装zabbix软件"></a>安装zabbix软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.5/rhel/7/x86_64/zabbix-release-3.5-1.el7.noarch.rpm</span><br><span class="line">yum install zabbix-server-mysql zabbix-web-mysql -y</span><br></pre></td></tr></table></figure><p><a name="d2302380"></a></p><h4 id="生成数据库文件"><a href="#生成数据库文件" class="headerlink" title="生成数据库文件"></a>生成数据库文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql-4.0.0/create.sql.gz | mysql -uzabbix -p  wangle</span><br><span class="line">//这里输入的密码为之前授权的zabbix用户的密码，不是root密码</span><br></pre></td></tr></table></figure><p><a name="6947eea4"></a></p><h3 id="配置zabbix服务"><a href="#配置zabbix服务" class="headerlink" title="配置zabbix服务"></a>配置zabbix服务</h3><p><a name="0bf04964"></a></p><h4 id="修改zabbix-server"><a href="#修改zabbix-server" class="headerlink" title="修改zabbix_server"></a>修改zabbix_server</h4><p>因为在前面的设置中数据库名称，用户都是zabbix，所以在此处都不需要修改，改配置文件唯一要修改的就是DBpassword  <strong>改为你数据库zabbix授权的用户名</strong>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -n <span class="string">'^'</span>[a-Z] /etc/zabbix/zabbix_server.conf </span><br><span class="line"></span><br><span class="line">38:LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_server.log</span><br><span class="line">49:LogFileSize=0</span><br><span class="line">72:PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line">82:SocketDir=/var/run/zabbix</span><br><span class="line">101:DBName=zabbix</span><br><span class="line">117:DBUser=zabbix</span><br><span class="line">125:DBPassword=admin123 //修改本行</span><br><span class="line">347:SNMPTrapperFile=/var/<span class="built_in">log</span>/snmptrap/snmptrap.log</span><br><span class="line">465:Timeout=4</span><br><span class="line">507:AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br><span class="line">517:ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line">553:LogSlowQueries=3000</span><br></pre></td></tr></table></figure><p><a name="97856546"></a></p><h4 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/zabbix.conf</span><br><span class="line">php_value date.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p><a name="c7d14e02"></a></p><h3 id="解决WEB界面中文乱码"><a href="#解决WEB界面中文乱码" class="headerlink" title="解决WEB界面中文乱码"></a>解决WEB界面中文乱码</h3><p>修改该配置文件defines.inc.php，将全文的graphfont替换为kaiti</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/share/zabbix/include/defines.inc.php</span><br><span class="line">:%s /graphfont/kaiti/g            //末行模式中操作</span><br></pre></td></tr></table></figure><p><a name="14b19b2a"></a></p><h4 id="添加字体文件"><a href="#添加字体文件" class="headerlink" title="添加字体文件"></a>添加字体文件</h4><p>从windows 中随便弄个字体 ，复制字体文件到指定目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp STKAITI.TTF /usr/share/zabbix/fonts/</span><br></pre></td></tr></table></figure><p><a name="33d81c9d-1"></a></p><h3 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> zabbix-server</span><br><span class="line">systemctl start zabbix-server</span><br><span class="line">netstat -anpt | grep zabbix  //监听在10051端口上</span><br><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure><p><a name="739fdb4e"></a></p><h3 id="访问WEB页面"><a href="#访问WEB页面" class="headerlink" title="访问WEB页面"></a>访问WEB页面</h3><p>访问<code>http://192.168.8.100/zabbix/</code>，完成安装之后即可登陆，默认用户名：Admin，密码：zabbix</p><p>顺着设置即可，登录后 zabbix对中文有很好的支持，所以可以<code>Administrator-Users==&gt;点击用户==&gt;语言中设置</code></p><p><a name="620c6d5f"></a></p><h3 id="配置代理端"><a href="#配置代理端" class="headerlink" title="配置代理端"></a>配置代理端</h3><p><a name="5653172e"></a></p><h4 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix_agent"></a>安装zabbix_agent</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.5/rhel/7/x86_64/zabbix-release-3.5-1.el7.noarch.rpm</span><br><span class="line">yum install -y zabbix-agent</span><br></pre></td></tr></table></figure><p><a name="2ebdb2a4"></a></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -n <span class="string">'^'</span>[a-Z] /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">13:PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class="line">32:LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_agentd.log</span><br><span class="line">43:LogFileSize=0</span><br><span class="line">98:Server=192.168.8.101                   //修改为监控端地址</span><br><span class="line">139:ServerActive=192.168.8.101         //修改为监控端地址</span><br><span class="line">150:Hostname=mysql                       //hostname自定义             </span><br><span class="line">268:Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br></pre></td></tr></table></figure><p><a name="33d81c9d-2"></a></p><h4 id="启动服务-2"><a href="#启动服务-2" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start zabbix-agent.service</span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-agent.service</span><br><span class="line">netstat -anpt | grep zabbix</span><br></pre></td></tr></table></figure><p><a name="96fd161c"></a></p><h3 id="在WEB界面添加被控主机"><a href="#在WEB界面添加被控主机" class="headerlink" title="在WEB界面添加被控主机"></a>在WEB界面添加被控主机</h3><p>在配置的菜单下，点击主机</p><ol><li>主机名称：主机名称需要与配置文件中的内容对应</li><li>可见名称：不是必填项，可以忽略</li><li>群组： 单机选择，从中添加群组，我这里默认选择的是 <code>linux servers</code></li><li>agent代理程序接口 填写对应的ip地址</li></ol><p>然后就是配置模版</p><ol><li>从监控中选取需要监控的项目 我这里由于是监控mysql 所以选择两个自带的模版</li></ol><p><code>Template App Service</code>  <code>Template DB MySQL</code> 切记啊 要点一下添加。</p><ol start="2"><li>点下面的添加就成功添加了代理</li></ol><p>回到首页就看到了所监控的群组和参数和异常。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql存储过程插入千万条测试数据</title>
      <link href="/2019/07/25/yuque/Mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%8F%92%E5%85%A5%E5%8D%83%E4%B8%87%E6%9D%A1%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/25/yuque/Mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%8F%92%E5%85%A5%E5%8D%83%E4%B8%87%E6%9D%A1%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>有时候需要插入好多好多的数据，有使用游标的不过我感觉效率不如内存表拷贝来的实在！！！</p><p><a name="7cce42b8"></a></p><h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><p>需要模拟一些字段，这时呢我们弄一个随机字符串的存储过程方便日后使用</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 随机字符串存储过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> rand_string </span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8 </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string (n <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">CHARSET</span> <span class="string">'utf8'</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">    <span class="keyword">DECLARE</span> char_str <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> return_str <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i &lt; n DO</span><br><span class="line">        <span class="keyword">SET</span> return_str = <span class="keyword">concat</span>(return_str, <span class="keyword">substring</span>(char_str, <span class="keyword">FLOOR</span>(<span class="number">1</span> + <span class="keyword">RAND</span>()*<span class="number">62</span>), <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">    RETURN return_str;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><a name="e6d2ca37"></a></p><h2 id="插入内存表存储过程"><a href="#插入内存表存储过程" class="headerlink" title="插入内存表存储过程"></a>插入内存表存储过程</h2><p>这里的 vote_record_memory需要创建，结构的话跟你要插入那张表结构一样就行了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE  PROCEDURE <span class="title">add_vote_memory</span><span class="params">(IN n <span class="keyword">int</span>)</span>  </span></span><br><span class="line"><span class="function">BEGIN    </span></span><br><span class="line"><span class="function">  DECLARE i INT DEFAULT 1</span>;  </span><br><span class="line">    WHILE (i &lt;= n ) DO </span><br><span class="line">      <span class="function">INSERT INTO <span class="title">vote_record_memory</span> <span class="params">(id)</span> <span class="title">VALUES</span> <span class="params">( UUID()</span>)</span>;</span><br><span class="line">            set i=i+<span class="number">1</span>;  </span><br><span class="line">    END WHILE;  </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><a name="e8de9573"></a></p><h2 id="执行内存表插入"><a href="#执行内存表插入" class="headerlink" title="执行内存表插入"></a>执行内存表插入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> add_vote_memory(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><a name="372348a8"></a></p><h2 id="然后插入到你想要的表中就行了"><a href="#然后插入到你想要的表中就行了" class="headerlink" title="然后插入到你想要的表中就行了"></a>然后插入到你想要的表中就行了</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> xxx表 <span class="keyword">select</span> * <span class="keyword">from</span> vote_record_memory</span><br></pre></td></tr></table></figure><p><a name="aa84ec94"></a></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果报错的话 尝试下这些优化，更改内存表的大小，设置内存交换的大小。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">max_heap_table_size = 1024m</span><br><span class="line">tmp_heap_aize = 1024m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础 数组的拷贝</title>
      <link href="/2019/07/25/yuque/Java%E5%9F%BA%E7%A1%80%20%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/07/25/yuque/Java%E5%9F%BA%E7%A1%80%20%E6%95%B0%E7%BB%84%E7%9A%84%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>所谓复制数组,是指将一个数组中的元素在另一个数组中进行复制，下面就一起探讨一下这其中的一些奥妙。</p><p><a name="clone"></a></p><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>clone方法是从Object类继承过来的，基本数据类型（String ，boolean，char，byte，short，float ，double，long）都可以直接使用clone方法进行克隆，注意String类型是因为其值不可变所以才可以使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a2 = a1.clone();</span><br><span class="line">System.out.println(Arrays.toString(a2));<span class="comment">//[1, 3]</span></span><br></pre></td></tr></table></figure><p>进行clone后可以得到一个新的a2数组打印的结果自然是 <code>1和3</code>  那么通过clone 克隆出来的数组 是否指向克隆数组元素的内存空间呢？ 做个试验</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] a1 = &#123;<span class="string">"a1"</span>, <span class="string">"a2"</span>&#125;;</span><br><span class="line">String[] a2 = a1.clone();</span><br><span class="line">a1[<span class="number">0</span>] = <span class="string">"b1"</span>; </span><br><span class="line">System.out.println(Arrays.toString(a1));   <span class="comment">//[b1, a2]</span></span><br><span class="line">System.out.println(Arrays.toString(a2));   <span class="comment">//[a1, a2]</span></span><br></pre></td></tr></table></figure><p>可以看到没有，由此可以得出结论  <strong>对于基础类型而言，一维数组是深克隆(重新分配空间,并将元素复制过去)</strong></p><p>既然这样！！！那么二维数组呢？？ 于是我瞬间打了个栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] a = &#123;&#123;<span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>&#125;, &#123;<span class="string">"3"</span>, <span class="string">"8"</span>&#125;&#125;;</span><br><span class="line">String[][] b = a.clone();</span><br><span class="line">b[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">"9"</span>;</span><br><span class="line">System.out.println(b[<span class="number">1</span>][<span class="number">1</span>] + <span class="string">"  "</span> + b[<span class="number">1</span>][<span class="number">1</span>]);<span class="comment">// 9  9</span></span><br></pre></td></tr></table></figure><p>果然在a clone给b的时候  值是引用传递的，由于指向的还是用一块内存，所以改变b中的值 a中的同样也会改变。</p><p><strong>由此我们又得出了结论  **对于基础类型而言二维数组是浅克隆(只传递引用)</strong> 那么问题来了，怎么对基础类型的二维数组进行深克隆呢？**</p><p>介于一维数组的例子我们不难想象，应该是循环的进行 一维的拷贝。</p><p><a name="System.arraycopy"></a></p><h2 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy"></a>System.arraycopy</h2><p>System.arraycopy方法是一个本地的方法，源码里定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>属性分别为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(原数组 src ，原数组的开始位置 srcPos，目标数组 dest， 目标数组的开始位置 destPos，拷贝个数 length)</span><br></pre></td></tr></table></figure><p>怎么使用呢？ 举个栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">System.arraycopy(a1, <span class="number">1</span>, a2, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(Arrays.toString(a1)); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">System.out.println(Arrays.toString(a2)); <span class="comment">// [0, 0, 0, 2, 3, 4, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure><p>意思就是 <strong>原数组 a1 从第一个开始，copy到 a2 ，从a2 的3下标开始，拷贝3个</strong>。当使用这个方法的时候，需要复制到一个已经分配内存单元的数组。</p><p><a name="Arrays.copyOf"></a></p><h2 id="Arrays-copyOf"><a href="#Arrays-copyOf" class="headerlink" title="Arrays.copyOf"></a>Arrays.copyOf</h2><p>Arrays.copyOf底层其实也是用的System.arraycopy 源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">            ? (T[]) new Object[newLength]</span><br><span class="line">            : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                         Math.min(original.length, newLength));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>属性分别为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(原数组 original，拷贝的个数 newLength)</span><br></pre></td></tr></table></figure><p>怎么使用呢？举个栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a2 = Arrays.copyOf(a1, <span class="number">3</span>);</span><br><span class="line">System.out.println(Arrays.toString(a1));<span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">System.out.println(Arrays.toString(a2));<span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>使用该方法无需我们事先使用new关键字对对象进行内存单元的分配</p><p>这方法，是不是很爽，配合<code>System.arraycopy</code> 不难做出数组的动态扩容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] as = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    String[] b = &#123;String.valueOf(i), String.valueOf(i)&#125;;</span><br><span class="line">    as = Arrays.copyOf(as, as.length + b.length);<span class="comment">//数组扩容</span></span><br><span class="line">    System.arraycopy(b, <span class="number">0</span>, as, as.length-b.length, b.length);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(as));<span class="comment">//[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]</span></span><br></pre></td></tr></table></figure><p><a name="Arrays.copyOfRange"></a></p><h2 id="Arrays-copyOfRange"><a href="#Arrays-copyOfRange" class="headerlink" title="Arrays.copyOfRange"></a>Arrays.copyOfRange</h2><p>Arrays.copyOfRange底层其实也是用的System.arraycopy，只不过封装了一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOfRange(U[] original, <span class="keyword">int</span> from, <span class="keyword">int</span> to, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">    <span class="keyword">int</span> newLength = to - from;</span><br><span class="line">    <span class="keyword">if</span> (newLength &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(from + <span class="string">" &gt; "</span> + to);</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">        ? (T[]) new Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, from, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length - from, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性分别为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">（原数组 original，开始位置 from，拷贝的个数 to）</span><br></pre></td></tr></table></figure><p>依然是栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a2 = Arrays.copyOfRange(a1, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(a1)) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">System.out.println(Arrays.toString(a2)) <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>最后需要注意的是  <strong>最后需要注意的是基本类型的拷贝是不影响原数组的值的。如果是引用类型，就不能在这用了，对于引用类型是不适合的。</strong></p><p><a name="fe1c544d"></a></p><h2 id="那么如何给一个对象进行深度拷贝呢？"><a href="#那么如何给一个对象进行深度拷贝呢？" class="headerlink" title="那么如何给一个对象进行深度拷贝呢？"></a>那么如何给一个对象进行深度拷贝呢？</h2><p><a name="6c0d6eb5"></a></p><h3 id="实现Cloneable接口"><a href="#实现Cloneable接口" class="headerlink" title="实现Cloneable接口"></a>实现Cloneable接口</h3><p>实现Cloneable接口，并重写clone方法，注意一个类不实现这个接口，直接使用clone方法是编译通不过的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mao</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String miao;</span><br><span class="line">    <span class="keyword">private</span> String wang;</span><br><span class="line">    <span class="comment">//.....get  set  toString </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mao <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Mao) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以玩啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mao m1 = <span class="keyword">new</span> Mao(<span class="string">"miao"</span>, <span class="string">"wang"</span>);</span><br><span class="line">Mao m2 = dog1.clone();</span><br><span class="line">m2.setWang(<span class="string">"miao"</span>);</span><br><span class="line">System.out.println(m1); <span class="comment">// Mao&#123;id='miao', name='miao'&#125;</span></span><br><span class="line">System.out.println(m2); <span class="comment">// Mao&#123;id='miao', name='miao'&#125;</span></span><br></pre></td></tr></table></figure><p><a name="c421f142"></a></p><h3 id="组合类深拷贝"><a href="#组合类深拷贝" class="headerlink" title="组合类深拷贝"></a>组合类深拷贝</h3><p>如果一个类里面，又引用其他的类，其他的类又有引用别的类，那么想要深度拷贝必须所有的类及其引用的类都得实现Cloneable接口，重写clone方法，这样以来非常麻烦，简单的方法是让所有的对象实现序列化接口（Serializable），然后通过序列化反序列化的方法来深度拷贝对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mao <span class="title">myClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Mao m = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将对象序列化成为流，因为写在流是对象里的一个拷贝</span></span><br><span class="line">        <span class="comment">//而原始对象扔在存在JVM中，所以利用这个特性可以实现深拷贝</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//将流序列化为对象</span></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        m = (Mao) objectInputStream.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="25f9c7fa"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注意除非必需，一般情况下不要使用对象的深度拷贝，因为性能较差，况且这方面的知识单纯的在工作中也不太可能会注意到，除了自己实现深度拷贝的功能外，lang3 是个神器的玩意，但原理都大同小异，感兴趣的同学可以自己去学习下。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 常用异步并行任务</title>
      <link href="/2019/07/25/yuque/SpringBoot%20%E5%B8%B8%E7%94%A8%E5%BC%82%E6%AD%A5%E5%B9%B6%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/07/25/yuque/SpringBoot%20%E5%B8%B8%E7%94%A8%E5%BC%82%E6%AD%A5%E5%B9%B6%E8%A1%8C%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>tags: [并发,SpringBoot]<br>categories:  Spring相关</p><hr><p>我在平时做东西的时候，总能发现一些这样的问题</p><p><strong>需求点</strong>：业务上常常有这样一个需求：从多个数据源取得，合并成一个结果。</p><p>这个操作，假设有3个数据源，同步处理，需要queryData1，queryData2，queryData3。执行时间会是3个时间之和。一般的异步异步设计方案为：起一个业务的线程池，并发执行业务，然后一个守护的线程等各个业务结束(时间为业务执行最长的时间)，获取所有数据，这样明显执行时间会小于3个业务时间之和。而是用了执行最长的业务时间，加上守护线程的消耗。那么这时候怎么解决呢？这里就记录下我平时解决的两种方式！</p><p><a name="c9c39748"></a></p><h2 id="Java8新特性CompletableFuture"><a href="#Java8新特性CompletableFuture" class="headerlink" title="Java8新特性CompletableFuture"></a>Java8新特性CompletableFuture</h2><p>现在java8提供了一个很好的CompletableFuture工具</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并行获取各个数据源的数据合并成一个数据组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getProductBaseInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取基本信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> productId + <span class="string">"商品基础信息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getProductDetailInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取详情信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> productId + <span class="string">"商品详情信息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getProductSkuInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">" 获取sku信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> productId + <span class="string">"商品sku信息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllInfoByProductId</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取得一个商品的所有信息（基础、详情、sku）</span></span><br><span class="line">        CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; getProductBaseInfo(productId));</span><br><span class="line">        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; getProductDetailInfo(productId));</span><br><span class="line">        CompletableFuture&lt;String&gt; f3 = CompletableFuture.supplyAsync(() -&gt; getProductSkuInfo(productId));</span><br><span class="line">        <span class="comment">//等待三个数据源都返回后，再组装数据。这里会有一个线程阻塞</span></span><br><span class="line">        CompletableFuture.allOf(f1, f2, f3).join();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String baseInfo = f1.get();</span><br><span class="line">            String detailInfo = f2.get();</span><br><span class="line">            String skuInfo = f3.get();</span><br><span class="line">            <span class="keyword">return</span> baseInfo + <span class="string">""</span> + detailInfo + skuInfo;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个测试用例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String allInfoByProductId = asyncTest1.getAllInfoByProductId(<span class="string">"1001"</span>);</span><br><span class="line">    System.out.println(allInfoByProductId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看下日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-12-02 22:06:36.679 INFO 18544 --- [onPool-worker-1] com.maoxs.service.AsyncTest1: 获取基本信息</span><br><span class="line">2018-12-02 22:06:36.679 INFO 18544 --- [onPool-worker-1] com.maoxs.service.AsyncTest1:  获取sku信息</span><br><span class="line">2018-12-02 22:06:36.679 INFO 18544 --- [onPool-worker-2] com.maoxs.service.AsyncTest1: 获取详情信息</span><br><span class="line">1001商品基础信息1001商品详情信息1001商品sku信息</span><br></pre></td></tr></table></figure><p>可以看到子线程是同时执行了三个方法，allOf是等待所有任务完成，接触阻塞，获取各个数据源的数据。</p><p>对于上面的例子，使用了默认的线程池，线程数为cpu核数-1。这个并不能很好地利用资源。下面为线程数计算的公式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器端最佳线程数量= ( (线程等待时间+线程cpu时间) /  线程cpu时间)  * cpu数量</span><br></pre></td></tr></table></figure><p>那就改进一下将executor线程池暴露出来，方便配置线程数和做一些其他处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executor = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAllInfoByProductId</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//取得一个商品的所有信息（基础、详情、sku）</span></span><br><span class="line">    CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; getProductBaseInfo(productId),executor);</span><br><span class="line">    CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; getProductDetailInfo(productId),executor);</span><br><span class="line">    CompletableFuture&lt;String&gt; f3 = CompletableFuture.supplyAsync(() -&gt; getProductSkuInfo(productId),executor);</span><br><span class="line">    <span class="comment">//等待三个数据源都返回后，再组装数据。这里会有一个线程阻塞</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String baseInfo = f1.get();</span><br><span class="line">        String detailInfo = f2.get();</span><br><span class="line">        String skuInfo = f3.get();</span><br><span class="line">        <span class="keyword">return</span> baseInfo + <span class="string">""</span> + detailInfo + skuInfo;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="34f3a2f6"></a></p><h2 id="Spring-Async"><a href="#Spring-Async" class="headerlink" title="Spring @Async "></a>Spring <a href="">@Async </a></h2><p>在spring 3.x之后，就已经内置了@Async来完美解决这个问题，本文将介绍在springboot中如何使用@Async。</p><p><a name="ecff77a8"></a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先呢建一个异步任务的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并行获取各个数据源的数据合并成一个数据组合</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">getProductBaseInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取基本信息"</span>);</span><br><span class="line">        Future&lt;String&gt; future;</span><br><span class="line">        future = <span class="keyword">new</span> AsyncResult&lt;&gt;(productId + <span class="string">"商品基础信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">getProductDetailInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取详情信息"</span>);</span><br><span class="line">        Future&lt;String&gt; future;</span><br><span class="line">        future = <span class="keyword">new</span> AsyncResult&lt;&gt;(productId + <span class="string">"商品详情信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">getProductSkuInfo</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">" 获取sku信息"</span>);</span><br><span class="line">        Future&lt;String&gt; future;</span><br><span class="line">        future = <span class="keyword">new</span> AsyncResult&lt;&gt;(productId + <span class="string">"商品sku信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要说明下<code>@EnableAsync</code> 这个注解的作用是表示开启异步，为什么要建一个任务类呢？</p><p>不得不提到  <strong>Spring在调用注解方法的时候是生成一个代理类，由代理类去执行! 而在同一个类中，方法调用是在类体内执行的，spring无法截获这个方法调用。</strong></p><p>然后呢怎么使用呢</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTask asyncTask;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllInfoByProductId</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取得一个商品的所有信息（基础、详情、sku）</span></span><br><span class="line">        Future&lt;String&gt; f1 = asyncTask.getProductBaseInfo(productId);</span><br><span class="line">        Future&lt;String&gt; f2 = asyncTask.getProductDetailInfo(productId);</span><br><span class="line">        Future&lt;String&gt; f3 = asyncTask.getProductSkuInfo(productId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String baseInfo = f1.get();</span><br><span class="line">            String detailInfo = f2.get();</span><br><span class="line">            String skuInfo = f3.get();</span><br><span class="line">            <span class="keyword">return</span> baseInfo + <span class="string">""</span> + detailInfo + skuInfo;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后同样的来一个测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String allInfoByProductId = asyncTest2.getAllInfoByProductId(<span class="string">"1001"</span>);</span><br><span class="line">System.out.println(allInfoByProductId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是日志输出,可以看到三个子线程是同时去执行了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-12-02 22:08:36.709  INFO 14124 --- [         task-1] com.maoxs.service.AsyncTask   : 获取基本信息</span><br><span class="line">2018-12-02 22:08:36.709  INFO 14124 --- [         task-3] com.maoxs.service.AsyncTask   : 获取sku信息</span><br><span class="line">2018-12-02 22:08:36.709  INFO 14124 --- [         task-2] com.maoxs.service.AsyncTask   : 获取详情信息</span><br><span class="line">1001商品基础信息1001商品详情信息1001商品sku信息</span><br></pre></td></tr></table></figure><p><a name="0f1f27ad"></a></p><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p>这里呢异步调用使用的是系统默认的线程池可以通过自定义线程池来达资源的最大的利用</p><p>这时只需定义一个bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(<span class="string">"FulinTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">myTaskAsyncPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"FulinExecutor-"</span>);</span><br><span class="line">        <span class="comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">// CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>怎么使用呢？只需要在注解上加入bean名字即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span>(value = <span class="string">"FulinTask"</span>)</span><br></pre></td></tr></table></figure><p><a name="a7329814"></a></p><h3 id="调配默认线程池"><a href="#调配默认线程池" class="headerlink" title="调配默认线程池"></a>调配默认线程池</h3><p>如果我们想使用默认的线程池，但是只是想修改默认线程池的配置，那怎么做了，此时我们需要实现<code>AsyncConfigurer</code>类即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskExecutePool</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"FulinExecutor-"</span>);</span><br><span class="line">        <span class="comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">// CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 异步任务中异常处理</span></span><br><span class="line">        <span class="keyword">return</span> (arg0, arg1, arg2) -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">"========="</span> + arg0.getMessage() + <span class="string">"========="</span>, arg0);</span><br><span class="line">            log.error(<span class="string">"exception method:"</span> + arg1.getName());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 常用的部署方式</title>
      <link href="/2019/07/25/yuque/SpringBoot%20%E5%B8%B8%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/07/25/yuque/SpringBoot%20%E5%B8%B8%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>tags: [SpringBoot,部署]<br>categories:  Spring相关</p><hr><p>springbooot部署大概我用过这几种，做一下总结</p><p><a name="Linux"></a></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a name="1.executable"></a></p><h3 id="1-executable"><a href="#1-executable" class="headerlink" title="1.executable"></a>1.executable</h3><p>该方式主要借助官方的 spring-boot-maven-plugin 创建”Fully executable” jar ，这中jar包内置一个shell脚本，可以方便的将该应用设置为Unix/Linux的系统服务(init.d service),官方对该功能在CentOS和Ubuntu进行了测试，对于OS X和FreeBSD,可能需要自定义。具体步骤如下:</p><p>在 pom.xml 中引入插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢吧你打好的jar包放入linux服务器，首先呢你要赋予jar包 执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod u+x demo.jar</span><br></pre></td></tr></table></figure><p>其实呢现在就可以<code>./demo.jar</code>就可以运行了但是结束会话的话，进程就结束了,这时候呢，我们需要吧这个jar创建一个软连接到<code>/etc/init.d/</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /var/app/demo.jar /etc/init.d/demo</span><br></pre></td></tr></table></figure><p>这时候呢就可以使用这样的方式进行相关操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/demo start|stop|restart</span><br></pre></td></tr></table></figure><p>默认PID文件路径：/var/run/appname/appname.pid</p><p>默认服务日志文件路径：/var/log/appname.log（可以通过下面.conf 的方式修改LOG_FOLDER）</p><p>是的没错但是有一点问题啊 就是启动的内存和日志这样不太好管理，可以在jar包相同路径下创建一个.conf文件，名称应该与.jar的名称相同，如demo.conf（如果我们打包的文jar文件为 demo-1.0.0.jar 那么这里的conf文件也应该是 demo-1.0.0.conf），其内容配置可以如下,自定义参数启动方式配置(更多配置参数，可以上<a href="https://link.jianshu.com/?t=https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html" target="_blank" rel="noopener">官网</a>)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">java的地址</span></span><br><span class="line">JAVA_HOME=/usr/local/java/jdk1.8</span><br><span class="line"><span class="meta">#</span><span class="bash">java运行参数</span></span><br><span class="line">JAVA_OPTS=-Xmx1024M</span><br><span class="line"><span class="meta">#</span><span class="bash">日志输出的地址</span></span><br><span class="line">LOG_FOLDER=/usr/local/software/logs </span><br><span class="line"><span class="meta">#</span><span class="bash">携带入参给程序</span></span><br><span class="line">RUN_ARGS=--spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p>然后呢就可以通过service 来启动项目了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service demo start|stop|restart</span><br></pre></td></tr></table></figure><p>假设日后有项目的迁移，和项目移动了位置 删除/etc/init.d下的软连接对应的 应用名即可</p><p>如果是centos7以上呢，还有另一种方法</p><p>编辑服务文件 vim /usr/lib/systemd/system/demo.service</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=demo</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/usr/local/demo</span><br><span class="line">ExecStart=/usr/local/java/bin/java -Dsun.misc.URLClassPath.disableJarChecking=true -jar /usr/local/demo.jar</span><br><span class="line">ExecStop=kill $MAINPID</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后就可以使用systemctl的形势进行操作了,关于更多 systemctl 命令的使用方法，谷哥有很多。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">systemctl start demo</span><br><span class="line">停止</span><br><span class="line">systemctl stop demo</span><br><span class="line">重启</span><br><span class="line">systemctl restart demo</span><br><span class="line">查看日志</span><br><span class="line">journalctl -u demo</span><br></pre></td></tr></table></figure><p><a name="904cded6"></a></p><h3 id="2-自定义脚本"><a href="#2-自定义脚本" class="headerlink" title="2.自定义脚本"></a>2.自定义脚本</h3><p>把脚本丢到项目文件夹, 添加执行权限即可。这里放一个我之前用的吧</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SpringBoot=$2</span><br><span class="line"></span><br><span class="line">if [ "$1" = "" ];</span><br><span class="line">then</span><br><span class="line">    echo -e "\033[0;31m 未输入操作名 \033[0m  \033[0;34m &#123;start|stop|restart|status&#125; \033[0m"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ "$SpringBoot" = "" ];</span><br><span class="line">then</span><br><span class="line">    echo -e "\033[0;31m 未输入应用名 \033[0m"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">function start()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep $SpringBoot|grep -v grep|wc -l`</span><br><span class="line">    if [ $count != 0 ];then</span><br><span class="line">        echo "$SpringBoot is running..."</span><br><span class="line">    else</span><br><span class="line">        echo "Start $SpringBoot success..."</span><br><span class="line">        nohup java -jar $SpringBoot &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stop()</span><br><span class="line">&#123;</span><br><span class="line">    echo "Stop $SpringBoot"</span><br><span class="line">    boot_id=`ps -ef |grep java|grep $SpringBoot|grep -v grep|awk '&#123;print $2&#125;'`</span><br><span class="line">    count=`ps -ef |grep java|grep $SpringBoot|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">    if [ $count != 0 ];then</span><br><span class="line">        kill $boot_id</span><br><span class="line">        count=`ps -ef |grep java|grep $SpringBoot|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">        boot_id=`ps -ef |grep java|grep $SpringBoot|grep -v grep|awk '&#123;print $2&#125;'`</span><br><span class="line">        kill -9 $boot_id</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function restart()</span><br><span class="line">&#123;</span><br><span class="line">    stop</span><br><span class="line">    sleep 2</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function status()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep $SpringBoot|grep -v grep|wc -l`</span><br><span class="line">    if [ $count != 0 ];then</span><br><span class="line">        echo "$SpringBoot is running..."</span><br><span class="line">    else</span><br><span class="line">        echo "$SpringBoot is not running..."</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    start)</span><br><span class="line">    start;;</span><br><span class="line">    stop)</span><br><span class="line">    stop;;</span><br><span class="line">    restart)</span><br><span class="line">    restart;;</span><br><span class="line">    status)</span><br><span class="line">    status;;</span><br><span class="line">    *)</span><br><span class="line"></span><br><span class="line">    echo -e "\033[0;31m Usage: \033[0m  \033[0;34m sh  $0  &#123;start|stop|restart|status&#125;  &#123;SpringBootJarName&#125; \033[0m</span><br><span class="line">\033[0;31m Example: \033[0m</span><br><span class="line">      \033[0;33m sh  $0  start esmart-test.jar \033[0m"</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>使用的时候呢放入jar同级目录，然后赋予权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x boot.sh</span><br></pre></td></tr></table></figure><p>然后就可以这样启动了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./boot.sh  start|stop|status|restart demo.jar</span><br></pre></td></tr></table></figure><p>原理是用nohup了，用法很多了可以自行谷哥</p><p><a name="Docker"></a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Docker 技术发展为微服务落地提供了更加便利的环境</p><p><a name="1.Dockfile"></a></p><h3 id="1-Dockfile"><a href="#1-Dockfile" class="headerlink" title="1.Dockfile"></a>1.Dockfile</h3><p>目前我只用过maven插件的哪种~</p><p>plugins 中添加 Docker 构建插件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后传件一个根目录<code>src/main/docker</code> 文件名就叫Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> demo.jar app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sh -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">""</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"java <span class="variable">$JAVA_OPTS</span> -Djava.security.egd=file:/dev/./urandom -jar /app.jar"</span>]</span></span><br></pre></td></tr></table></figure><ul><li>FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</li><li>VOLUME ，VOLUME 指向了一个<code>/tmp</code>的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用<code>/tmp</code>作为工作目录。这个命令的效果是：在宿主机的<code>/var/lib/docker</code>目录下创建一个临时文件并把它链接到容器中的<code>/tmp</code>目录</li><li>ADD ，拷贝文件并且重命名</li><li>ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加<code>java.security.egd</code>的系统属性指向<code>/dev/urandom</code>作为 ENTRYPOINT</li></ul><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn package -DskipTests</span><br><span class="line">mvn dockerfile:build</span><br></pre></td></tr></table></figure><p>如果只是单纯的使用下dockerfile构建一下镜像，只需要 <code>docker build -t demo</code> 一行命令即可。</p><p>其实在以后项目多的情况下下，通常建立一个Docker-Compose 然后一键的依次部署。</p><p><strong>给下总结</strong></p><p>实际项目中还需要让spring boot应用在后台运行，并且能实现启动服务器后自动启动docker容器。其思路是，通常会使用supervisord来辅助完成，思路是在supervisord的配置文件中执行shell脚本。然而这同样不完美，而最好的做法是实现“持续集成”，其思路是使用jenkins来结合git钩子，当提交新版本的代码后，jenkins去执行shell脚本pull代码，然后maven打包，接下来生成最新版的docker镜像，最后推送新镜像和运行docker容器。这边就先不说了，以后出总结。</p><p><a name="Windows"></a></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><a name="winws"></a></p><h3 id="winws"><a href="#winws" class="headerlink" title="winws"></a>winws</h3><p>windows没什么好说的我平时经常用</p><p>首先要下载winsw。它是一个单个的可执行文件，我们到<a href="https://github.com/kohsuke/winsw/releases" target="_blank" rel="noopener">Github release</a>这里就可以下载winsw了。一般来说当然是下载最新的。winsw可以运行在.NET2和.NET4两个版本上，当然如果使用Win10等比较新的系统，最好下载更新版本的.NET。</p><p>我们需要编写一个和程序同名的XML文件作为winsw的配置文件。文件大体上长这样，这是官网的例子。</p><p>下载exe文件，假设改名成demo.exe</p><p>同目录下创建一个同名的xml文件，如demo.xml</p><p>配置如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>this is my service<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-Xmx256m -jar c:\demo.jar<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>rotate<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>安装服务命令：demo.exe install</p><p>卸载服务命令：demo.exe uninstall</p><p>打开系统服务功能：运行——输入services.msc，即可看见自己命名的服务demo，设置服务为自动，并启用即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringColud（一）初始微服务</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringColud%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E5%A7%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringColud%EF%BC%88%E4%B8%80%EF%BC%89%E5%88%9D%E5%A7%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><a name="2KtQY"></a></p><h2 id="项目的演变"><a href="#项目的演变" class="headerlink" title="项目的演变"></a>项目的演变</h2><p>从个大搜索指数来看，微服务的热度在进入 2017 年后突然爆发，国内各大会议和论坛的相关讨论也如雨后春笋般层出不穷，各大一线互联网公司也纷纷将这一技术引入并在实际业务中落地。</p><p>这里选取Dubbo官网的一副图作为分析</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564062903437-71cf240f-8535-493c-87e2-d2c9cbb8aa9b.jpeg#align=left&display=inline&height=210&originHeight=210&originWidth=700&size=0&status=done&width=700" class="lazyload"></p><p>从左到右依次为</p><p><strong>单一应用</strong>=》<strong>垂直应用架构</strong>=》<strong>分布式服务架构</strong>=》<strong>流动计算架构</strong>  <br><strong>单一应用架构</strong><br>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。<br><strong>垂直应用架构</strong><br>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。<br><strong>分布式服务架构</strong><br>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。<br><strong>流动计算架构</strong><br>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><p>在开聊微服务之前，我先要你和介绍下单体应用。如果你不知道单体应用的痛，那也不会深刻理解微服务的价值。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564062903101-ffa95c5f-abd1-4811-81d3-2ef643ce809a.jpeg#align=left&display=inline&height=374&originHeight=374&originWidth=502&size=0&status=done&width=502" class="lazyload"></p><p>这里所说道的服务呢其实就是相应业务的逻辑代码，当网站流量很小时，只需一个应用，将所有功能都部署在一起，减少了部署节点和成本。这样而来呢，容易测试，容易部署，同时也会带来一些问题，开发效率低，代码维护难，如果代码出现转接，会导致后来人不知如何下手，同样呢，构建也是很头疼的一件事，小小的错误也要把所有代码重新构建一遍，稳定性和扩展性也会受到影响，可能代码中出现问题，导致整合项目崩溃，无法满足高并发下的业务需求。</p><p>想要解决上面这些问题，<strong>服务化</strong>的思想也就应运而生。</p><p><a name="17667a5f"></a></p><h3 id="什么是服务化？"><a href="#什么是服务化？" class="headerlink" title="什么是服务化？"></a>什么是服务化？</h3><p>这里我就不谈一些官方的、教条主义的概念了。在我看来，用通俗的话来讲，服务化就是把传统的单机应用中通过 JAR 包依赖产生的本地方法调用，改造成通过 RPC 接口产生的远程方法调用。一般在编写业务代码时，对于一些通用的业务逻辑，我会尽力把它抽象并独立成为专门的模块，因为这对于代码复用和业务理解都大有裨益。</p><p>在过去的项目经历里，我对此深有体会。以微博系统为例，微博既包含了内容模块，也包含了消息模块和用户模块等。其中消息模块依赖内容模块，消息模块和内容模块又都依赖用户模块。当这三个模块的代码耦合在一起，应用启动时，需要同时去加载每个模块的代码并连接对应的资源。一旦任何模块的代码出现 bug，或者依赖的资源出现问题，整个单体应用都会受到影响。</p><p>为此，首先可以把用户模块从单体应用中拆分出来，独立成一个服务部署，以 RPC 接口的形式对外提供服务。微博和消息模块调用用户接口，就从进程内的调用变成远程 RPC 调用。这样，用户模块就可以独立开发、测试、上线和运维，可以交由专门的团队来做，与主模块不耦合。进一步的可以再把消息模块也拆分出来作为独立的模块，交由专门的团队来开发和维护。</p><p>可见通过服务化，可以解决单体应用膨胀、团队开发耦合度高、协作效率低下的问题。</p><p><a name="f64d69fd"></a></p><h3 id="SOA-vs-微服务"><a href="#SOA-vs-微服务" class="headerlink" title="SOA vs 微服务"></a>SOA vs 微服务</h3><p>微服务是SOA的传承，但一个最本质的区别就在于Smart endpoints and dumb pipes，或者说是真正的分布式的、去中心化的。Smart endpoints and dumb pipes本质就是去ESB，把所有的“思考”逻辑包括路由、消息解析等放在服务内部（Smart endpoints），去掉一个大一统的ESB，服务间轻（dumb pipes）通信，是比SOA更彻底的拆分。</p><p><a name="dbcf47b3"></a></p><h3 id="微服务的提出"><a href="#微服务的提出" class="headerlink" title="微服务的提出"></a>微服务的提出</h3><p>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。</p><p>微服务的概念源于2014年3月Martin Fowler和James Lewis所写的一篇文章“Microservices”(<a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">http://martinfowler.com/articles/microservices.html</a>)。尽管“微服务”这种架构风格没有精确的定义，但其具有一些共同的特性，如围绕业务能力组织服务、自动化部署、智能端点、对语言及数据的“去集中化”控制等等。</p><p>微服务架构的思考是从与整体应用对比而产生的,是一种架构风格。根据论文中的概述呢，大概有以下几点。</p><ul><li>一系列微小的服务共同组成</li><li>跑在自己的进程里</li><li>每个服务为独立的业务开发</li><li>独立部署</li><li>分布式的管理</li></ul><p>由此可见，微服务化给服务的发布和部署，以及服务的保障带来了诸多好处。</p><p><a name="ccfee0f1"></a></p><h3 id="简单的微服务架构"><a href="#简单的微服务架构" class="headerlink" title="简单的微服务架构"></a>简单的微服务架构</h3><p>微服务听上去是不错，听上去好像都不错，具体怎么落地啊？这需要回答下面几个问题：</p><ul><li>客户端如何访问这些服务？</li><li>服务之间如何通信？</li><li>这么多服务，怎么找？</li><li>服务挂了怎么办？</li></ul><p><a name="c42c3e32"></a></p><h4 id="这么多服务，怎么找"><a href="#这么多服务，怎么找" class="headerlink" title="这么多服务，怎么找?"></a>这么多服务，怎么找?</h4><p>在微服务架构中，一般每一个服务都是有多个拷贝，来做负载均衡。一个服务随时可能下线，也可能应对临时访问压力增加新的服务节点。服务之间如何相互 感知？服务如何管理？这就是服务发现的问题了。一般有两类做法，也各有优缺点。基本都是通过zookeeper等类似技术做服务注册信息的分布式管理。当 服务上线时，服务提供者将自己的服务信息注册到ZK（或类似框架），并通过心跳维持长链接，实时更新链接信息。服务调用者通过ZK寻址，根据可定制算法， 找到一个服务，还可以将服务信息缓存在本地以提高性能。当服务下线时，ZK会发通知给服务客户端。</p><ul><li>客户端做：优点是架构简单，扩展灵活，只对服务注册器依赖。缺点是客户端要维护所有调用服务的地址，有技术难度，一般大公司都有成熟的内部框架支持，比如Dubbo。</li><li>服务端做：优点是简单，所有服务对于前台调用方透明，一般在小公司在云服务上部署的应用采用的比较多</li></ul><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564062902386-0cf9bfeb-fbca-4892-9168-a9c35e1bfd69.jpeg#align=left&display=inline&height=347&originHeight=347&originWidth=836&size=0&status=done&width=836" class="lazyload"></p><p><a name="5aa7f524"></a></p><h4 id="客户端如何访问这些服务？"><a href="#客户端如何访问这些服务？" class="headerlink" title="客户端如何访问这些服务？"></a>客户端如何访问这些服务？</h4><p>通常，一个大系统里会有很多职责单一的微服务，如果门户系统或移动 APP 来调用这些微服务的 API 时，至少要做好两件事</p><ul><li>由统一的入口来调用微服务的 API</li><li>API 鉴权</li></ul><p>我个人认为呢，是是为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564062902344-7241a4f2-2516-4344-8ed0-ae6ed1256f6e.jpeg#align=left&display=inline&height=466&originHeight=466&originWidth=658&size=0&status=done&width=658" class="lazyload"></p><p><a name="3ce14545"></a></p><h4 id="服务之间如何通信"><a href="#服务之间如何通信" class="headerlink" title="服务之间如何通信?"></a>服务之间如何通信?</h4><p>因为所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通行就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式</p><ul><li>同步调用<ul><li>REST（JAX-RS，Spring Boot）</li><li>RPC（Thrift, Dubbo）</li></ul></li><li>异步消息调用(Kafka, Rabbitmq)</li></ul><p>一般同步调用比较简单，一致性强，但是容易出调用问题，性能体验上也会差些，特别是调用层次多的时候。RESTful和RPC的比较也是一个很有意 思的话题。一般REST基于HTTP，更容易实现，更容易被接受，服务端实现技术也更灵活些，各个语言都能支持，同时能跨客户端，对客户端没有特殊的要 求，只要封装了HTTP的SDK就能调用，所以相对使用的广一些。RPC也有自己的优点，传输协议更高效，安全更可控，特别在一个公司内部，如果有统一个 的开发规范和统一的服务框架时，他的开发效率优势更明显些。就看各自的技术积累实际条件，自己的选择了。</p><p>而异步消息的方式在分布式系统中有特别广泛的应用，他既能减低调用服务之间的耦合，又能成为调用之间的缓冲，确保消息积压不会冲垮被调用方，同时能 保证调用方的服务体验，继续干自己该干的活，不至于被后台性能拖慢。不过需要付出的代价是一致性的减弱，需要接受数据最终一致性；还有就是后台服务一般要 实现幂等性，因为消息发送出于性能的考虑一般会有重复（保证消息的被收到且仅收到一次对性能是很大的考验）。最后就是必须引入一个独立的broker，如 果公司内部没有技术积累，对broker分布式管理也是一个很大的挑战。不过呢幸好我们有棒棒哒 springColud。<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/jpeg/351829/1564062902880-2fcdb951-043e-4e36-b60e-b12864c5c684.jpeg#align=left&display=inline&height=590&originHeight=590&originWidth=658&size=0&status=done&width=658" class="lazyload"></p><p><a name="2d696b53"></a></p><h4 id="这么多服务，服务挂了怎么办？"><a href="#这么多服务，服务挂了怎么办？" class="headerlink" title="这么多服务，服务挂了怎么办？"></a>这么多服务，服务挂了怎么办？</h4><p>举个例子，把所有鸡蛋放在一个篮子里，一荣俱荣，一损俱损。而分布式最大的特性就是网络是不可靠的。通过微服务拆分能降低这个风险，不过如果没有特别的保障，结局肯定是悲剧性的。我们刚遇到一个线上故障就是一个很不起眼的SQL计数功能，在访问量上升时，导致数据库load彪高，影响了所在应用的性能，从而影响所有调用这个应用服务的前台应用。所以当我们的系统是由一系列的服务调用链组成的时候，我们 必须确保任一环节出问题都不至于影响整体链路。相应的手段有很多</p><ul><li>重试机制</li><li>限流</li><li>熔断机制</li><li>负载均衡</li><li>降级（本地缓存）</li></ul><p><a name="db519b2c"></a></p><h3 id="微服务架构的优点"><a href="#微服务架构的优点" class="headerlink" title="微服务架构的优点"></a>微服务架构的优点</h3><p>微服务架构有很多重要的优点。首先，它解决了复杂性问题。它将单体应用分解为一组服务。虽然功能总量不变，但应用程序已被分解为可管理的模块或服务。这些服务定义了明确的RPC或消息驱动的API边界。微服务架构强化了应用模块化的水平，而这通过单体代码库很难实现。因此，微服务开发的速度要快很多，更容易理解和维护。</p><p>其次，这种体系结构使得每个服务都可以由专注于此服务的团队独立开发。只要符合服务API契约，开发人员可以自由选择开发技术。这就意味着开发人员可以采用新技术编写或重构服务，由于服务相对较小，所以这并不会对整体应用造成太大影响。</p><p>第三，微服务架构可以使每个微服务独立部署。开发人员无需协调对服务升级或更改的部署。这些更改可以在测试通过后立即部署。所以微服务架构也使得CI／CD成为可能。</p><p>最后，微服务架构使得每个服务都可独立扩展。我们只需定义满足服务部署要求的配置、容量、实例数量等约束条件即可。</p><p><a name="f9d12847"></a></p><h3 id="微服务架构的缺点和挑战"><a href="#微服务架构的缺点和挑战" class="headerlink" title="微服务架构的缺点和挑战"></a>微服务架构的缺点和挑战</h3><p>实际上并不存在完美的架构，微服务架构也会给我们带来新的问题和挑战。其中一个就和它的名字类似，微服务强调了服务大小，但实际上这并没有一个统一的标准。业务逻辑应该按照什么规则划分为微服务，这本身就是一个经验工程。有些开发者主张10-100行代码就应该建立一个微服务。虽然建立小型服务是微服务架构崇尚的，但要记住，微服务是达到目的的手段，而不是目标。微服务的目标是充分分解应用程序，以促进敏捷开发和持续集成部署。</p><p>微服务的另一个主要缺点是微服务的分布式特点带来的复杂性。开发人员需要基于RPC或者消息实现微服务之间的调用和通信，而这就使得服务之间的发现、服务调用链的跟踪和质量问题变得的相当棘手。</p><p>微服务的另一个挑战是分区的数据库体系和分布式事务。更新多个业务实体的业务交易相当普遍。这些类型的事务在单体应用中实现非常简单，因为单体应用往往只存在一个数据库。但在微服务架构下，不同服务可能拥有不同的数据库。CAP原理的约束，使得我们不得不放弃传统的强一致性，而转而追求最终一致性，这个对开发人员来说是一个挑战。</p><p>微服务架构对测试也带来了很大的挑战。传统的单体WEB应用只需测试单一的REST API即可，而对微服务进行测试，需要启动它依赖的所有其他服务。这种复杂性不可低估。</p><p>微服务的另一大挑战是跨多个服务的更改。比如在传统单体应用中，若有A、B、C三个服务需要更改，A依赖B，B依赖C。我们只需更改相应的模块，然后一次性部署即可。但是在微服务架构中，我们需要仔细规划和协调每个服务的变更部署。我们需要先更新C，然后更新B，最后更新A。</p><p>部署基于微服务的应用也要复杂得多。单体应用可以简单的部署在一组相同的服务器上，然后前端使用负载均衡即可。每个应用都有相同的基础服务地址，例如数据库和消息队列。而微服务由不同的大量服务构成。每种服务可能拥有自己的配置、应用实例数量以及基础服务地址。这里就需要不同的配置、部署、扩展和监控组件。此外，我们还需要服务发现机制，以便服务可以发现与其通信的其他服务的地址。因此，成功部署微服务应用需要开发人员有更好地部署策略和高度自动化的水平。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062904031-626d2a48-0efd-4fb1-a2c1-f8079a26696e.png#align=left&display=inline&height=616&originHeight=616&originWidth=1038&size=0&status=done&width=1038" class="lazyload"></p><p><a href="http://microservices.io/patterns/microservices.html" target="_blank" rel="noopener">这里</a>有一个图非常好的总结微服务架构需要考虑的问题，包括:</p><ul><li>API Gateway</li><li>服务间调用</li><li>服务发现</li><li>服务容错</li><li>服务部署</li><li>数据调用</li></ul><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062902478-7f871518-68c5-4d30-bfeb-634a6ff445d3.png#align=left&display=inline&height=719&originHeight=719&originWidth=839&size=0&status=done&width=839" class="lazyload"></p><p><a name="25f9c7fa"></a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>对于大的互联网公司，微服务架构是血液，是习惯，每家公司都有自己的套路和架构，细节有不同，但是核心理念是通的。</li><li>对于一般的公司而言，实践微服务有非常大的技术挑战，于是乎才有了这么多IT供应商考虑这里的商机。微服务比较适合未来有一定的扩展复杂度，且有 很大用户增量预期的应用，说人话就是新兴的互联网公司。创业初期，不可能买大量的机器或者很贵的机器，但是又必须考虑应对成功后的巨量的用户，微服务架构 成了最好的选择。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装gitlab</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85gitlab/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85gitlab/</url>
      
        <content type="html"><![CDATA[<p>tags: [Centos7,Gitlab]<br>categories:  环境配置</p><hr><p><a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab</a>是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p><ul><li>社区版基于MIT license开源完全免费</li><li>无用户，协作和仓库限制</li><li>保护你的源码安全</li><li>管理仓库，用户与访问权限<br><a name="b57fff0d"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2></li></ul><p>gitlab接触了一段时间，觉得是一个很不错的开源产品（gitlab的社区版），值得我整理一篇部署教程作为记录。</p><p>安装全程选择的用户为root。</p><p>操作系统：centos7（minimal，<code>www.centos.org</code>下载的包是CentOS-7-x86_64-Minimal-1708.iso）</p><p><a name="d92ec616"></a></p><h3 id="更换阿里yum"><a href="#更换阿里yum" class="headerlink" title="更换阿里yum"></a><strong>更换阿里yum</strong></h3><p>1）下载wget</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure><p>2）备份默认的yum</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d /etc/yum.repos.d.backup</span><br></pre></td></tr></table></figure><p>3）设置新的yum目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p>4）下载阿里yum配置到该目录中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>5）重建缓存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>6）升级所有包（改变软件设置和系统设置，系统版本内核都升级，故需要几分钟耐心等待）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure><p><a name="9a92487b"></a></p><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a><strong>安装vim</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure><p><a name="927d0791"></a></p><h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab-ce.repo</span><br></pre></td></tr></table></figure><p>复制以下内容到上面的文件内</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure><p><a name="8b734416"></a></p><h2 id="安装GitLab社区版"><a href="#安装GitLab社区版" class="headerlink" title="安装GitLab社区版"></a>安装GitLab社区版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce        #自动安装最新版</span><br><span class="line">yum install gitlab-ce-x.x.x    #安装指定版本</span><br></pre></td></tr></table></figure><p><a name="4640f1d3"></a></p><h3 id="GitLab常用命令"><a href="#GitLab常用命令" class="headerlink" title="GitLab常用命令"></a>GitLab常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl start    <span class="comment"># 启动所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl stop        <span class="comment"># 停止所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl restart        <span class="comment"># 重启所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl status        <span class="comment"># 查看服务状态；</span></span><br><span class="line">gitlab-ctl reconfigure        <span class="comment"># 启动服务；</span></span><br><span class="line">vim /etc/gitlab/gitlab.rb        <span class="comment"># 修改默认的配置文件；</span></span><br><span class="line">gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span> --trace    <span class="comment"># 检查gitlab；</span></span><br><span class="line">gitlab-ctl tail        <span class="comment"># 查看日志；</span></span><br></pre></td></tr></table></figure><p><a name="9feac69f"></a></p><h3 id="修改配置文件gitlab-rb"><a href="#修改配置文件gitlab-rb" class="headerlink" title="修改配置文件gitlab.rb"></a>修改配置文件gitlab.rb</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p>将external_url变量的地址修改为gitlab所在centos的ip地址。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">external_url <span class="string">'http://192.168.9.100'</span></span><br></pre></td></tr></table></figure><p>因为修改了配置文件，故需要重新加载配置内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure><p>查看gitlab版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">head -1 /opt/gitlab/version-manifest.txt</span><br></pre></td></tr></table></figure><p><a name="c2454fac"></a></p><h2 id="设置管理员密码"><a href="#设置管理员密码" class="headerlink" title="设置管理员密码"></a>设置管理员密码</h2><p>管理员账号登录的用户名：root</p><p>（虽然登录后管理员的用户名为Administrator，但是实际登录的用户名是root）</p><p>方法一：网页方式</p><p>浏览器访问gitlab所在的ip，输入密码后点击 “Change your password”（如果进行汉化，点击“修改密码”）。</p><p>方法二：指令方式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-rails console production</span><br></pre></td></tr></table></figure><p>稍等一会后会出现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">irb(main):001:0&gt; user = User.where(id: 1).first     // id为1的是超级管理员</span><br><span class="line">irb(main):002:0&gt;user.password = <span class="string">'yourpassword'</span>      // 密码必须至少8个字符</span><br><span class="line">irb(main):003:0&gt;user.save!                          // 如没有问题 返回<span class="literal">true</span></span><br><span class="line"><span class="built_in">exit</span>                                                // 退出</span><br></pre></td></tr></table></figure><p><a name="f411d0f1"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>为啥不说怎么装啥啥啥中文包呢？ 因为最新版本的gitlab已经支持国际化语言啦啦啦</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十六）优雅的整合Shiro</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E4%BC%98%E9%9B%85%E7%9A%84%E6%95%B4%E5%90%88Shiro/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E4%BC%98%E9%9B%85%E7%9A%84%E6%95%B4%E5%90%88Shiro/</url>
      
        <content type="html"><![CDATA[<p><strong>Apache Shiro</strong>是一个功能强大且易于使用的Java安全框架，可执行身份验证，授权，加密和会话管理。借助Shiro易于理解的API，您可以快速轻松地保护任何应用程序 - 从最小的移动应用程序到最大的Web和企业应用程序。网上找到大部分文章都是以前SpringMVC下的整合方式，很多人都不知道shiro提供了官方的starter可以方便地跟SpringBoot整合。</p><p>请看shiro官网关于springboot整合shiro的链接：<a href="https://shiro.apache.org/spring-boot.html" target="_blank" rel="noopener">Integrating Apache Shiro into Spring-Boot Applications</a></p><p><a name="0173fdd9"></a></p><h2 id="整合准备"><a href="#整合准备" class="headerlink" title="整合准备"></a>整合准备</h2><p>这篇文档的介绍也相当简单。我们只需要按照文档说明，然后在spring容器中注入一个我们自定义的<code>Realm</code>，shiro通过这个realm就可以知道如何获取用户信息来处理<code>鉴权（Authentication）</code>，如何获取用户角色、权限信息来处理<code>授权（Authorization）</code>。如果是web应用程序的话需要引入<code>shiro-spring-boot-web-starter</code>，单独的应用程序的话则引入<code>shiro-spring-boot-starter</code>。</p><p><a name="6860b943"></a></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0-RC2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="e0e14a34"></a></p><h3 id="用户实体"><a href="#用户实体" class="headerlink" title="用户实体"></a>用户实体</h3><p>首先创建一个用户的实体，用来做认证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long uid;       <span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">private</span> String uname;   <span class="comment">// 登录名，不可改</span></span><br><span class="line">    <span class="keyword">private</span> String nick;    <span class="comment">// 用户昵称，可改</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;     <span class="comment">// 已加密的登录密码</span></span><br><span class="line">    <span class="keyword">private</span> String salt;    <span class="comment">// 加密盐值</span></span><br><span class="line">    <span class="keyword">private</span> Date created;   <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;   <span class="comment">// 修改时间</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();    <span class="comment">//用户所有角色值，用于shiro做角色权限的判断</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; perms = <span class="keyword">new</span> HashSet&lt;&gt;();    <span class="comment">//用户所有权限值，用于shiro做资源权限的判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里了为了方便，就不去数据库读取了，方便测试我们把，权限信息，角色信息，认证信息都静态模拟下。</p><p><a name="Resources"></a></p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourcesService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟根据用户id查询返回用户的所有权限</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getResourcesByUserId</span><span class="params">(Long uid)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; perms = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//三种编程语言代表三种角色：js程序员、java程序员、c++程序员</span></span><br><span class="line">        <span class="comment">//docker的权限</span></span><br><span class="line">        perms.add(<span class="string">"docker:run"</span>);</span><br><span class="line">        perms.add(<span class="string">"docker:ps"</span>);</span><br><span class="line">        <span class="comment">//maven的权限</span></span><br><span class="line">        perms.add(<span class="string">"mvn:debug"</span>);</span><br><span class="line">        perms.add(<span class="string">"mvn:test"</span>);</span><br><span class="line">        perms.add(<span class="string">"mvn:install"</span>);</span><br><span class="line">        <span class="comment">//node的权限</span></span><br><span class="line">        perms.add(<span class="string">"npm:clean"</span>);</span><br><span class="line">        perms.add(<span class="string">"npm:run"</span>);</span><br><span class="line">        perms.add(<span class="string">"npm:test"</span>);</span><br><span class="line">        <span class="keyword">return</span> perms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Role"></a></p><h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟根据用户id查询返回用户的所有角色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getRolesByUserId</span><span class="params">(Long uid)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//这里用三个工具代表角色</span></span><br><span class="line">        roles.add(<span class="string">"docker"</span>);</span><br><span class="line">        roles.add(<span class="string">"maven"</span>);</span><br><span class="line">        roles.add(<span class="string">"node"</span>);</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="User"></a></p><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟查询返回用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(uname);</span><br><span class="line">        user.setNick(uname + <span class="string">"NICK"</span>);</span><br><span class="line">        user.setPwd(<span class="string">"J/ms7qTJtqmysekuY8/v1TAS+VKqXdH5sB7ulXZOWho="</span>);<span class="comment">//密码明文是123456</span></span><br><span class="line">        user.setSalt(<span class="string">"wxKYXuTPST5SG0jMQzVPsg=="</span>);<span class="comment">//加密密码的盐值</span></span><br><span class="line">        user.setUid(<span class="keyword">new</span> Random().nextLong());<span class="comment">//随机分配一个id</span></span><br><span class="line">        user.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="b7158a42"></a></p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>Shiro 从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource ， 即安全数据源。</p><p><a name="Realm"></a></p><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.cache.MySimpleByteSource;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.ResourcesService;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.RoleService;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Sha256Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个类是参照JDBCRealm写的，主要是自定义了如何查询用户信息，如何查询用户的角色和权限，如何校验密码等逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResourcesService resourcesService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告诉shiro如何根据获取到的用户信息中的密码和盐值来校验密码</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置用于匹配密码的CredentialsMatcher</span></span><br><span class="line">        HashedCredentialsMatcher hashMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        hashMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);</span><br><span class="line">        hashMatcher.setStoredCredentialsHexEncoded(<span class="keyword">false</span>);</span><br><span class="line">        hashMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">this</span>.setCredentialsMatcher(hashMatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义如何获取用户的角色和权限的逻辑，给shiro做权限判断</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//null usernames are invalid</span></span><br><span class="line">        <span class="keyword">if</span> (principals == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthorizationException(<span class="string">"PrincipalCollection method argument cannot be null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        User user = (User) getAvailablePrincipal(principals);</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        System.out.println(<span class="string">"获取角色信息："</span> + user.getRoles());</span><br><span class="line">        System.out.println(<span class="string">"获取权限信息："</span> + user.getPerms());</span><br><span class="line">        info.setRoles(user.getRoles());</span><br><span class="line">        info.setStringPermissions(user.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义如何获取用户信息的业务逻辑，给shiro做登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken upToken = (UsernamePasswordToken) token;</span><br><span class="line">        String username = upToken.getUsername();</span><br><span class="line">        <span class="comment">// Null username is invalid</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountException(<span class="string">"请输入用户名"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        User userDB = userService.findUserByName(username);</span><br><span class="line">        <span class="keyword">if</span> (userDB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询用户的角色和权限存到SimpleAuthenticationInfo中，这样在其它地方</span></span><br><span class="line">        <span class="comment">//SecurityUtils.getSubject().getPrincipal()就能拿出用户的所有信息，包括角色和权限</span></span><br><span class="line">        Set&lt;String&gt; roles = roleService.getRolesByUserId(userDB.getUid());</span><br><span class="line">        Set&lt;String&gt; perms = resourcesService.getResourcesByUserId(userDB.getUid());</span><br><span class="line">        userDB.getRoles().addAll(roles);</span><br><span class="line">        userDB.getPerms().addAll(perms);</span><br><span class="line">        SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(userDB, userDB.getPwd(), getName());</span><br><span class="line">        <span class="keyword">if</span> (userDB.getSalt() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            info.setCredentialsSalt(ByteSource.Util.bytes(userDB.getSalt()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bfbbde08"></a></p><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>然后呢在只需要吧这个Realm注册到Spring容器中就可以啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   CustomRealm realm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line">   <span class="keyword">return</span> realm;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保证实现了Shiro内部lifecycle函数的bean执行 也是shiro的生命周期，注入LifecycleBeanPostProcessor</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着配置安全管理器，SecurityManager是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(customRealm());</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外Shiro是一堆一堆的过滤链，所以要对shiro 的过滤进行设置，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultShiroFilterChainDefinition chainDefinition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">    chainDefinition.addPathDefinition(<span class="string">"favicon.ico"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    chainDefinition.addPathDefinition(<span class="string">"/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    chainDefinition.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"user"</span>);</span><br><span class="line">    <span class="keyword">return</span> chainDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要自定义过滤链那么 <code>ShiroFilterChainDefinition</code> 就不ok了 我们就要换个写法 定义一个 <code>ShiroFilterFactoryBean</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 不需要在此处配置权限页面,因为上面的ShiroFilterFactoryBean已经配置过,</span></span><br><span class="line"><span class="comment">  * 但是此处必须存在,因为shiro-spring-boot-web-starter或查找此Bean,没有会报错</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* *********************************************shiro过滤连**********************************************/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">     ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">     shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">     <span class="comment">//拦截器</span></span><br><span class="line">     Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">     <span class="comment">// 添加自己的过滤器并且取名</span></span><br><span class="line">     Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">     filterMap.put(<span class="string">"my"</span>, <span class="keyword">new</span> MyFilter());</span><br><span class="line">     shiroFilterFactoryBean.setFilters(filterMap);</span><br><span class="line">     filterChainDefinitionMap.put(<span class="string">"login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">     <span class="comment">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边</span></span><br><span class="line">     filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">     shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">     <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a name="yml"></a></p><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><p>这里要说明下由于我们引入的是<code>shiro-spring-boot-web-starter</code>，官方对配置进行了一系列的简化，并加入了一些自动配置项，所以我们要在yml中加入</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">shiro:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">loginUrl:</span> <span class="string">/login</span></span><br></pre></td></tr></table></figure><p>除此之外呢还有这些属性</p><table><thead><tr><th>键</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>shiro.enabled</td><td><code>true</code></td><td>启用Shiro的Spring模块</td></tr><tr><td>shiro.web.enabled</td><td><code>true</code></td><td>启用Shiro的Spring Web模块</td></tr><tr><td>shiro.annotations.enabled</td><td><code>true</code></td><td>为Shiro的注释启用Spring支持</td></tr><tr><td>shiro.sessionManager.deleteInvalidSessions</td><td><code>true</code></td><td>从会话存储中删除无效会话</td></tr><tr><td>shiro.sessionManager.sessionIdCookieEnabled</td><td><code>true</code></td><td>启用会话ID到cookie，用于会话跟踪</td></tr><tr><td>shiro.sessionManager.sessionIdUrlRewritingEnabled</td><td><code>true</code></td><td>启用会话URL重写支持</td></tr><tr><td>shiro.userNativeSessionManager</td><td><code>false</code></td><td>如果启用，Shiro将管理HTTP会话而不是容器</td></tr><tr><td>shiro.sessionManager.cookie.name</td><td><code>JSESSIONID</code></td><td>会话cookie名称</td></tr><tr><td>shiro.sessionManager.cookie.maxAge</td><td><code>-1</code></td><td>会话cookie最大年龄</td></tr><tr><td>shiro.sessionManager.cookie.domain</td><td>空值</td><td>会话cookie域</td></tr><tr><td>shiro.sessionManager.cookie.path</td><td>空值</td><td>会话cookie路径</td></tr><tr><td>shiro.sessionManager.cookie.secure</td><td><code>false</code></td><td>会话cookie安全标志</td></tr><tr><td>shiro.rememberMeManager.cookie.name</td><td><code>rememberMe</code></td><td>RememberMe cookie名称</td></tr><tr><td>shiro.rememberMeManager.cookie.maxAge</td><td>一年</td><td>RememberMe cookie最大年龄</td></tr><tr><td>shiro.rememberMeManager.cookie.domain</td><td>空值</td><td>RememberMe cookie域名</td></tr><tr><td>shiro.rememberMeManager.cookie.path</td><td>空值</td><td>RememberMe cookie路径</td></tr><tr><td>shiro.rememberMeManager.cookie.secure</td><td><code>false</code></td><td>RememberMe cookie安全标志</td></tr><tr><td>shiro.loginUrl</td><td><code>/login.jsp</code></td><td>未经身份验证的用户重定向到登录页面时使用的登录URL</td></tr><tr><td>shiro.successUrl</td><td><code>/</code></td><td>用户登录后的默认登录页面（如果在当前会话中找不到替代）</td></tr><tr><td>shiro.unauthorizedUrl</td><td>空值</td><td>页面将用户重定向到未授权的位置（403页）</td></tr></tbody></table><p>在Controller中添加登录方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String userName, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String Password) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userName, Password);</span><br><span class="line">    token.setRememberMe(<span class="keyword">true</span>);<span class="comment">// 默认不记住密码</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        currentUser.login(token); <span class="comment">//登录</span></span><br><span class="line">        log.info(<span class="string">"==========登录成功======="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"登录成功"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        log.info(<span class="string">"==========用户名不存在======="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"用户名不存在"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DisabledAccountException e) &#123;</span><br><span class="line">        log.info(<span class="string">"==========您的账户已经被冻结======="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"您的账户已经被冻结"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">        log.info(<span class="string">"==========密码错误======="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExcessiveAttemptsException e) &#123;</span><br><span class="line">        log.info(<span class="string">"==========您错误的次数太多了吧,封你半小时======="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"您错误的次数太多了吧,封你半小时"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        log.info(<span class="string">"==========运行异常======="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"运行异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了整合认证的流程，，如果token信息与数据库表总username和password数据一致，则该用户身份认证成功。</p><p><a name="1abcfdd7"></a></p><h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><p><a name="191ffd52"></a></p><h3 id="只用注解控制鉴权授权"><a href="#只用注解控制鉴权授权" class="headerlink" title="只用注解控制鉴权授权"></a>只用注解控制鉴权授权</h3><p>使用注解的优点是控制的粒度细，并且非常适合用来做基于资源的权限控制。<br />切记加入aop</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只用注解的话非常简单。我们只需要使用url配置配置一下所以请求路径都可以匿名访问：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DefaultShiroFilterChainDefinition chain = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">    <span class="comment">//这里配置所有请求路径都可以匿名访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    <span class="comment">// 这另一种配置方式。但是还是用上面那种吧，容易理解一点。</span></span><br><span class="line">    <span class="comment">// chainDefinition.addPathDefinition("/**", "authcBasic[permissive]");</span></span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在控制器类上使用shiro提供的种注解来做控制：</p><table><thead><tr><th>注解</th><th>功能</th></tr></thead><tbody><tr><td><a href="/RequiresGuest">@RequiresGuest </a></td><td>只有游客可以访问</td></tr><tr><td>@RequiresAuthentication</td><td>需要登录才能访问</td></tr><tr><td><a href="/RequiresUser">@RequiresUser </a></td><td>已登录的用户或“记住我”的用户能访问</td></tr><tr><td><a href="/RequiresRoles">@RequiresRoles </a></td><td>已登录的用户需具有指定的角色才能访问</td></tr><tr><td><a href="/RequiresPermissions">@RequiresPermissions </a></td><td>已登录的用户需具有指定的权限才能访问</td></tr></tbody></table><p>示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于TestController类上没有加@RequiresAuthentication注解，</span></span><br><span class="line">    <span class="comment">// 不要求用户登录才能调用接口。所以hello()和a1()接口都是可以匿名访问的</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring boot"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 游客可访问，这个有点坑，游客的意思是指：subject.getPrincipal()==null</span></span><br><span class="line">    <span class="comment">// 所以用户在未登录时subject.getPrincipal()==null，接口可访问</span></span><br><span class="line">    <span class="comment">// 而用户登录后subject.getPrincipal()！=null，接口不可访问</span></span><br><span class="line">    <span class="meta">@RequiresGuest</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/guest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">guest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"@RequiresGuest"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已登录用户才能访问，这个注解比@RequiresUser更严格</span></span><br><span class="line">    <span class="comment">// 如果用户未登录调用该接口，会抛出UnauthenticatedException</span></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authn"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"@RequiresAuthentication"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已登录用户或“记住我”的用户可以访问</span></span><br><span class="line">    <span class="comment">// 如果用户未登录或不是“记住我”的用户调用该接口，UnauthenticatedException</span></span><br><span class="line">    <span class="meta">@RequiresUser</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"@RequiresUser"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要求登录的用户具有mvn:build权限才能访问</span></span><br><span class="line">    <span class="comment">// 由于UserService模拟返回的用户信息中有该权限，所以这个接口可以访问</span></span><br><span class="line">    <span class="comment">// 如果没有登录，UnauthenticatedException</span></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"mvn:install"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/mvnInstall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mvnInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"mvn:install"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要求登录的用户具有mvn:build权限才能访问</span></span><br><span class="line">    <span class="comment">// 由于UserService模拟返回的用户信息中【没有】该权限，所以这个接口【不可以】访问</span></span><br><span class="line">    <span class="comment">// 如果没有登录，UnauthenticatedException</span></span><br><span class="line">    <span class="comment">// 如果登录了，但是没有这个权限，会报错UnauthorizedException</span></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"gradleBuild"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/gradleBuild"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gradleBuild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gradleBuild"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要求登录的用户具有js角色才能访问</span></span><br><span class="line">    <span class="comment">// 由于UserService模拟返回的用户信息中有该角色，所以这个接口可访问</span></span><br><span class="line">    <span class="comment">// 如果没有登录，UnauthenticatedException</span></span><br><span class="line">    <span class="meta">@RequiresRoles</span>(<span class="string">"docker"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/docker"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">docker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"docker programmer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要求登录的用户具有js角色才能访问</span></span><br><span class="line">    <span class="comment">// 由于UserService模拟返回的用户信息中有该角色，所以这个接口可访问</span></span><br><span class="line">    <span class="comment">// 如果没有登录，UnauthenticatedException</span></span><br><span class="line">    <span class="comment">// 如果登录了，但是没有该角色，会抛出UnauthorizedException</span></span><br><span class="line">    <span class="meta">@RequiresRoles</span>(<span class="string">"python"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/python"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">python</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"python programmer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong> 解决spring aop和注解配置一起使用的bug。如果您在使用shiro注解配置的同时，引入了spring aop的starter，会有一个奇怪的问题，导致shiro注解的请求，不能被映射，需加入以下配置：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* setUsePrefix(false)用于解决一个奇怪的bug。在引入spring aop的情况下。</span></span><br><span class="line"><span class="comment">* 在<span class="doctag">@Controller</span>注解的类的方法中加入<span class="doctag">@RequiresRole</span>等shiro注解，会导致该方法无法映射请求，</span></span><br><span class="line"><span class="comment">* 导致返回404。加入这项配置能解决这个bug</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultAdvisorAutoProxyCreator <span class="title">getDefaultAdvisorAutoProxyCreator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator=<span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setUsePrefix(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="519fe5e3"></a></p><h3 id="只用url配置控制鉴权授权"><a href="#只用url配置控制鉴权授权" class="headerlink" title="只用url配置控制鉴权授权"></a>只用url配置控制鉴权授权</h3><p>shiro提供和多个默认的过滤器，我们可以用这些过滤器来配置控制指定url的权限：</p><table><thead><tr><th>配置缩写</th><th>对应的过滤器</th><th>功能</th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>指定url可以匿名访问</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>指定url需要form表单登录，默认会从请求中获取<code>username</code>、<code>password</code>,<code>rememberMe</code>等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录逻辑的，自己写的话出错返回的信息都可以定制嘛。</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>指定url需要basic登录</td></tr><tr><td>logout</td><td>LogoutFilter</td><td>登出过滤器，配置指定url就可以实现退出功能，非常方便</td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>禁止创建会话</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>需要指定权限才能访问</td></tr><tr><td>port</td><td>PortFilter</td><td>需要指定端口才能访问</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>将http请求方法转化成相应的动词来构造一个权限字符串，这个感觉意义不大，有兴趣自己看源码的注释</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>需要指定角色才能访问</td></tr><tr><td>ssl</td><td>SslFilter</td><td>需要https请求才能访问</td></tr><tr><td>user</td><td>UserFilter</td><td>需要已登录或“记住我”的用户才能访问</td></tr></tbody></table><p>在spring容器中使用<code>ShiroFilterChainDefinition</code>来控制所有url的鉴权和授权。优点是配置粒度大，对多个Controller做鉴权授权的控制。下面是栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultShiroFilterChainDefinition chain = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这里小心踩坑！我在application.yml中设置的context-path: /api/v1</span></span><br><span class="line"><span class="comment">    * 但经过实际测试，过滤器的过滤路径，是context-path下的路径，无需加上"/api/v1"前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//访问控制</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/user/login"</span>, <span class="string">"anon"</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/page/401"</span>, <span class="string">"anon"</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/page/403"</span>, <span class="string">"anon"</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/hello"</span>, <span class="string">"anon"</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/changePwd"</span>, <span class="string">"authc"</span>);<span class="comment">//需要登录</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/user"</span>, <span class="string">"user"</span>);<span class="comment">//已登录或“记住我”的用户可以访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/mvnBuild"</span>, <span class="string">"authc,perms[mvn:install]"</span>);<span class="comment">//需要mvn:build权限</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/npmClean"</span>, <span class="string">"authc,perms[npm:clean]"</span>);<span class="comment">//需要npm:clean权限</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/docker"</span>, <span class="string">"authc,roles[docker]"</span>);<span class="comment">//需要js角色</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/my/python"</span>, <span class="string">"authc,roles[python]"</span>);<span class="comment">//需要python角色</span></span><br><span class="line">    <span class="comment">// shiro 提供的登出过滤器，访问指定的请求，就会执行登录，默认跳转路径是"/"，或者是"shiro.loginUrl"配置的内容</span></span><br><span class="line">    <span class="comment">// 由于application-shiro.yml中配置了 shiro:loginUrl: /page/401，返回会返回对应的json内容</span></span><br><span class="line">    <span class="comment">// 可以结合/user/login和/t1/js接口来测试这个/t4/logout接口是否有效</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/logout"</span>, <span class="string">"anon,logout"</span>);</span><br><span class="line">    <span class="comment">//其它路径均需要登录</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="141b45a4"></a></p><h3 id="二者结合，url配置控制鉴权，注解控制授权"><a href="#二者结合，url配置控制鉴权，注解控制授权" class="headerlink" title="二者结合，url配置控制鉴权，注解控制授权"></a>二者结合，url配置控制鉴权，注解控制授权</h3><p>就个人而言，我是非常喜欢注解方式的。但是两种配置方式灵活结合，才是适应不同应用场景的最佳实践。只用注解或只用url配置，会带来一些比较累的工作。<code>用url配置控制鉴权，实现粗粒度控制；用注解控制授权，实现细粒度控制</code>。下面是示例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里统一做鉴权，即判断哪些请求路径需要用户登录，哪些请求路径不需要用户登录。</span></span><br><span class="line"><span class="comment"> * 这里只做鉴权，不做权限控制，因为权限用注解来做。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultShiroFilterChainDefinition chain = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">    <span class="comment">//哪些请求可以匿名访问</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/user/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    chain.addPathDefinition(<span class="string">"/page/401"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    chain.addPathDefinition(<span class="string">"/page/403"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    chain.addPathDefinition(<span class="string">"/hello"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    chain.addPathDefinition(<span class="string">"/guest"</span>, <span class="string">"anon"</span>);</span><br><span class="line">    <span class="comment">//除了以上的请求外，其它请求都需要登录</span></span><br><span class="line">    chain.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于ShiroConfig中配置了该路径可以匿名访问，所以这接口不需要登录就能访问</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring boot"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果ShiroConfig中没有配置该路径可以匿名访问，所以直接被登录过滤了。</span></span><br><span class="line">    <span class="comment">// 如果配置了可以匿名访问，那这里在没有登录的时候可以访问，但是用户登录后就不能访问</span></span><br><span class="line">    <span class="meta">@RequiresGuest</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/guest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">guest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"@RequiresGuest"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresAuthentication</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authn"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"@RequiresAuthentication"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresUser</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"@RequiresUser"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"mvn:install"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/mvnInstall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mvnInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"mvn:install"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"gradleBuild"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/gradleBuild"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gradleBuild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gradleBuild"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresRoles</span>(<span class="string">"python"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/python"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">python</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"python programmer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="aef8e595"></a></p><h2 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h2><p>记住我功能在各大网站是比较常见的，实现起来也是大同小异，主要就是利用cookie来实现，而shiro对记住我功能的实现也是比较简单的，只需要几步即可。</p><p>首先呢配置下Cookie的生成模版，配置下cookie的name，cookie的有效时间等等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//System.out.println("ShiroConfiguration.rememberMeCookie()");</span></span><br><span class="line">    <span class="comment">//这个参数是cookie的名称，对应前端的checkbox的name = rememberMe</span></span><br><span class="line">    SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</span><br><span class="line">    <span class="comment">//&lt;!-- 记住我cookie生效时间30天 ,单位秒;--&gt;</span></span><br><span class="line">    simpleCookie.setMaxAge(<span class="number">259200</span>);</span><br><span class="line">    <span class="keyword">return</span> simpleCookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢配置rememberMeManager</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CookieRememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//System.out.println("ShiroConfiguration.rememberMeManager()");</span></span><br><span class="line">    CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">    cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">    <span class="comment">//rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)</span></span><br><span class="line">    cookieRememberMeManager.setCipherKey(Base64.decode(<span class="string">"2AvVhdsgUs0FSA3SDFAdag=="</span>));</span><br><span class="line">    <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rememberMeManager()方法是生成rememberMe管理器，而且要将这个rememberMe管理器设置到securityManager中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(customRealm(redisCacheManager));</span><br><span class="line">    securityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了记住我功能就到这里了，不过要记住一点，如果使用了authc的过滤的url的是不能使用记住我功能的，切记，至于什么原因，很好理解。有一些操作你是不需要别人在记住我功能下完成的，这样很不安全，<strong>所以shiro规定记住我功能最多得user级别的，不能到authc级别</strong>。</p><p><a name="e9c9ecbe"></a></p><h2 id="启用缓存"><a href="#启用缓存" class="headerlink" title="启用缓存"></a>启用缓存</h2><p>Shiro提供了类似Spring的Cache抽象，即Shiro本身不实现Cache，但是对Cache进行了又抽象，方便更换不同的底层Cache实现。对应前端的一个页面访问请求会同时出现很多的权限查询操作，这对于权限信息变化不是很频繁的场景，每次前端页面访问都进行大量的权限数据库查询是非常不经济的。因此，非常有必要对权限数据使用缓存方案。</p><p>由于Spring和Shiro都各自维护了自己的Cache抽象，为防止Realm注入的service里缓存注解和事务注解失效，所以定义自己的CacheManager处理缓存。</p><p><a name="39b8a2e7"></a></p><h3 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h3><p>CacheManager代码如下。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Destroyable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span>, <span class="title">Destroyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisCacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">getCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCacheManager</span><span class="params">(RedisCacheManager cacheManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheManager = cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了个性化配置redis存储时的key，我们选择了加前缀的方式，所以写了一个带名字及redis操作的构造函数的Cache类</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Cache&lt;K, V&gt; <span class="title">getCache</span><span class="params">(String name)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroRedisCache&lt;K, V&gt;(name, getCacheManager());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cacheManager = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;p&gt; 自定义缓存 将数据存入到redis中 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2018年2月1日</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@time</span> 22:32:11</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Slf</span>4j</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">shiro</span>.<span class="title">cache</span>.<span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> RedisCacheManager cacheManager;</span><br><span class="line">        <span class="keyword">private</span> org.springframework.cache.Cache cache;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    private RedisCache cache2;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisCache</span><span class="params">(String name, RedisCacheManager cacheManager)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span> || cacheManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"cacheManager or CacheName cannot be null."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.cacheManager = cacheManager;</span><br><span class="line">            <span class="comment">//这里首先是从父类中获取这个cache,如果没有会创建一个redisCache,初始化这个redisCache的时候</span></span><br><span class="line">            <span class="comment">//会设置它的过期时间如果没有配置过这个缓存的，那么默认的缓存时间是为0的，如果配置了，就会把配置的时间赋予给这个RedisCache</span></span><br><span class="line">            <span class="comment">//如果从缓存的过期时间为0，就表示这个RedisCache不存在了，这个redisCache实现了spring中的cache</span></span><br><span class="line">            <span class="keyword">this</span>.cache = cacheManager.getCache(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"从缓存中获取key为&#123;&#125;的缓存信息"</span>, key);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            org.springframework.cache.Cache.ValueWrapper valueWrapper = cache.get(key);</span><br><span class="line">            <span class="keyword">if</span> (valueWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (V) valueWrapper.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"创建新的缓存，信息为：&#123;&#125;=&#123;&#125;"</span>, key, value);</span><br><span class="line">            cache.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"干掉key为&#123;&#125;的缓存"</span>, key);</span><br><span class="line">            V v = get(key);</span><br><span class="line">            cache.evict(key);<span class="comment">//干掉这个名字为key的缓存</span></span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">            log.info(<span class="string">"清空所有的缓存"</span>);</span><br><span class="line">            cache.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cacheManager.getCacheNames().size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取缓存中所的key值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (Set&lt;K&gt;) cacheManager.getCacheNames();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取缓存中所有的values值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (Collection&lt;V&gt;) cache.get(cacheManager.getCacheNames()).get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ShiroSpringCache [cache="</span> + cache + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢就是把这个CacheManager注入到securityManager中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">    template.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">    Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    serializer.setObjectMapper(mapper);</span><br><span class="line">    template.setValueSerializer(serializer);</span><br><span class="line">    <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">    template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Spring缓存管理器配置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    CollectionSerializer&lt;Serializable&gt; collectionSerializer = CollectionSerializer.getInstance();</span><br><span class="line">    RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisTemplate.getConnectionFactory());</span><br><span class="line">    RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">        .entryTtl(Duration.ofHours(<span class="number">1</span>))</span><br><span class="line">        .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(collectionSerializer));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* shiro缓存管理器的配置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> redisCacheManager</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroRedisCacheManager <span class="title">shiroRedisCacheManager</span><span class="params">(RedisCacheManager redisCacheManager)</span> </span>&#123;</span><br><span class="line">    ShiroRedisCacheManager cacheManager = <span class="keyword">new</span> ShiroRedisCacheManager();</span><br><span class="line">    cacheManager.setCacheManager(redisCacheManager);</span><br><span class="line">    <span class="comment">//name是key的前缀，可以设置任何值，无影响，可以设置带项目特色的值</span></span><br><span class="line">    <span class="keyword">return</span> cacheManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对应的Realm和securityManager也要稍做更改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">(RedisCacheManager redisCacheManager)</span> </span>&#123;</span><br><span class="line">    CustomRealm realm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line">    realm.setCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//设置认证密码算法及迭代复杂度</span></span><br><span class="line">    <span class="comment">//realm.setCredentialsMatcher(credentialsMatcher());</span></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    realm.setCacheManager(shiroRedisCacheManager(redisCacheManager));</span><br><span class="line">    realm.setAuthenticationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    realm.setAuthorizationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//这里主要是缓存key的名字</span></span><br><span class="line">    realm.setAuthenticationCacheName(<span class="string">"fulinauthen"</span>);</span><br><span class="line">    realm.setAuthenticationCacheName(<span class="string">"fulinauthor"</span>);</span><br><span class="line">    <span class="keyword">return</span> realm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">(RedisCacheManager redisCacheManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(customRealm(redisCacheManager));</span><br><span class="line">    securityManager.setCacheManager(shiroRedisCacheManager(redisCacheManager));</span><br><span class="line">    securityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话每次认证的时候就会把权限信息放入redis中，就不用反复的去查询数据库了。</p><p><a name="138a6766"></a></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>Realm里注入的UserService等service，需要延迟注入，所以都要添加@Lazy注解(如果不加需要自己延迟注入)，否则会导致该service里的@Cacheable缓存注解、@Transactional事务注解等失效</strong>。</p><p>整合的时候应该会有人遇到不能序列化的问题吧,原因是因为用了Shiro的SimpleAuthenticationInfo中的setCredentialsSalt注入的属性ByteSource没有实现序列化接口，此时呢只用把源码一贴，实现下序列化接口即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.CodecSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Hex;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决ByteSource 序列化问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySimpleByteSource</span> <span class="keyword">implements</span> <span class="title">ByteSource</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes;</span><br><span class="line">    <span class="keyword">private</span> String cachedHex;</span><br><span class="line">    <span class="keyword">private</span> String cachedBase64;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">(<span class="keyword">char</span>[] chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = CodecSupport.toBytes(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = CodecSupport.toBytes(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">(ByteSource source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = source.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = (<span class="keyword">new</span> MySimpleByteSource.BytesHelper()).getBytes(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySimpleByteSource</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = (<span class="keyword">new</span> MySimpleByteSource.BytesHelper()).getBytes(stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCompatible</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> <span class="keyword">byte</span>[] || o <span class="keyword">instanceof</span> <span class="keyword">char</span>[] || o <span class="keyword">instanceof</span> String || o <span class="keyword">instanceof</span> ByteSource || o <span class="keyword">instanceof</span> File || o <span class="keyword">instanceof</span> InputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes == <span class="keyword">null</span> || <span class="keyword">this</span>.bytes.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toHex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cachedHex == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cachedHex = Hex.encodeToString(<span class="keyword">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cachedHex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toBase64</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cachedBase64 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cachedBase64 = Base64.encodeToString(<span class="keyword">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cachedBase64;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toBase64();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.bytes.length != <span class="number">0</span> ? Arrays.hashCode(<span class="keyword">this</span>.bytes) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> ByteSource) &#123;</span><br><span class="line">            ByteSource bs = (ByteSource) o;</span><br><span class="line">            <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.getBytes(), bs.getBytes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BytesHelper</span> <span class="keyword">extends</span> <span class="title">CodecSupport</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">BytesHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(File file) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toBytes(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(InputStream stream) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toBytes(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在realm中改变使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (userDB.getSalt() != <span class="keyword">null</span>) &#123;</span><br><span class="line">info.setCredentialsSalt(<span class="keyword">new</span> MySimpleByteSource(userDB.getSalt()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="b2d11564"></a></p><h3 id="整合Ehcache"><a href="#整合Ehcache" class="headerlink" title="整合Ehcache"></a>整合Ehcache</h3><p>整合ehcache就更简单，套路都是一样的只不过2.x和3.x 需要注入不同的CacheManager即可。这里需要注入下3.x的Ehcache是实现了Jcache，不过整合起来都是一样的，详情可以去看我之前的整合Spring抽象缓存的帖子。</p><p>官方提供了shiro-ehcache的整合包，不过这个整合包是针对Ehcache2.x的。</p><p><a name="cf863c58"></a></p><h2 id="Redis存储Session"><a href="#Redis存储Session" class="headerlink" title="Redis存储Session"></a>Redis存储Session</h2><p>关于共享session的问题大家都应该知道了，传统的部署项目，两个相同的项目部署到不同的服务器上，Nginx负载均衡后会导致用户在A上登陆了，经过负载均衡后，在B上要重新登录，因为A上有相关session信息，而B没有。这种情况也称为“有状态”服务。而“无状态”服务则是：在一个公共的地方存储session，每次访问都会统一到这个地方来拿。思路呢就是实现Shiro的Session接口，然后呢自己控制，这里我们实现AbstractSessionDAO。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.UnknownSessionException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.AbstractSessionDAO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRedisSessionDao</span> <span class="keyword">extends</span> <span class="title">AbstractSessionDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShiroRedisSessionDao</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Session session)</span> <span class="keyword">throws</span> UnknownSessionException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"更新seesion,id=[&#123;&#125;]"</span>, session.getId().toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(session.getId().toString(), session, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"删除seesion,id=[&#123;&#125;]"</span>, session.getId().toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String key = session.getId().toString();</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Session&gt; <span class="title">getActiveSessions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取存活的session"</span>);</span><br><span class="line">        <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">doCreate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        Serializable sessionId = generateSessionId(session);</span><br><span class="line">        assignSessionId(session, sessionId);</span><br><span class="line">        log.info(<span class="string">"创建seesion,id=[&#123;&#125;]"</span>, session.getId().toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(session.getId().toString(), session, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Session <span class="title">doReadSession</span><span class="params">(Serializable sessionId)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取seesion,id=[&#123;&#125;]"</span>, sessionId.toString());</span><br><span class="line">        Session readSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            readSession = (Session) redisTemplate.opsForValue().get(sessionId.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> readSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后吧你写好的SessionDao注入到shiro的securityManager中即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 配置sessionmanager，由redis存储数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"sessionManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">sessionManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">    CollectionSerializer&lt;Serializable&gt; collectionSerializer = CollectionSerializer.getInstance();</span><br><span class="line">    redisTemplate.setDefaultSerializer(collectionSerializer);</span><br><span class="line">    <span class="comment">//redisTemplate默认采用的其实是valueSerializer，就算是采用其他ops也一样，这是一个坑。</span></span><br><span class="line">    redisTemplate.setValueSerializer(collectionSerializer);</span><br><span class="line">    ShiroRedisSessionDao redisSessionDao = <span class="keyword">new</span> ShiroRedisSessionDao(redisTemplate);</span><br><span class="line">    <span class="comment">//这个name的作用也不大，只是有特色的cookie的名称。</span></span><br><span class="line">    sessionManager.setSessionDAO(redisSessionDao);</span><br><span class="line">    sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line">    SimpleCookie cookie = <span class="keyword">new</span> SimpleCookie();</span><br><span class="line">    cookie.setName(<span class="string">"starrkCookie"</span>);</span><br><span class="line">    sessionManager.setSessionIdCookie(cookie);</span><br><span class="line">    sessionManager.setSessionIdCookieEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">(RedisTemplate redisTemplate, RedisCacheManager redisCacheManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    securityManager.setRealm(customRealm(redisCacheManager));</span><br><span class="line">    securityManager.setCacheManager(shiroRedisCacheManager(redisCacheManager));</span><br><span class="line">    securityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">    securityManager.setSessionManager(sessionManager(redisTemplate));</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每次读取Session就会从Redis中取读取了，当然还有谢谢开源的插件解决方案，比如crazycake ，有机会在补充这个。</p><p><strong>本博文是基于springboot2.x 如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性  Stream 快速上手</title>
      <link href="/2019/07/25/yuque/Java8%E6%96%B0%E7%89%B9%E6%80%A7%20%20Stream%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2019/07/25/yuque/Java8%E6%96%B0%E7%89%B9%E6%80%A7%20%20Stream%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Java 8引入了全新的Stream API。这里的Stream和I/O流不同，它更像具有Iterable的集合类，但行为和集合类又有所不同。</p></li><li><p>stream是对集合对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作，或者大批量数据操作。</p></li><li><p>只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。<br><a name="d69ac38d"></a></p><h2 id="为什么要使用Stream"><a href="#为什么要使用Stream" class="headerlink" title="为什么要使用Stream"></a>为什么要使用Stream</h2></li><li><p>函数式编程带来的好处尤为明显。这种代码更多地表达了业务逻辑的意图，而不是它的实现机制。易读的代码也易于维护、更可靠、更不容易出错。</p></li><li><p>高端，装逼</p></li></ul><p><a name="1a723bb9"></a></p><h2 id="基础测试数据"><a href="#基础测试数据" class="headerlink" title="基础测试数据"></a>基础测试数据</h2><p>先来个实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.echartsdemo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ECharts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-25 16:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">.....省略get set</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = id;</span><br><span class="line">        <span class="keyword">this</span>.brand = name;</span><br><span class="line">        <span class="keyword">this</span>.month = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后弄出个list</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"fulin"</span>, <span class="string">"男"</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"dog"</span>, <span class="string">"女"</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"mao"</span>, <span class="string">"男"</span>),</span><br><span class="line">    <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">"cat"</span>, <span class="string">"女"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a name="Filter"></a></p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>遍历数据并检查其中的元素时使用，filter接受一个函数作为参数，该函数用Lambda表达式表示。<br>            <img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062732182-c2892347-6310-4316-8cbd-6b14a8aac83f.png#align=left&display=inline&height=227&originHeight=227&originWidth=571&size=0&status=done&style=none&width=571" class="lazyload"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤所有的男性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fiterSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        <span class="comment">//old</span></span><br><span class="line">        List&lt;User&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (User user : data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"男"</span>.equals(user.getSex())) &#123;</span><br><span class="line">                temp.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        <span class="comment">//new</span></span><br><span class="line">        List&lt;User&gt; collect = data</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(user -&gt; <span class="string">"男"</span>.equals(user.getSex()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤所有的男性 并且符合姓名的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fiterSexAndAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        <span class="comment">//old</span></span><br><span class="line">        List&lt;User&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (User user : data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"男"</span>.equals(user.getSex()) &amp;&amp; user.getName().equals(<span class="string">"fulin"</span>)) &#123;</span><br><span class="line">                temp.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//new 1</span></span><br><span class="line">        List&lt;User&gt; collect = data</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(user -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"男"</span>.equals(user.getSex()) &amp;&amp; user.getName().equals(<span class="string">"fulin"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//new 2</span></span><br><span class="line">        List&lt;User&gt; collect1 = data</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(user -&gt; (<span class="string">"男"</span>.equals(user.getSex()) &amp;&amp; user.getName().equals(<span class="string">"fulin"</span>)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="Map"></a></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>map生成的是个一对一映射,for的作用，比较常用，而且很简单</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062732191-1afd3edd-9b76-4edd-841d-54c2f42fb28d.png#align=left&display=inline&height=215&originHeight=215&originWidth=497&size=0&status=done&style=none&width=497" class="lazyload"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出所有的用户名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUserNameList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        <span class="comment">//old</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (User user : data) &#123;</span><br><span class="line">            list.add(user.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//new 1</span></span><br><span class="line">        List&lt;String&gt; collect = data.stream().map(user -&gt; user.getName()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new 2</span></span><br><span class="line">        List&lt;String&gt; collect1 = data.stream().map(User::getName).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new 3</span></span><br><span class="line">        List&lt;String&gt; collect2 = data.stream().map(person -&gt; &#123;</span><br><span class="line">            System.out.println(person.getName());</span><br><span class="line">            <span class="keyword">return</span> person.getName();</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="FlatMap"></a></p><h2 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h2><p>顾名思义，跟map差不多，更深层次的操作，但还是有区别的，map和flat返回值不同，Map 每个输入元素，都按照规则转换成为另外一个元素。<br>还有一些场景，是一对多映射关系的，这时需要 flatMap。</p><p>Map一对一</p><p>Flatmap一对多</p><p>map和flatMap的方法声明是不一样的</p><ul><li>Stream      map(Function mapper);</li><li>Stream flatMap(Function&gt; mapper);</li></ul><p>map和flatMap的区别：我个人认为，flatMap的可以处理更深层次的数据，入参为多个list，结果可以返回为一个list，而map是一对一的，入参是多个list，结果返回必须是多个list。通俗的说，如果入参都是对象，那么flatMap可以操作对象里面的对象，而map只能操作第一层。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062732230-bd35c472-1fdf-420e-ac5a-f982f467b9ba.png#align=left&display=inline&height=242&originHeight=242&originWidth=489&size=0&status=done&style=none&width=489" class="lazyload"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flatMapString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        <span class="comment">//返回类型不一样</span></span><br><span class="line">        List&lt;String&gt; collect = data.stream()</span><br><span class="line">                .flatMap(user -&gt; Arrays.stream(user.getName().split(<span class="string">"l"</span>))).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;Stream&lt;String&gt;&gt; collect1 = data.stream()</span><br><span class="line">                .map(person -&gt; Arrays.stream(person.getName().split(<span class="string">"l"</span>))).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//用map实现</span></span><br><span class="line">        List&lt;String&gt; collect2 = data.stream()</span><br><span class="line">                .map(person -&gt; person.getName().split(<span class="string">"l"</span>))</span><br><span class="line">                .flatMap(Arrays::stream).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//另一种方式</span></span><br><span class="line">        List&lt;String&gt; collect3 = data.stream()</span><br><span class="line">                .map(person -&gt; person.getName().split(<span class="string">"l"</span>))</span><br><span class="line">                .flatMap(str -&gt; Arrays.asList(str).stream()).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="Reduce"></a></p><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><p>感觉类似递归，字符串数字相加，感觉以后会用到</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062732204-1883b56a-2341-4aa4-8f60-0731eff87842.png#align=left&display=inline&height=400&originHeight=400&originWidth=555&size=0&status=done&style=none&width=555" class="lazyload"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reduceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//累加，初始化值是 10,然后 10+1+2+3+4</span></span><br><span class="line">        Integer reduce = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                .reduce(<span class="number">10</span>, (count, item) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">"count:"</span> + count);</span><br><span class="line">                    System.out.println(<span class="string">"item:"</span> + item);</span><br><span class="line">                    <span class="keyword">return</span> count + item;</span><br><span class="line">                &#125;);</span><br><span class="line">        System.out.println(reduce);</span><br><span class="line">        <span class="comment">//累加，初始化值是 0,然后 0+1+2+3+4</span></span><br><span class="line">        Integer reduce1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(reduce1);</span><br><span class="line">        <span class="comment">//查不多就类似字符串相加</span></span><br><span class="line">        String reduce2 = Stream.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">                .reduce(<span class="string">"0"</span>, (x, y) -&gt; (x + <span class="string">","</span> + y));</span><br><span class="line">        System.out.println(reduce2);</span><br><span class="line">        <span class="comment">//那个集合试试水</span></span><br><span class="line">        List&lt;Integer&gt; ll = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        Optional&lt;Integer&gt; reduce3 = ll.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(reduce3.get().intValue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="Collect"></a></p><h2 id="Collect"><a href="#Collect" class="headerlink" title="Collect"></a>Collect</h2><p>collect在流中生成列表，map，等常用的数据结构，常见的有toList()，toSet()，toMap() 甚至可以自定义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * toList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toListTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        List&lt;String&gt; collect = data</span><br><span class="line">                .stream()</span><br><span class="line">                .map(User::getName)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * toSet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toSetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        Set&lt;String&gt; collect = data</span><br><span class="line">                .stream()</span><br><span class="line">                .map(User::getName)</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * toMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toMapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        Map&lt;String, String&gt; collect = data.stream()</span><br><span class="line">                .collect(</span><br><span class="line">                        Collectors.toMap(User::getName, User::getName)</span><br><span class="line">                );</span><br><span class="line">        Map&lt;String, String&gt; collect1 = data.stream()</span><br><span class="line">                .collect(Collectors.toMap(User::getName, value -&gt; value + <span class="string">"1"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toStackTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        Collection&lt;User&gt; collect = data.stream()</span><br><span class="line">                .collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toGroupTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        Map&lt;Boolean, List&lt;User&gt;&gt; collect = data.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(user -&gt; <span class="string">"男"</span>.equals(user.getSex())));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toJoiningTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; data = list;</span><br><span class="line">        String collect = data.stream()</span><br><span class="line">                .map(User::getName)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">","</span>, <span class="string">"&#123;"</span>, <span class="string">"&#125;"</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; collect = Stream.of(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>).map(Arrays::asList).reduce(<span class="keyword">new</span> ArrayList&lt;String&gt;(), (y, z) -&gt; &#123;</span><br><span class="line">            y.addAll(z);</span><br><span class="line">            <span class="keyword">return</span> y;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="Optional"></a></p><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Optional 是为核心类库新设计的一个数据类型，用来替换 null 值。人们对原有的 null 值有很多抱怨，甚至连发明这一概念的Tony Hoare也是如此，他曾说这是自己的一个“价值连城的错误”。</p><p>用处很广，不光在lambda中，哪都能用!!!</p><p>Optional类的Javadoc描述如下：</p><p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p><p>of:<br>为非null的值创建一个Optional。<br>of方法通过工厂方法创建Optional类。需要注意的是，创建对象时传入的参数不能为null。如果传入参数为null，则抛出NullPointerException 。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用工厂方法创建Optional实例</span></span><br><span class="line">Optional&lt;String&gt; name = Optional.of(<span class="string">"fulinlin"</span>);</span><br><span class="line"><span class="comment">//传入参数为null，抛出NullPointerException.</span></span><br><span class="line">Optional&lt;String&gt; someNull = Optional.of(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>ofNullable:<br>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。<br>ofNullable与of方法相似，唯一的区别是可以接受参数为null的情况。示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面创建了一个不包含任何值的Optional实例</span></span><br><span class="line"><span class="comment">//例如，值为'null'</span></span><br><span class="line">Optional empty = Optional.ofNullable(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>ifPresent:<br>如果Optional实例有值则为其调用consumer，否则不做处理<br>如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。类似下面的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ifPresent方法接受lambda表达式作为参数。</span></span><br><span class="line"><span class="comment">//lambda表达式对Optional的值调用consumer进行处理。</span></span><br><span class="line">name.ifPresent((value) -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">"长度为: "</span> + value.length());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>orElse:<br>如果有值则将其返回，否则返回指定的其它值。<br>如果Optional实例有值则将其返回，否则返回orElse方法传入的参数。示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果值不为null，orElse方法返回Optional实例的值。</span></span><br><span class="line"><span class="comment">//如果为null，返回传入的消息。</span></span><br><span class="line"><span class="comment">//输出：这是空的!</span></span><br><span class="line">System.out.println(empty.orElse(<span class="string">"这是空的!"</span>));</span><br><span class="line"><span class="comment">//输出：fulinlin</span></span><br><span class="line">System.out.println(name.orElse(<span class="string">"这有值!"</span>));</span><br></pre></td></tr></table></figure><p>orElseGet<br>orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值。示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//orElseGet与orElse方法类似，区别在于orElse传入的是默认值，</span></span><br><span class="line"><span class="comment">//orElseGet可以接受一个lambda表达式生成默认值。</span></span><br><span class="line"><span class="comment">//输出：Default Value</span></span><br><span class="line">System.out.println(empty.orElseGet(() -&gt; <span class="string">"Default Value"</span>));</span><br><span class="line"><span class="comment">//输出：fulinlin</span></span><br><span class="line">System.out.println(name.orElseGet(() -&gt; <span class="string">"Default Value"</span>));</span><br></pre></td></tr></table></figure><p><a name="065a9b80"></a></p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>stream替换成parallelStream或 parallel就行了，现在科技真发达·····<br>输入流的大小并不是决定并行化是否会带来速度提升的唯一因素，性能还会受到编写代码的方式和核的数量的影响<br>影响性能的五要素是:数据大小、源数据结构、值是否装箱、可用的CPU核数量，以及处理每个元素所花的时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据数字的大小，有不同的结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size=<span class="number">10000000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------List-----------"</span>);</span><br><span class="line">        testList();</span><br><span class="line">        System.out.println(<span class="string">"-----------Set-----------"</span>);</span><br><span class="line">        testSet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">for</span> (Integer i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Integer(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; temp1 = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">        <span class="comment">//老的</span></span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer i: list) &#123;</span><br><span class="line">            temp1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(+System.currentTimeMillis()-start);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="keyword">long</span> start1=System.currentTimeMillis();</span><br><span class="line">        list.stream().collect(Collectors.toList());</span><br><span class="line">        System.out.println(System.currentTimeMillis()-start1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并发</span></span><br><span class="line">        <span class="keyword">long</span> start2=System.currentTimeMillis();</span><br><span class="line">        list.parallelStream().collect(Collectors.toList());</span><br><span class="line">        System.out.println(System.currentTimeMillis()-start2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">for</span> (Integer i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Integer(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; temp1 = <span class="keyword">new</span> HashSet&lt;&gt;(size);</span><br><span class="line">        <span class="comment">//老的</span></span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer i: list) &#123;</span><br><span class="line">            temp1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(+System.currentTimeMillis()-start);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="keyword">long</span> start1=System.currentTimeMillis();</span><br><span class="line">        list.stream().collect(Collectors.toSet());</span><br><span class="line">        System.out.println(System.currentTimeMillis()-start1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并发</span></span><br><span class="line">        <span class="keyword">long</span> start2=System.currentTimeMillis();</span><br><span class="line">        list.parallelStream().collect(Collectors.toSet());</span><br><span class="line">        System.out.println(System.currentTimeMillis()-start2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>差不多就这些吧，用到了在补帖，科技在进步<del>~</del>更新太快了学不过来了啊啊啊啊啊啊</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模版引擎 FreeMarker基本使用</title>
      <link href="/2019/07/25/yuque/%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E%20FreeMarker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/25/yuque/%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E%20FreeMarker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Apache FreeMarke是一个_模板引擎_：一个Java库，用于根据模板和更改数据生成文本输出（HTML网页，电子邮件，配置文件，源代码等）。模板是用FreeMarker模板语言（FTL）编写的，这是一种简单的专用语言（不像PHP这样的完整编程语言）。通常，使用通用编程语言（如Java）来准备数据（发布数据库查询，进行业务计算）</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062669940-a48edfb3-4d34-4b7a-a7cf-dbe3f7fd47c3.png#align=left&display=inline&height=180&originHeight=180&originWidth=435&size=0&status=done&width=435" class="lazyload"><br>这篇文章呢就来介绍freemarker 的常见用法</p><p><a name="6071ca9c"></a></p><h1 id="Freemarker常用"><a href="#Freemarker常用" class="headerlink" title="Freemarker常用"></a>Freemarker常用</h1><p><a name="f73da07b"></a></p><h3 id="正常显示一个变量"><a href="#正常显示一个变量" class="headerlink" title="正常显示一个变量"></a>正常显示一个变量</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="185f7bf6"></a></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><a name="59c70ffd"></a></p><h4 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">temp</span> = <span class="string">"happy fish"</span>  /&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">temp</span> = <span class="string">'happy fish'</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;temp&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这两种形式是相等的。字符串中可以使用转义字符””。如果字符串内有大量的特殊字符，则可以在引号的前面加上一个字母r，则字符串内的所有字符都将直接输出。例如：”It’s “quoted”” 或者 r”C:\raw\string”</p><p><a name="1460fc73"></a></p><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">number</span> = <span class="string">111</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;number&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入不带引号的数字就可以直接指定一个数字，必须使用点作为小数的分隔符而不能是其他的分组分隔符。可以使用-或+来表明符号（+是多余的）。科学记数法暂不支持使用（1E3就是错误的），而且也不能在小数点之前不写0（.5也是错误的）。</p><p><a name="37f73d89"></a></p><h4 id="哈希表类型"><a href="#哈希表类型" class="headerlink" title="哈希表类型"></a>哈希表类型</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">map</span> = <span class="string">&#123;</span>"<span class="attr">name</span>"<span class="attr">:</span>"<span class="attr">green</span> <span class="attr">mouse</span>", "<span class="attr">price</span>"<span class="attr">:150</span>&#125; /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;map.name&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>键和值成对出现并以冒号分隔，最外面使用花括号,注意到名字和值都是表达式，但是用来检索的名字就必须是字符串类型的。</p><p><a name="4ed436f0"></a></p><h4 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span>  <span class="attr">nums</span>=<span class="string">[1,2,3,4,5,77,8,99]</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;nums[0]&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">输出序列</span><br><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">nums</span> <span class="attr">as</span> <span class="attr">num</span>&gt;</span></span><br><span class="line">   $&#123;num&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定一个序列，使用逗号来分隔其中的每个子变量,还可以采用数字范围定义了一个<strong>连续的序列</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">nums</span>=<span class="string">1..99/</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式定义的序列的内容是1到99。总之，使用数字范围也可以表示一个数字集合，如1..5等同于集合[1,2, 3, 4, 5]；同样也可以用5..1来表示[5, 4, 3, 2, 1]。</p><p><a name="7f0308d4"></a></p><h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">date1</span> = <span class="string">"2018-09-22"</span>?<span class="attr">date</span>("<span class="attr">yyyy-MM-dd</span>") /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">date2</span> =<span class="string">"16:34:43"</span>?<span class="attr">time</span>("<span class="attr">HH:mm:ss</span>") /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">date3</span> = <span class="string">"2018-09-22 17:23:45"</span>?<span class="attr">datetime</span>("<span class="attr">yyyy-MM-dd</span> <span class="attr">HH:mm:ss</span>") /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;date1&#125;,<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;date2&#125;,<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;date3&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>FreeMarker支持date、time、datetime三种类型，这三种类型的值无法直接指定，通常需要借助字符串的date、time、datetime三个内建函数进行转换才可以</p><p><a name="cd29ffe6"></a></p><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span>  <span class="attr">flag</span>=<span class="string">true</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">flag</span>&gt;</span>fulinlin<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意boolean不能输出需要转换为字符串</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span>  <span class="attr">flag</span>=<span class="string">true</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;flag&#125;?string<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="7d8fa198"></a></p><h2 id="宏的基本用法"><a href="#宏的基本用法" class="headerlink" title="宏的基本用法"></a>宏的基本用法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">one</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: x-small"</span>&gt;</span> Hello Word!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">@one</span>&gt;</span><span class="tag">&lt;/<span class="name">@one</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有体内容也可以用 &lt;<a href>@one </a> /&gt;</p><p>可以在宏定义之后定义参数，宏参数是局部变量，只在宏定义中有效</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">two</span> <span class="attr">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: x-small"</span>&gt;</span> Hello $&#123;person&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@two</span> <span class="attr">person</span>=<span class="string">"fulin"</span>&gt;</span><span class="tag">&lt;/<span class="name">@two</span>&gt;</span></span><br></pre></td></tr></table></figure><p>宏的参数是FTL表达式，所以，person=fulin和上面的例子中具有不同的意义，这意味着将变量fulin的值传给person，这个值可能是任意一种数据类型，甚至是一个复杂的表达式。</p><p>宏可以有多个参数，使用时参数的次序是无关的，但是只能使用宏中定义的参数，并且对所有参数赋值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">three</span> <span class="attr">person</span> <span class="attr">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: $&#123;size&#125;"</span> &gt;</span> Hello $&#123;person&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@three</span> <span class="attr">size</span>=<span class="string">"26px"</span> <span class="attr">person</span>=<span class="string">"Word"</span>&gt;</span><span class="tag">&lt;/<span class="name">@three</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果其中一个没有赋值就会出错,如果想定义个缺省值怎么办呢&lt;#macro three person size=”22px”&gt; 这样的话，这个使用方法就是正确的。</p><p><a name="909c9f6d"></a></p><h2 id="序列的操作"><a href="#序列的操作" class="headerlink" title="序列的操作"></a>序列的操作</h2><p><a name="7de03310"></a></p><h3 id="序列内置函数"><a href="#序列内置函数" class="headerlink" title="序列内置函数"></a><strong>序列内置函数</strong></h3><p><a name="baf8980c"></a></p><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">list</span>=<span class="string">[1,123,12,1234,12345,123456]</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">list</span> <span class="attr">as</span> <span class="attr">l</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;l_index + 1&#125;.<span class="tag">&lt;/<span class="name">b</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;l&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">l</span>=<span class="string">12345</span>&gt;</span><span class="tag">&lt;<span class="name">#break</span>&gt;</span><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">l_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果:  <strong>1.</strong> <strong>1</strong> , <strong>2.</strong> <strong>123</strong> , <strong>3.</strong> <strong>12</strong> , <strong>4.</strong> <strong>1,234</strong> , <strong>5.</strong> <strong>12,345</strong></p><p>item_index:当前变量的索引值.<br>item_has_next:是否存在下一个对象.</p><p><a name="b0f226bc"></a></p><h4 id="返回序列头尾值"><a href="#返回序列头尾值" class="headerlink" title="返回序列头尾值"></a>返回序列头尾值</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;list?first&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">$&#123;list?last&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="d4e71c64"></a></p><h4 id="序列反转"><a href="#序列反转" class="headerlink" title="序列反转"></a>序列反转</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">list</span>?<span class="attr">reverse</span> <span class="attr">as</span> <span class="attr">l</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;l&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">l_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="8a1a3d0e"></a></p><h4 id="序列大小"><a href="#序列大小" class="headerlink" title="序列大小"></a>序列大小</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;list?size&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="403a8ad7"></a></p><h4 id="对象转化为字符串后顺序排序"><a href="#对象转化为字符串后顺序排序" class="headerlink" title="对象转化为字符串后顺序排序"></a>对象转化为字符串后顺序排序</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">list</span>?<span class="attr">sort</span> <span class="attr">as</span> <span class="attr">l</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;l&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">l_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="a5adf7c5"></a></p><h4 id="按序列中对象的属性value进行排序"><a href="#按序列中对象的属性value进行排序" class="headerlink" title="按序列中对象的属性value进行排序"></a>按序列中对象的属性value进行排序</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">list</span>?<span class="attr">sort_by</span>(<span class="attr">value</span>) <span class="attr">as</span> <span class="attr">l</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;l&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">l_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="9e22cb1f"></a></p><h4 id="序列的连接"><a href="#序列的连接" class="headerlink" title="序列的连接"></a>序列的连接</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> ["一","二","三"] + ["四","五","六"] <span class="attr">as</span> <span class="attr">x</span>&gt;</span></span><br><span class="line">    $&#123;x&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果如下：一二三四五六</p><p><a name="74e7aad9"></a></p><h4 id="判断序列是否包含某个元素"><a href="#判断序列是否包含某个元素" class="headerlink" title="判断序列是否包含某个元素"></a>判断序列是否包含某个元素</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span> = <span class="string">[</span>"<span class="attr">cat</span>", <span class="attr">16</span>, "<span class="attr">fish</span>", "<span class="attr">fulin</span>"]&gt;</span></span><br><span class="line">"dog": $&#123;x?seq_contains("dog")?string("yes", "no")&#125;</span><br><span class="line">16: $&#123;x?seq_contains(16)?string("yes", "no")&#125;</span><br><span class="line">"16": $&#123;x?seq_contains("16")?string("yes", "no")&#125;</span><br></pre></td></tr></table></figure><p>输出结果：”dog”: yes、16: yes、”16”: no,seq_前缀在这个内建函数中是需要的，用来和contains 区分开。contains函数用来在字符串中查找子串（因为变量可以同时当作字符串和序列）</p><p><a name="663b724a"></a></p><h3 id="Hash的内置函数"><a href="#Hash的内置函数" class="headerlink" title="Hash的内置函数"></a>Hash的内置函数</h3><p><a name="8ce8ed7b"></a></p><h4 id="返回hash里的所有key"><a href="#返回hash里的所有key" class="headerlink" title="返回hash里的所有key"></a>返回hash里的所有key</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">map</span>=<span class="string">&#123;</span>"<span class="attr">name</span>"<span class="attr">:</span>"张三","<span class="attr">age</span>"<span class="attr">:</span>"<span class="attr">16</span>"&#125; /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">map</span>?<span class="attr">keys</span> <span class="attr">as</span> <span class="attr">m</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;m&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">m_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="c257ba3e"></a></p><h4 id="返回hash里的所有value"><a href="#返回hash里的所有value" class="headerlink" title="返回hash里的所有value"></a>返回hash里的所有value</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">map</span>=<span class="string">&#123;</span>"<span class="attr">name</span>"<span class="attr">:</span>"张三","<span class="attr">age</span>"<span class="attr">:</span>"<span class="attr">16</span>"&#125; /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">map</span>?<span class="attr">values</span> <span class="attr">as</span> <span class="attr">m</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;m&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">m_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="1254ffcf"></a></p><h3 id="字符串内置函数"><a href="#字符串内置函数" class="headerlink" title="字符串内置函数"></a><strong>字符串内置函数</strong></h3><p><a name="b6bf3472"></a></p><h4 id="从一个字符串中截取子串"><a href="#从一个字符串中截取子串" class="headerlink" title="从一个字符串中截取子串"></a>从一个字符串中截取子串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?substring(1,3)&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>start:截取子串开始的索引，start必须大于等于0，小于等于end<br>end: 截取子串的长度，end必须大于等于0，小于等于字符串长度，如果省略该参数，默认为字符串长度。</p><p><a name="24ef528e"></a></p><h4 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?cap_first&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="bd466035"></a></p><h4 id="首字母小写"><a href="#首字母小写" class="headerlink" title="首字母小写"></a>首字母小写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?uncap_first&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="17d49cfa"></a></p><h4 id="所有单词首字母大写"><a href="#所有单词首字母大写" class="headerlink" title="所有单词首字母大写"></a>所有单词首字母大写</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;str?capitalize&#125;&lt;br&gt;</span><br></pre></td></tr></table></figure><p><a name="70382517"></a></p><h4 id="判断某个字符串是否由某个子串结尾"><a href="#判断某个字符串是否由某个子串结尾" class="headerlink" title="判断某个字符串是否由某个子串结尾"></a>判断某个字符串是否由某个子串结尾</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?ends_with("rd")?string&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="653ef00c"></a></p><h4 id="将字符串中的-lt-、-gt-、-amp-和”替换为对应得-lt-gt-”-amp"><a href="#将字符串中的-lt-、-gt-、-amp-和”替换为对应得-lt-gt-”-amp" class="headerlink" title="将字符串中的&lt;、&gt;、&amp;和”替换为对应得&lt;&gt;”:&amp;"></a>将字符串中的&lt;、&gt;、&amp;和”替换为对应得&lt;&gt;”:&amp;</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?html&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="d0d42a63"></a></p><h4 id="在字符串中查找某个子串"><a href="#在字符串中查找某个子串" class="headerlink" title="在字符串中查找某个子串"></a>在字符串中查找某个子串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?index_of("d",-1)&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。Start参数用于指定从字符串的那个索引处开始搜索，start为数字值。如果start大于字符串长度，则start取值等于字符串长度，如果start小于0，则start取值为0。</p><p><a name="3a1adf54"></a></p><h4 id="返回字符串的长度"><a href="#返回字符串的长度" class="headerlink" title="返回字符串的长度"></a>返回字符串的长度</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?length&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="ebd5caeb"></a></p><h4 id="将字符串转为小写"><a href="#将字符串转为小写" class="headerlink" title="将字符串转为小写"></a>将字符串转为小写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?lower_case&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="51e6110b"></a></p><h4 id="将字符串转为大写"><a href="#将字符串转为大写" class="headerlink" title="将字符串转为大写"></a>将字符串转为大写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?upper_case&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="47ee8333"></a></p><h4 id="判断字符中是否包含某个子串"><a href="#判断字符中是否包含某个子串" class="headerlink" title="判断字符中是否包含某个子串"></a>判断字符中是否包含某个子串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?contains("a")?string&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="f79f4fbf"></a></p><h4 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;num?number&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="88752ab2"></a></p><h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?replace("o","*")&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="6926eaa5"></a></p><h4 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">str</span>?<span class="attr">split</span>("<span class="attr">o</span>") <span class="attr">as</span> <span class="attr">m</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;m&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#if</span> <span class="attr">m_has_next</span>&gt;</span>,<span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="6e1f8142"></a></p><h4 id="删除字符串首尾空格"><a href="#删除字符串首尾空格" class="headerlink" title="删除字符串首尾空格"></a>删除字符串首尾空格</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;str?trim&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="9a746d03"></a></p><h4 id="数字转换为字符串"><a href="#数字转换为字符串" class="headerlink" title="数字转换为字符串"></a>数字转换为字符串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;number?c?is_string?string&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="a065a1ce"></a></p><h4 id="数字格式"><a href="#数字格式" class="headerlink" title="数字格式"></a>数字格式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$&#123;number?string.computer&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">$&#123;number?string.percent&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">$&#123;number?string.number&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Freemarker中预订义了三种数字格式：number,currency（货币）和percent(百分比)其中number为默认的数字格式转换.</p><p><a name="cb348031"></a></p><h4 id="数值精度控制"><a href="#数值精度控制" class="headerlink" title="数值精度控制"></a>数值精度控制</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span>=<span class="string">2.582/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">y</span>=<span class="string">4/</span>&gt;</span></span><br><span class="line">#&#123;x; M2&#125;//2.58</span><br><span class="line">#&#123;y; M2&#125;//4</span><br><span class="line">#&#123;x; m1M2&#125;//2.58</span><br><span class="line">#&#123;y; m1M2&#125;//4.0</span><br></pre></td></tr></table></figure><p>mX:小数部分最小X位。MX:小数部分最大X位。</p><p><a name="d835b676"></a></p><h3 id="布尔值内置函数"><a href="#布尔值内置函数" class="headerlink" title="布尔值内置函数"></a><strong>布尔值内置函数</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">foo?string("yes","no")</span><br></pre></td></tr></table></figure><p>如果布尔值是true,那么返回”yes”,否则返回no,string用于将布尔值转换为字符串输出true转为”true”，false转换为”false”.</p><p><a name="a15e5652"></a></p><h2 id="运算符的使用"><a href="#运算符的使用" class="headerlink" title="运算符的使用"></a>运算符的使用</h2><p><a name="17f2a104"></a></p><h3 id="取整运算"><a href="#取整运算" class="headerlink" title="取整运算"></a>取整运算</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span>=<span class="string">5</span>&gt;</span></span><br><span class="line">$&#123;(x/2)?&gt;int&#125;//2</span><br><span class="line">$&#123;1.1?int&#125;//1</span><br><span class="line">$&#123;1.999?int&#125; //1</span><br><span class="line">$&#123;-1.1?int&#125;//-1</span><br></pre></td></tr></table></figure><p><a name="a14e357b"></a></p><h3 id="大于号-gt-的使用"><a href="#大于号-gt-的使用" class="headerlink" title="大于号&gt;的使用"></a>大于号&gt;的使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span> = <span class="string">4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> (<span class="attr">x</span>&gt;</span>5) &gt;</span><br><span class="line">     x &gt; 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">x</span> = <span class="string">4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">x</span> <span class="attr">gt</span> <span class="attr">5</span> &gt;</span></span><br><span class="line">     x &gt; 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用&gt;=和&gt;的时候有一点小问题。FreeMarker解释&gt;的时候可以把它当作FTL标签的结束符。为了避免这种问题，不得不将表达式放到括号内：&lt;#if (x &gt; y) &gt;，另外，可以使用lt代替&lt;，lte代替&lt;=，gt代替&gt;，gte代替&gt;=。由于历史遗留的原因，FTL也支持\lt，\lte，\gt和\gte，使用他们和使用不带反斜杠的效果一样。切记不能直接 x&gt;5 原因是Freemarker内部的解析处理原因。</p><p><a name="c900eca0"></a></p><h1 id="Freemarker模板解析过程"><a href="#Freemarker模板解析过程" class="headerlink" title="Freemarker模板解析过程"></a>Freemarker模板解析过程</h1><p>概念啥东西，放上面基本都不看<del>~</del></p><p>例如：一个freemarker表达式” ${hello} “，会被解析成三个部分，分别是</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;hello&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面和后面的body标签，在freemarker中被定义为TextBlock，中间的变量定义为DollarVariable。那么目前的结构也就是RootExpression = TextBlock DollarVariable TextBlock。解释器一进来将会对RootExpression进行解析，RootExpression将会依次调用TextBlock DollarVariable TextBlock进行解析。不同类型将会做不同操作，根据传进来的Context参数进行相应赋值并输出等。<br>当Template启动解释时，由Environment进入调用根元素的访问动作，根元素会依次访问所包含的TemplateElement，直到所有叶子节点访问完成，这些访问动作是通过调用Environment的visit方法控制，Environment做些相关必要操作，再根据访问的节点类型调用相应节点的访问操作。当访问到包含需要解释器的元素节点时，则会启动解释器做解释操作，根据Expression类型，调用getStringValue，并传入参数Environment，相应类型的表达式根据Environment解释得到输入字符串的值，返回并写到响应流，即解释完成。</p><p><a name="c2bfe4e8"></a></p><h1 id="FreeMarker缓存处理"><a href="#FreeMarker缓存处理" class="headerlink" title="FreeMarker缓存处理"></a>FreeMarker缓存处理</h1><p>FreeMarker 的缓存处理主要用于模版文件的缓存，一般来讲，模版文件改动不会很频繁，在一个流量非常大的网站中，如果频繁的读取模版文件对系统的负担还是很重的，因此 FreeMarker 通过将模版文件的内容进行缓存，来降低模版文件读取的频次，降低系统的负载。当处理某个模版时，FreeMarker直接从缓存中返回对应的 Template 对象，并有一个默认的机制来保证该模版对象是跟模版文件同步的。如果使用的时候 FreemarkerServlet 时，有一个配置项template_update_delay用来指定更新模版文件的间隔时间，相当于多长时间检测一下是否有必要重新加载模版文件，0 表示每次都重新加载，否则为多少毫秒钟检测一下模版是否更改。FreeMarker定义了一个统一的缓存处理接口CacheStorage，默认的实现是 MruCacheStorage 最近最少使用的缓存策略</p><p><a name="82859061"></a></p><h1 id="Freemarker空值的处理"><a href="#Freemarker空值的处理" class="headerlink" title="Freemarker空值的处理"></a>Freemarker空值的处理</h1><p>FreeMarker的变量必须赋值，否则就会抛出异常。而对于FreeMarker来说，null值和不存在的变量是完全一样的，因为FreeMarker无法理解null值。FreeMarker提供两个运算符来避免空值：</p><p>（1）!运算符：指定缺失变量的默认值；<br>（2）??运算符：判断变量是否存在。</p><p>!运算符有两种用法：variable!或variable!defaultValue。第一种用法不给变量指定默认值，表明默认值是空字符串、长度为0的集合、或长度为0的Map对象。</p><p>使用!运算符指定默认值并不要求默认值的类型和变量类型相同 比如说:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#--</span> $&#123;<span class="attr">fulin</span>&#125;没有定义这个变量，会报异常!<span class="attr">--</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$&#123;fulin!&#125; <span class="tag">&lt;<span class="name">#--没有定义这个变量，默认值是空字符串!--</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$&#123;fulin!"abc"&#125; <span class="tag">&lt;<span class="name">#--没有定义这个变量，默认值是字符串abc!--</span>&gt;</span></span><br></pre></td></tr></table></figure><p>??运算符返回布尔值，如：variable??，如果变量存在，返回true，否则返回false。一般情况下与if指令共同使用。将它和if指令合并，如下面的例子：如果user变量不存在的话将会忽略整个问候代码段：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">user</span>??&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome $&#123;user&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于多级访问的变量，比如user.money.price，书写代码：user.money.price!0，仅当user.money存在而仅仅最后一个子变量price可能不存在（这种情况下我们假设价格是0）。如果user或者money不存在，那么模板处理过程将会以“未定义的变量”错误而停止。为了防止这种情况的发生，可以这样来书写代码(user.money.price)!0。这种情况下当animals或python不存在时表达式的结果仍然是0。对于??也是同样用来的处理这种逻辑的：user.money.price??对比(user.money.price)??来看。</p>]]></content>
      
      
      <categories>
          
          <category> 模版引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeMarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十五）MybatisPlus的整合</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89MybatisPlus%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89MybatisPlus%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>MyBatis-Plus（简称 MP）是一个MyBatis的增强工具 ，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。本篇文章介绍的是与springboot的整合。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062627889-1450bc8a-846b-4765-a562-3284f0da10c9.png#align=left&display=inline&height=250&originHeight=250&originWidth=505&size=0&status=done&width=505" class="lazyload"><br><a name="c666ad11"></a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 XML 热加载</strong>：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>支持关键词自动转义</strong>：支持数据库关键词（order、key……）自动转义，还可自定义关键词</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li><li><strong>内置 Sql 注入剥离器</strong>：支持 Sql 注入剥离，有效预防 Sql 注入攻击<br><br>不要忘记依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><a name="8b8ca150"></a></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>不多说这个非常爽，运行下能生成基本结构。我这里稍微加了点注释，写好表名直接运行就ok了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Generator</span><span class="params">(String[] tableName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//============================== 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/springboot-mybatisplus/src/main/java"</span>)</span><br><span class="line">                .setActiveRecord(<span class="keyword">true</span>)<span class="comment">// 是否支持 AR</span></span><br><span class="line">                .setAuthor(<span class="string">"fulin"</span>) <span class="comment">//设置作者名字</span></span><br><span class="line">                .setFileOverride(<span class="keyword">true</span>) <span class="comment">//文件覆盖(全新文件)</span></span><br><span class="line">                .setIdType(IdType.AUTO)<span class="comment">//主键策略</span></span><br><span class="line">                .setBaseResultMap(<span class="keyword">true</span>) <span class="comment">//SQL 映射文件</span></span><br><span class="line">                .setBaseColumnList(<span class="keyword">true</span>)<span class="comment">//SQL 片段</span></span><br><span class="line">                .setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//============================== 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setDbType(DbType.MARIADB)</span><br><span class="line">                .setUrl(<span class="string">"jdbc:mariadb://localhost:3306/test"</span>)</span><br><span class="line">                .setDriverName(<span class="string">"org.mariadb.jdbc.Driver"</span>)</span><br><span class="line">                .setUsername(<span class="string">"root"</span>)</span><br><span class="line">                <span class="comment">//.setSchemaName("public")</span></span><br><span class="line">                .setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//==============================包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">"com.maoxs"</span>)<span class="comment">//配置父包路径</span></span><br><span class="line">                .setModuleName(<span class="string">"base"</span>)<span class="comment">//配置业务包路径</span></span><br><span class="line">                .setMapper(<span class="string">"mapper"</span>)</span><br><span class="line">                .setEntity(<span class="string">"entity"</span>)</span><br><span class="line">                .setService(<span class="string">"service"</span>)</span><br><span class="line">                .setController(<span class="string">"controller"</span>);</span><br><span class="line">        <span class="comment">//.setServiceImpl("service.impl"); 会自动生成 impl，可以不设定</span></span><br><span class="line">        <span class="comment">//============================== 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输入文件名称</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/springboot-mybatisplus/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        <span class="comment">//============================== 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel)<span class="comment">//设置命名规则  underline_to_camel 底线变驼峰</span></span><br><span class="line">                .setColumnNaming(NamingStrategy.underline_to_camel)<span class="comment">//设置设置列命名  underline_to_camel 底线变驼峰</span></span><br><span class="line">                <span class="comment">//.setSuperEntityClass("com.maoxs.pojo")//设置继承类</span></span><br><span class="line">                <span class="comment">//.setSuperControllerClass("com.maoxs.controller")//设置继承类</span></span><br><span class="line">                .setEntityLombokModel(<span class="keyword">true</span>)<span class="comment">//是否加入lombok</span></span><br><span class="line">                .setInclude(tableName)<span class="comment">//设置表名</span></span><br><span class="line">                <span class="comment">//.setSuperEntityColumns("id") //设置超级超级列</span></span><br><span class="line">                .setControllerMappingHyphenStyle(<span class="keyword">true</span>)<span class="comment">//设置controller映射联字符</span></span><br><span class="line">                .setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);<span class="comment">//表的前缀</span></span><br><span class="line">        <span class="comment">//============================== 生成配置</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        mpg.setCfg(cfg)</span><br><span class="line">                .setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>))</span><br><span class="line">                .setGlobalConfig(gc)</span><br><span class="line">                .setDataSource(dsc)</span><br><span class="line">                .setPackageInfo(pc)</span><br><span class="line">                .setStrategy(strategy)</span><br><span class="line">                <span class="comment">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span></span><br><span class="line">                .setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Generator(<span class="keyword">new</span> String[]&#123;<span class="string">"x"</span>, <span class="string">"xx"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是生成代码的工作，然后呢为了确保你生成的Mapper接口可以扫描到，还需要这样的一个配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.maoxs.base.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**<a href>@MapperScan </a> ** 是用来扫描你mapper所在的包，多个包的话英文逗号隔开即可。剩下的大多数MybatisPlus的配置基本都是在这里配置。</p><p><a name="crud"></a></p><h2 id="crud"><a href="#crud" class="headerlink" title="crud"></a>crud</h2><p>这边就阐述什么表名什么的，可以自己尝试创建，这里只提到怎么使用，重要的配置我会贴出.</p><p>这边呢就贴出一个简单的增删改查的测试类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.crud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.SpringbootMybatisplusApplicationTests;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.base.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.base.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrudTest</span> <span class="keyword">extends</span> <span class="title">SpringbootMybatisplusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">17</span>);</span><br><span class="line">        user.setName(<span class="string">"我是付林"</span>);</span><br><span class="line">        <span class="keyword">int</span> num = userMapper.insert(user);</span><br><span class="line">        Assert.assertTrue(num &gt; <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"插入成功Id为"</span> + user.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertTrue(userMapper.deleteById(<span class="number">14L</span>) &gt; <span class="number">0</span>);</span><br><span class="line">        Assert.assertTrue(userMapper.delete(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda().eq(User::getName, <span class="string">"我是付林"</span>)) &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertTrue(userMapper.updateById(<span class="keyword">new</span> User().setId(<span class="number">1L</span>).setAge(<span class="number">100</span>).setName(<span class="string">"我是付林"</span>)) &gt; <span class="number">0</span>);</span><br><span class="line">        Assert.assertTrue(userMapper.update(<span class="keyword">new</span> User(),</span><br><span class="line">                <span class="keyword">new</span> UpdateWrapper&lt;User&gt;().lambda().set(User::getAge, <span class="number">2</span>).eq(User::getId, <span class="number">2</span>)</span><br><span class="line">        ) &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(<span class="string">"cfulin"</span>, userMapper.selectById(<span class="number">3L</span>).getName());</span><br><span class="line">        User user = userMapper.selectOne(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda().eq(User::getId, <span class="number">2</span>));</span><br><span class="line">        Assert.assertEquals(<span class="string">"付林1"</span>, user.getName());</span><br><span class="line">        Assert.assertTrue(<span class="number">2</span> == user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里呢说明一下Wrapper 这可是个好玩的东西，相当于QBC那样的动态sql拼接，这里mybatisplus是3.0以上的版本，算是一个大版本，这里呢条件的拼接呢都使用了 lambda 方式。如果不想使用，比如new QueryWrapper().lambda().eq(User::getId, 2) 可以写为new QueryWrapper().eq(“id”, 2)</p><p><a name="2f702cd5"></a></p><h2 id="AR-ActiveRecord"><a href="#AR-ActiveRecord" class="headerlink" title="AR(ActiveRecord)"></a>AR(ActiveRecord)</h2><p>在web后台开发领域，经常会遇到应用程序操作数据库的场景，目前市面上存在的数据库包括mysql、postgresql、oracle、sqlite等，为了屏蔽不同数据库的差异，产生了ORM（Object-Relational-Mapping），在实现层面，又分为DataMapper和ActiveRecord两种。mybatis对其也有支持</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062627899-1f294eb4-03d1-43cd-a6ed-ddf8dc004b7b.png#align=left&display=inline&height=526&originHeight=526&originWidth=1406&size=0&status=done&width=1406" class="lazyload"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.crud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.SpringbootMybatisplusApplicationTests;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.base.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: plus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Ar测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-24 12:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArTest</span> <span class="keyword">extends</span> <span class="title">SpringbootMybatisplusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ARInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"fulinlin"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//字段不为空插入</span></span><br><span class="line">        user.insert();</span><br><span class="line">        <span class="comment">//ID为空插入，否则为更新</span></span><br><span class="line">        user.insertOrUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ARUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"快乐猫"</span>);</span><br><span class="line">        user.setAge(<span class="number">24</span>);</span><br><span class="line">        user.setId(<span class="number">3L</span>);</span><br><span class="line">        <span class="comment">//ID 修改</span></span><br><span class="line">        user.updateById();</span><br><span class="line">        <span class="comment">//条件修改</span></span><br><span class="line">        user.update(<span class="keyword">new</span> UpdateWrapper&lt;User&gt;().lambda().eq(User::getId, <span class="string">"5"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ARSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4L</span>);</span><br><span class="line">        <span class="comment">//setId</span></span><br><span class="line">        user.selectById();</span><br><span class="line">        <span class="comment">//直接键入 Id</span></span><br><span class="line">        user.selectById(<span class="number">24</span>);</span><br><span class="line">        <span class="comment">//条件</span></span><br><span class="line">        user.selectCount(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda().eq(User::getId, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        user.selectAll();</span><br><span class="line">        <span class="comment">//查询总记录数</span></span><br><span class="line">        user.selectList(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda().eq(User::getName, <span class="string">"fulinlin"</span>));</span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        user.selectOne(<span class="keyword">new</span> QueryWrapper());</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        user.selectPage(<span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>), <span class="keyword">new</span> QueryWrapper&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ARDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//删除不存在的数据 在逻辑上也是成功的，返回结果 true</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4L</span>);</span><br><span class="line">        user.deleteById();</span><br><span class="line">        user.deleteById(<span class="number">31</span>);</span><br><span class="line">        <span class="comment">//条件删除</span></span><br><span class="line">        user.delete(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda().eq(User::getId, <span class="number">3L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="3862626c"></a></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>MybatisPlus也提供了一个分页插件，使用起来及其方便，这里说明两种情况下的分页，一种是自带的，一种是自定义的。不过呢做这些之前你要先引入这个配置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页插件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e67517ec"></a></p><h3 id="普通分页"><a href="#普通分页" class="headerlink" title="普通分页"></a>普通分页</h3><p>普通分页需要传递一个page 的对象，里面说明你当前页和分页的大小,用起来也是非常的舒服。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Page</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(Collections.unmodifiableCollection(userIPage.getRecords()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="14d026fc"></a></p><h3 id="自定义分页"><a href="#自定义分页" class="headerlink" title="自定义分页"></a>自定义分页</h3><p>如果在某些情况下需要自己定义分页，那怎么办呢</p><p>首先呢在mapper接口中定义一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3.x 的 page 可以进行取值,多个入参记得加上注解</span></span><br><span class="line"><span class="comment">* 自定义 page 类必须放在入参第一位</span></span><br><span class="line"><span class="comment">* 返回值可以用 IPage&lt;T&gt; 接收 也可以使用入参的 MyPage&lt;T&gt; 接收</span></span><br><span class="line"><span class="comment">* todo 目前使用注解会报错,写在 xml 里就没事</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> myPage 自定义 page</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 分页数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">MyPage&lt;User&gt; <span class="title">mySelectPage</span><span class="params">(@Param(<span class="string">"pg"</span>)</span> MyPage&lt;User&gt; myPage)</span>;</span><br></pre></td></tr></table></figure><p>然后呢你需要在xml中写一个select做绑定</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"mySelectPage"</span> <span class="attr">resultType</span>=<span class="string">"com.maoxs.base.entity.User"</span>&gt;</span></span><br><span class="line">select *  from user where name like '%' #&#123;pg.selectStr&#125; '%'and age &gt; #&#123;pg.selectInt&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里呢，把用到的MyPage贴出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPage</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5194933845448697148L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer selectInt;</span><br><span class="line">    <span class="keyword">private</span> String selectStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPage</span><span class="params">(<span class="keyword">long</span> current, <span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(current, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么使用呢？贴一个测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     MyPage&lt;User&gt; myPage = <span class="keyword">new</span> MyPage&lt;User&gt;(<span class="number">1</span>, <span class="number">5</span>).setSelectInt(<span class="number">10</span>).setSelectStr(<span class="string">"fulin"</span>);</span><br><span class="line">     MyPage&lt;User&gt; userMyPage = userMapper.mySelectPage(myPage);</span><br><span class="line">     System.out.println(Collections.unmodifiableCollection(userMyPage.getRecords()));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a name="c0f4a318"></a></p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>有时候在做业务的时候，由于涉及到数据的安全性和方便以后的维护，删除一般都是假删除，当然了mybatisplus也提供的非常简便的做法，如果想使用mybatisplus的逻辑删除，必须要注入LogicSqlInjector 这个类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 逻辑删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢需要在实体类的属性中加入<a href>@TableLogic </a> 注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"> <span class="keyword">private</span> Integer isDelete;</span><br></pre></td></tr></table></figure><p>这里有两种配置，一中是局部一中是全局.</p><p>局部配置呢就在注解中设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span>(value = <span class="string">"0"</span>,delval = <span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer isDelete;</span><br></pre></td></tr></table></figure><p>全局呢就是在yml中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment">#删除后的状态 默认值1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment">#逻辑前的值 默认值0</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/base/*Mapper.xml</span></span><br></pre></td></tr></table></figure><p>然后呢你进行删除的时候，这个加入注解的字段就会为你设置的制定逻辑删除的状态，并且，如果你设置了删除值，查询和修改都不会在对删除的数据进行操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogicDeleteBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userMapper.deleteBatchIds(Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">userMapper.deleteById(<span class="number">2L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="6018a39e"></a></p><h2 id="公共字段填充"><a href="#公共字段填充" class="headerlink" title="公共字段填充"></a>公共字段填充</h2><p>对于一些公用的字段，比如插入时间，更新时间等等。这些字段，mybatisplus对其也有非常简化的做法.</p><p>想使用填充呢必须先在实体类中的字段上添加注解<a href>@TableField </a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//----------------- 公共字段填充注解</span></span><br><span class="line"><span class="comment">//      ==&gt; DEFAULT         默认不处理</span></span><br><span class="line"><span class="comment">//      ==&gt; INSERT          插入填充字段</span></span><br><span class="line"><span class="comment">//      ==&gt; UPDATE          更新填充字段</span></span><br><span class="line"><span class="comment">//      ==&gt; INSERT_UPDATE   插入/更新填充字段</span></span><br><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line"><span class="keyword">private</span> LocalDateTime createDate;</span><br></pre></td></tr></table></figure><p>然后呢定义一个公用字段的填充类就行了，但是这个类必须实现MetaObjectHandler 接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.util.DateTimeUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 填充器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        metaObject.setValue(<span class="string">"createDate"</span>, DateTimeUtils.getCurrentLocalDateTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"createDate"</span>,DateTimeUtils.getCurrentLocalDateTime(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢你的插入和更新就可以自动填充字段了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userMapper.update(<span class="keyword">new</span> User(), <span class="keyword">new</span> UpdateWrapper&lt;User&gt;().lambda().set(User::getName, <span class="string">"付林"</span>).eq(User::getId, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"fulinlin"</span>);</span><br><span class="line">user.setAge(<span class="number">12</span>);</span><br><span class="line">userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e024d292"></a></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>Sequence是数据库系统的特性，有的数据库实现了Sequence，有的则没有。比如Oracle、DB2、PostgreSQL数据库实现Sequence，MySQL、SQL Server、Sybase等数据库没有Sequence。那在mybatisplus里怎么设置呢？</p><p>mybatisplus 目前支持DB2KeyGenerator 、OracleKeyGenerator 、PostgreKeyGenerator 、H2KeyGenerator</p><p>想使用呢就需要把这些Generator 注入比如注入H2KeyGenerator</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* sequence主键，需要配置一个主键生成器</span></span><br><span class="line"><span class="comment">* 配合实体类注解  <span class="doctag">@KeySequence</span> 和  <span class="doctag">@TableId</span>  type=INPUT</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> H2KeyGenerator <span class="title">h2KeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> H2KeyGenerator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢实体类中的<a href>@TableId </a> 的 type的IdType 必须设置为INPUT</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.base.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.activerecord.Model;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-09-24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@KeySequence</span>(<span class="string">"SEQ_USER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">//----------------- 公共字段填充注解</span></span><br><span class="line">    <span class="comment">//      ==&gt; AUTO            数据库ID自增</span></span><br><span class="line">    <span class="comment">//      ==&gt; NONE            默认状态默认为ID_WORKER 全局唯一ID为空自动填充</span></span><br><span class="line">    <span class="comment">//      ==&gt; INPUT           用户输入配合序列</span></span><br><span class="line">    <span class="comment">//      ==&gt; ID_WORKER       分布式高效有序ID生产黑科技 全局唯一ID 为空自动填充</span></span><br><span class="line">    <span class="comment">//      ==&gt; ID_WORKER_STR   分布式高效字符串ID生产黑科技 全局唯一ID 为空自动填充</span></span><br><span class="line">    <span class="comment">//      ==&gt; UUID            这个大家都懂 全局唯一ID 为空自动填充</span></span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"id"</span>, type = IdType.INPUT)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下看看就行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">"sequence"</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    Long id1 = user.getId();</span><br><span class="line">    System.out.println(id1);</span><br><span class="line">    Assert.assertTrue(<span class="string">"sequence start with 1000"</span>, id1 &gt;= <span class="number">1000</span>);</span><br><span class="line">    user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setName(<span class="string">"sequence2"</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    Long id2 = user.getId();</span><br><span class="line">    Assert.assertTrue(<span class="string">"squence increment by 1"</span>, id2 - id1 == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="99b90c80"></a></p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>通常呢我们在做业务的时候，喜欢用枚举定义常量，这样方便我们维护和管理。比如数据库中的一些字段是以 数字来定义状态的，这时候呢不做好注释，会给交接人员和新上手项目的人带来一定的不便，这时候枚举就是解决这种问题的好办法。同样呢，mybatisplus 对枚举有很好的支持。</p><p>想使用枚举呢，必须要让mybatisplus扫描到你的枚举类</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">typeEnumsPackage:</span> <span class="string">com.maoxs.enums</span></span><br></pre></td></tr></table></figure><p>紧接着我们就来定义一个枚举</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.enums;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserTypeEnum  &#123;</span><br><span class="line">    Default(<span class="number">1</span>, <span class="string">"普通用户"</span>),</span><br><span class="line">    VIP(<span class="number">2</span>, <span class="string">"会员"</span>),</span><br><span class="line">    SUPER_VIP(<span class="number">3</span>, <span class="string">"超级会员"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserTypeEnum(<span class="keyword">final</span> <span class="keyword">int</span> value, <span class="keyword">final</span> String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这种定义扫描之外呢还可以实现IEnum 接口，申明自动注入为通用枚举转换处理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserTypeEnum implements IEnum&lt;Integer&gt; &#123;</span><br><span class="line">    Default(<span class="number">1</span>, <span class="string">"普通用户"</span>),</span><br><span class="line">    VIP(<span class="number">2</span>, <span class="string">"会员"</span>),</span><br><span class="line">    SUPER_VIP(<span class="number">3</span>, <span class="string">"超级会员"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserTypeEnum(<span class="keyword">final</span> <span class="keyword">int</span> value, <span class="keyword">final</span> String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实体类中呢直接吧枚举当做类型即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserTypeEnum UserType;</span><br></pre></td></tr></table></figure><p>然后我们测试下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.crud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.SpringbootMybatisplusApplicationTests;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.base.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.base.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.enums.UserTypeEnum;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: plus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 枚举测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-24 13:00</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> <span class="keyword">extends</span> <span class="title">SpringbootMybatisplusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">11</span>);</span><br><span class="line">        user.setName(<span class="string">"快乐鱼"</span>);</span><br><span class="line">        user.setUserType(UserTypeEnum.Default);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">"user_type"</span>, UserTypeEnum.Default));</span><br><span class="line">        System.out.println(users.get(<span class="number">0</span>).getUserType().getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里需要注意的是，枚举类型不能运用lambda 来片接Wrapper</strong></p><p><a name="43334805"></a></p><h2 id="自定义全局操作"><a href="#自定义全局操作" class="headerlink" title="自定义全局操作"></a>自定义全局操作</h2><p>有时候我们想定义自己的全局方法，当然mybatisplus也提供了扩展，首先呢，定义一个类继承AbstractMethod</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.methods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.TableInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除全部</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * 2018/9/11 20:29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteAll</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 执行 SQL ，动态 SQL 参考类 SqlMethod */</span></span><br><span class="line">        String sql = <span class="string">"delete from "</span> + tableInfo.getTableName();</span><br><span class="line">        <span class="comment">/* mapper 接口方法名一致 */</span></span><br><span class="line">        String method = <span class="string">"deleteAll"</span>;</span><br><span class="line">        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addDeleteMappedStatement(mapperClass, method, sqlSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里呢注入了一个deleteAll 的方法，用来删除表中所有的记录。然后呢，需要自定义sql注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.injector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.DefaultSqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.samples.injector.methods.DeleteAll;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Sql注入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * 2018/8/11 20:23.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="keyword">super</span>.getMethodList();</span><br><span class="line">        <span class="comment">//增加自定义方法</span></span><br><span class="line">        methodList.add(<span class="keyword">new</span> DeleteAll());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来怎么使用呢?只需要在接口中 定义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.base.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.samples.injector.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢，贴个测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">userMapper.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bf97e7ab"></a></p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>当你在进行数据库操作的时候,当要更新一条记录的时候，希望这条记录没有被别人更新.这种情况经常用到。</p><p>一般乐观锁实现有这几种</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><p>但是在mybatisplus中乐观锁就很好处理,配置只需要两部,首先呢就是要注入OptimisticLockerInterceptor</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解字段中一定要加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><p>特别说明:</p><ul><li><strong>支持的数据类型只有:int、Integer、long、Long、Date、Timestamp、LocalDateTime</strong></li><li>整数类型下 <code>newVersion = oldVersion + 1</code></li><li><code>newVersion</code> 会回写到 <code>entity</code> 中</li><li>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法</li><li><strong>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</strong></li></ul><p>给个测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 乐观锁插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optimisticLockerTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">11</span>);</span><br><span class="line">    user.setName(<span class="string">"hahha"</span>);</span><br><span class="line">    user.setVersion(<span class="number">1</span>);</span><br><span class="line">     <span class="comment">//AR 模式没有乐观锁形式</span></span><br><span class="line"><span class="comment">//employee.updateById();</span></span><br><span class="line">    <span class="comment">//MP 模式才具有乐观锁模式，version修改</span></span><br><span class="line">    employeeMapper.updateById(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里说明下AR模式还没有乐观锁形势</strong></p><p><a name="a33920a4"></a></p><h2 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h2><p>可以这样理解，许多组织都将使用同一个应用程序；他们必须能够允许自己的用户访问应用程序，但是应用程序必须只允许每个组织自己的成员访问其组织的数据。</p><p>在查询的时候呢肯定要对其进行必要的筛选</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多租户属于 SQL 解析部分，依赖 MP 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 【测试多租户】 SQL 解析处理拦截器&lt;br&gt;</span></span><br><span class="line"><span class="comment">         * 这里固定写成住户 1 实际情况你可以从cookie读取，因此数据看不到 【 麻花藤 】 这条记录（ 注意观察          *  SQL ）&lt;br&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;ISqlParser&gt; sqlParserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TenantSqlParser tenantSqlParser = <span class="keyword">new</span> TenantSqlParser();</span><br><span class="line">        tenantSqlParser.setTenantHandler(<span class="keyword">new</span> TenantHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Expression <span class="title">getTenantId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LongValue(<span class="number">1L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTenantIdColumn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"tenant_id"</span>;<span class="comment">//租户 ID</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doTableFilter</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 这里可以判断是否过滤表</span></span><br><span class="line">                <span class="comment">/*if ("user".equals(tableName)) &#123;</span></span><br><span class="line"><span class="comment">                    return true;</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        sqlParserList.add(tenantSqlParser);</span><br><span class="line">        paginationInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line"><span class="comment">//        paginationInterceptor.setSqlParserFilter(new ISqlParserFilter() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public boolean doFilter(MetaObject metaObject) &#123;</span></span><br><span class="line"><span class="comment">//                MappedStatement ms = PluginUtils.getMappedStatement(metaObject);</span></span><br><span class="line"><span class="comment">//                // 过滤自定义查询此时无租户信息约束【 麻花藤 】出现</span></span><br><span class="line"><span class="comment">//                if ("com.maoxs.base.UserMapper.selectListBySQL".equals(ms.getId())) &#123;</span></span><br><span class="line"><span class="comment">//                    return true;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                return false;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相关 SQL 解析如多租户可通过 <code>@SqlParser(filter=true)</code> 排除 SQL 解析，注意！！全局配置 sqlParserCache 设置为 true 才生效。yml配置如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启 SQL 解析缓存注解生效</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">    <span class="attr">global-config:</span></span><br><span class="line">        <span class="attr">sql-parser-cache:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a name="5bf481dc"></a></p><h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><p>这个插件呢就是  性能分析拦截器，用于输出每条 SQL 语句及其执行时间,只需要配置下就可以了,不建议生产使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启用性能分析插件</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意下PerformanceInterceptor里面有两个参数</p><ul><li>参数：maxTime SQL 执行最大时长，超过自动停止运行，有助于发现问题。</li><li>参数：format SQL SQL是否格式化，默认false。</li></ul><p><a name="b3aecee4"></a></p><h2 id="Sql执行分析插件"><a href="#Sql执行分析插件" class="headerlink" title="Sql执行分析插件"></a>Sql执行分析插件</h2><p>这玩意就是吧一些具体的数据显示出来,适合开发使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlExplainInterceptor <span class="title">sqlExplainInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlExplainInterceptor sqlExplainInterceptor = <span class="keyword">new</span> SqlExplainInterceptor();</span><br><span class="line">    List&lt;ISqlParser&gt; sqlParserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    sqlParserList.add(<span class="keyword">new</span> BlockAttackSqlParser());</span><br><span class="line">    sqlExplainInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line">    <span class="keyword">return</span> sqlExplainInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十四）Dubbo的整合</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89Dubbo%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89Dubbo%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。</p><p>在2月15日，大年三十，经过一系列紧张的投票，来自阿里巴巴的广受社区欢迎的RPC开源框架Dubbo宣布正式进入Apache孵化器。说起Dubbo框架，可能很多后端开发者都有所了解，它是国内比较早的、影响较大的开源项目，包括阿里巴巴、京东、当当网、去哪儿网、网易考拉、微店等电商平台都有其成功应用案例。</p><p>Dubbo于2011年开源，之后就迅速成为了国内该类开源项目的佼佼者。可以想象，2011年时，优秀的、可在生产环境使用的RPC框架很少，Dubbo的出现迅速给人眼前一亮的感觉，而同时它又有阿里巴巴背书，所以也迅速收到了开发者的亲睐。Dubbo 目前在 GitHub 上有超过 16000 个 star 和超过 12000 的 fork 数，绝对是国内影响力最大的开源项目之一。<br>但奇怪的是，在2014年10月30日发布2.4.11版本后，Dubbo突然停止更新，当时社区一片哗然（其实是在2012年10月之后就基本停止了重要升级，改为阶段性维护）。具体原因现在也不得而知，知乎上也有一些讨论，包括团队调整、内部主推HSF等。不过可以确认的是，在4年前，国内企业对于开源的重视程度都远远没有今天高。</p><p>而在官方停止更新Dubbo之后，当当网（Dubbox）、网易考拉（Dubbok）都有维护自己单独的分支，这也可以从另外一个侧面证明Dubbo确实应用到了这些企业的重点业务，并且规模不小。</p><p>随着阿里巴巴对于开源的逐步重视，2017年9月7日，Dubbo悄悄的在GitHub发布了2.5.4版本。随后，没过多久，又迅速发布了2.5.5、2.5.6、2.5.7等版本。在10月举行的云栖大会上，阿里宣布Dubbo被列入集团重点维护开源项目，这也就意味着Dubbo起死回生，开始重新进入快车道。</p><p>这章主要介绍Dubbo是怎么集成springboot的，Dubbo起死回生后，同样官方也放出的对应boot的start</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最新版本呢是兼容springboot 2.x 以上，其中还有0.1.0版本主要针对springboot1.5x的兼容，整合包内默认提供了apcache的curator 来连接zookeeper，所以不用在引用连接zookeeper的包。</p><p><a name="6bc4ecf0"></a></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062584708-58ffe336-c6cc-4ae4-b6cb-00abb2367a05.png#align=left&display=inline&height=156&originHeight=156&originWidth=590&size=0&status=done&width=590" class="lazyload"></p><ul><li>dubbo-api 是服务的接口</li><li>dubbo-provider 是服务的生产者 引用dubbo-api</li><li>dubbo-consumer 是服务的消费者 引用dubbo-api</li></ul><p><a name="92cd2ec6"></a></p><h2 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个DemoService的接口，并且写一个sayHello的方法</p><p><a name="8073f359"></a></p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p>首先呢看下yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot-service-provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20880</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">registry:</span> <span class="string">zookeeper://127.0.0.1:6379</span>  <span class="comment">#如果想改用redis注册中心呢把zookeeper改为redis即可</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-provider-demo</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">dubbo-provider-demo</span></span><br><span class="line">    <span class="attr">qos-port:</span> <span class="number">1111</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">basePackages:</span> <span class="string">com.maoxs.service.impl</span></span><br><span class="line"><span class="attr">demo:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>如果想改用redis注册中心呢把zookeeper改为redis即可。这里的scan.basePackages来扫描dubbo的服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.MethodConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.validation.MethodValidated;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.DemoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(version = <span class="string">"$&#123;demo.service.version&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDemoService</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name + <span class="string">" (from Spring Boot)"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个呢是服务的具体实现，切记，这里的@Service用的是dubbo的注解</p><p>然后呢是启动类 由于生产者作用只是把服务注册到注册中心，所以可以把启动类设置类非web应用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDubboProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">new</span> SpringApplicationBuilder(SpringbootDubboProviderApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>) // 非 <span class="title">Web</span> 应用</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="04933dd1"></a></p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>在来看些消费者的代码</p><p>还是先看yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-consumer</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line">    <span class="comment">#address: redis://127.0.0.1:6379</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">basePackages:</span> <span class="string">com.maoxs.controller</span></span><br><span class="line"><span class="attr">demo:</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>然后呢，我们这里做一个controller来调用远程的服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"$&#123;demo.service.version&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢，我们启动zookeeper 注册中心，把服务注册上去来看下效果</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062584729-2f4e4b02-08ac-4469-90b2-ffd05a39afc1.png#align=left&display=inline&height=384&originHeight=384&originWidth=962&size=0&status=done&width=962" class="lazyload"></p><p>ok，我们看到调用成功了！！</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十三）Druid数据源</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89Druid%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89Druid%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能。考虑到可能是数据库连接的问题，所以我打算引入其他的数据池，引入数据池的时候找来找去，比较了当前两个最火的数据池，druid和HikariCP，比来比去选了阿里的druid，虽然spring boot默认不支持druid，而是支持HikariCP,而且HikariCP的性能更好，但是阿里功能多，界面友好方便，性价比更高！<br><a name="224e2ccd"></a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先呢引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢在yml中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">druid:</span></span><br><span class="line">  <span class="attr">driver-class:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">9000</span></span><br><span class="line">  <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">initial-size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.8.100:3306/test?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>自定义配置有助于更好的维护</p><p>再然后呢是或者配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"druid"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String driverClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriverClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driverClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverClass</span><span class="params">(String driverClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driverClass = driverClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxActive</span><span class="params">(<span class="keyword">int</span> maxActive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxActive = maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinIdle</span><span class="params">(<span class="keyword">int</span> minIdle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minIdle = minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInitialSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitialSize</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initialSize = initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTestOnBorrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestOnBorrow</span><span class="params">(<span class="keyword">boolean</span> testOnBorrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.testOnBorrow = testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再然后呢就是注入我们的数据源</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureBefore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(DruidProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">DruidDataSource</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"druid"</span>, name = <span class="string">"url"</span>)</span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DruidAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DruidProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(properties.getUrl());</span><br><span class="line">        dataSource.setUsername(properties.getUsername());</span><br><span class="line">        dataSource.setPassword(properties.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (properties.getInitialSize() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dataSource.setInitialSize(properties.getInitialSize());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (properties.getMinIdle() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dataSource.setMinIdle(properties.getMinIdle());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (properties.getMaxActive() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dataSource.setMaxActive(properties.getMaxActive());</span><br><span class="line">        &#125;</span><br><span class="line">        dataSource.setTestOnBorrow(properties.isTestOnBorrow());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，大功告成，启动项目看下你的数据源</p><p><a name="26f4e85a"></a></p><h2 id><a href="#" class="headerlink" title></a><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542727-8930c629-d46e-4bf9-9de5-32eff33aa2fc.png#align=left&display=inline&height=226&originHeight=226&originWidth=1116&size=0&status=done&width=1116" class="lazyload"></h2><p><a name="894a0e84"></a></p><h1 id="监控中心"><a href="#监控中心" class="headerlink" title="监控中心"></a>监控中心</h1><p>既然是为监控而生的数据源那肯定就要有监控页面啦</p><p>只需要配置如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(DruidConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"init Druid Servlet Configuration "</span>);</span><br><span class="line">    ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">    servletRegistrationBean.setServlet(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">    servletRegistrationBean.addUrlMappings(<span class="string">"/druid/*"</span>);</span><br><span class="line">    Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    initParameters.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);<span class="comment">// 用户名</span></span><br><span class="line">    initParameters.put(<span class="string">"loginPassword"</span>, <span class="string">"admin"</span>);<span class="comment">// 密码</span></span><br><span class="line">    initParameters.put(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);<span class="comment">// 禁用HTML页面上的“Reset All”功能</span></span><br><span class="line">    initParameters.put(<span class="string">"allow"</span>, <span class="string">""</span>); <span class="comment">// IP白名单 (没有配置或者为空，则允许所有访问)</span></span><br><span class="line">    <span class="comment">//initParameters.put("deny", "192.168.20.38");// IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class="line">    servletRegistrationBean.setInitParameters(initParameters);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">    filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">    filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的项目端口为8080  启动项目呢访问<a href="http://localhost:8080/druid/login.html" target="_blank" rel="noopener">http://localhost:8080/druid/login.html</a></p><p>可以看到  棒棒哒出来了用户名密码都是我们设置的</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542653-9ddeefea-b6c6-474d-89c4-fa15f5ba9073.png#align=left&display=inline&height=575&originHeight=575&originWidth=1362&size=0&status=done&width=1362" class="lazyload"></p><p>进去看看， 功能蛮多的。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542698-04a77cab-b2d5-4d80-ab77-8d50deff0254.png#align=left&display=inline&height=883&originHeight=883&originWidth=1891&size=0&status=done&width=1891" class="lazyload"></p><hr><p><a name="84ea79b6"></a></p><h1 id="sql监控"><a href="#sql监控" class="headerlink" title="sql监控"></a>sql监控</h1><p>有时候我们开发在灰度测试的时候呢，希望看到sql的执行效率时间，以此来作为我们优化的参考，那么怎么进行sql的监控呢？</p><p>这边呢我接入了mybatis做了一个列表查询</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542710-d40be3f7-045a-483c-af8b-d32dbbece41f.png#align=left&display=inline&height=519&originHeight=519&originWidth=1011&size=0&status=done&width=1011" class="lazyload"></p><p>然后呢只需要在注入DataSource的时候呢加入下面一行代码即可 当然你也可以配置到你的yml中，不过呢这个是比较占内存的，项目上线后切记关掉。</p><p><a name="41a24121"></a></p><h2 id="-1"><a href="#-1" class="headerlink" title></a><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542735-c537f212-c519-4525-b392-e72efb31edcd.png#align=left&display=inline&height=518&originHeight=518&originWidth=847&size=0&status=done&width=847" class="lazyload"></h2><p><a name="5b4413c8"></a></p><h1 id="sql防火墙"><a href="#sql防火墙" class="headerlink" title="sql防火墙"></a>sql防火墙</h1><p>配置WallFilter，可以起到拦截作用，从而形成SQL的白名单和黑名单。</p><p>配置也非常简单</p><p>只需要注入一个wallFilter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"wallFilter"</span>)</span><br><span class="line">    <span class="function">WallFilter <span class="title">wallFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WallConfig wallConfig = <span class="keyword">new</span> WallConfig();</span><br><span class="line">        <span class="comment">//允许sql批量操作</span></span><br><span class="line">        wallConfig.setMultiStatementAllow(<span class="keyword">true</span>);</span><br><span class="line">        wallConfig.setNoneBaseStatementAllow(<span class="keyword">true</span>);<span class="comment">//允许非基本语句的其他语句</span></span><br><span class="line">        WallFilter wfilter = <span class="keyword">new</span> WallFilter();</span><br><span class="line">        wfilter.setConfig(wallConfig);</span><br><span class="line">        <span class="keyword">return</span> wfilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在注入DataSource的时候添加如下代码就可以了</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542668-16fac028-f598-4342-8e1f-2e38f10ecc5a.png#align=left&display=inline&height=457&originHeight=457&originWidth=920&size=0&status=done&width=920" class="lazyload"></p><p>然后我们启动项目看下拦截的效果 棒棒哒 生效了</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062542683-4a382d29-05e5-48df-97d7-78fcfe80f3e1.png#align=left&display=inline&height=799&originHeight=799&originWidth=1856&size=0&status=done&width=1856" class="lazyload"></p><p><a name="048cc6eb"></a></p><h1 id="spring监控"><a href="#spring监控" class="headerlink" title="spring监控"></a>spring监控</h1><p>Druid提供了Spring和Jdbc的关联监控。</p><p>配置也很简单</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.spring.stat.DruidStatInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.JdkRegexpMethodPointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// AOP 切面</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidSpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidStatInterceptor <span class="title">druidStatInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidStatInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdkRegexpMethodPointcut <span class="title">druidStatPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdkRegexpMethodPointcut jdkRegexpMethodPointcut = <span class="keyword">new</span> JdkRegexpMethodPointcut();</span><br><span class="line">        <span class="comment">//指明需要监控的类</span></span><br><span class="line">        jdkRegexpMethodPointcut.setPatterns(<span class="string">"com.maoxs.conf.*"</span>, <span class="string">"com.maoxs.controller.*"</span>);</span><br><span class="line">        <span class="keyword">return</span> jdkRegexpMethodPointcut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">druidAdviceAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultBeanFactoryPointcutAdvisor defaultBeanFactoryPointcutAdvisor = <span class="keyword">new</span> DefaultBeanFactoryPointcutAdvisor();</span><br><span class="line">        defaultBeanFactoryPointcutAdvisor.setAdvice(druidStatInterceptor());</span><br><span class="line">        defaultBeanFactoryPointcutAdvisor.setPointcut(druidStatPointcut());</span><br><span class="line">        <span class="keyword">return</span> defaultBeanFactoryPointcutAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要一个切面即可，然后呢我们访问下看看 okokok也是没问题的</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062543072-858769c9-1762-46b0-87ee-72e4149246f3.png#align=left&display=inline&height=848&originHeight=848&originWidth=1779&size=0&status=done&width=1779" class="lazyload"></p><p><a name="27234ba4"></a></p><h1 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h1><p>首先呢贴出yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">master:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.8.100:3306/test?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">initial-size:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#从数据源</span></span><br><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.8.100:3306/shiro?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">initial-size:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置的话首先是配置的获取  主从都是一样的，只需要改变下prefix</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.look;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"cluster.datasource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidClusterProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String driverClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>     maxActive;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>     minIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>     initialSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriverClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driverClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverClass</span><span class="params">(String driverClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driverClass = driverClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxActive</span><span class="params">(<span class="keyword">int</span> maxActive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxActive = maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinIdle</span><span class="params">(<span class="keyword">int</span> minIdle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.minIdle = minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInitialSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitialSize</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initialSize = initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTestOnBorrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestOnBorrow</span><span class="params">(<span class="keyword">boolean</span> testOnBorrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.testOnBorrow = testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是主库的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.look;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureBefore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(DruidMasterProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">DruidDataSource</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"master.datasource"</span>, name = <span class="string">"url"</span>)</span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DruidMasterAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DruidMasterProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"masterDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(properties.getUrl());</span><br><span class="line">        dataSource.setUsername(properties.getUsername());</span><br><span class="line">        dataSource.setPassword(properties.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (properties.getInitialSize() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dataSource.setInitialSize(properties.getInitialSize());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (properties.getMinIdle() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dataSource.setMinIdle(properties.getMinIdle());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (properties.getMaxActive() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dataSource.setMaxActive(properties.getMaxActive());</span><br><span class="line">        &#125;</span><br><span class="line">        dataSource.setTestOnBorrow(properties.isTestOnBorrow());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"masterTransactionManager"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">masterTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(masterDataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切记如果不是使用springboot默认yml主库的配置 必须要在注入主库的时候加入 @Primary注解</p><p>好啦这就是多数据源的配置，当然druid的功能远不如此，需要的请去girhub wiki查看相关文档</p><p><a href="https://github.com/alibaba/druid/wiki" target="_blank" rel="noopener">点我你就进来了</a></p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十二）发送邮件</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>发送邮件应该是网站的必备功能之一，什么注册验证，忘记密码或者是给用户发送营销信息。最早期的时候我们会使用JavaMail相关api来写发送邮件的相关代码，后来spring退出了JavaMailSender更加简化了邮件发送的过程，在之后springboot对此进行了封装就有了现在的spring-boot-starter-mail,本章文章的介绍主要来自于此包。<br>首先呢肯定是要加入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot集成的email --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢配置下yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">13103779727</span><span class="string">@163.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nibuzhidaomima</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">          <span class="attr">smtp:</span></span><br><span class="line">              <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">              <span class="attr">timeout:</span> <span class="number">25000</span></span><br></pre></td></tr></table></figure><p>写个最简单的服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender jms;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//建立邮件消息</span></span><br><span class="line">        SimpleMailMessage mainMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//发送者</span></span><br><span class="line">        mainMessage.setFrom(<span class="string">"13103779727@163.com"</span>);</span><br><span class="line">        <span class="comment">//接收者</span></span><br><span class="line">        mainMessage.setTo(<span class="string">"????@qq.com"</span>);</span><br><span class="line">        <span class="comment">//发送的标题</span></span><br><span class="line">        mainMessage.setSubject(<span class="string">"嗨喽"</span>);</span><br><span class="line">        <span class="comment">//发送的内容</span></span><br><span class="line">        mainMessage.setText(<span class="string">"hello world"</span>);</span><br><span class="line">        jms.send(mainMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了发送邮件，其实发模版html的也能实现，但是总感觉不那么大气代码量也死多死多，干脆封装下吧。</p><hr><p>首先呢，创建一个实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 邮件实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 邮件标题 */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/** 邮件内容 */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">/** 内容格式(默认html) */</span></span><br><span class="line">    <span class="keyword">private</span> String contentType;</span><br><span class="line">    <span class="comment">/** 接收邮件地址 */</span></span><br><span class="line">    <span class="keyword">private</span> String to;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*************模板发送****************/</span></span><br><span class="line">    <span class="comment">/** 模板名称 */</span></span><br><span class="line">    <span class="keyword">private</span> String templateName;</span><br><span class="line">    <span class="comment">/** 模板变量替换 */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类型枚举类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.enums;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 邮件内容的类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MailContentTypeEnum &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//text格式</span></span><br><span class="line">    TEXT(<span class="string">"text"</span>),</span><br><span class="line">    <span class="comment">//html格式</span></span><br><span class="line">    HTML(<span class="string">"html"</span>),</span><br><span class="line">    <span class="comment">//模板</span></span><br><span class="line">    TEMPLATE(<span class="string">"template"</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    MailContentTypeEnum(String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个基于spring的工厂类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.enums.MailContentTypeEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 邮件发送bean工厂类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MailFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerMailFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MailFactory MAIL_FACTORY = <span class="keyword">new</span> MailFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        maps.put(MailContentTypeEnum.TEXT.value(), getStrategyClassName(<span class="string">"simple"</span>));</span><br><span class="line">        maps.put(MailContentTypeEnum.HTML.value(), getStrategyClassName(<span class="string">"html"</span>));</span><br><span class="line">        maps.put(MailContentTypeEnum.TEMPLATE.value(), getStrategyClassName(<span class="string">"template"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MailFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerMailFactory.MAIL_FACTORY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取策略类名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classNamePrefix：类名前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getStrategyClassName</span><span class="params">(String classNamePrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classNamePrefix + <span class="string">"MailStrategy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 邮件发送策略类的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.entity.Mail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 发送邮件策略接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MailStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from：谁发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mail：邮件信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, Mail mail)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是三个基础实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.strategy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.entity.Mail;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.strategy.MailStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: HTML格式发送邮件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlMailStrategy</span> <span class="keyword">implements</span> <span class="title">MailStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LogManager.getLogger(<span class="string">"bizLog"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, Mail mail)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//true表示需要创建一个multipart message</span></span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(mail.getTo());</span><br><span class="line">            helper.setSubject(mail.getTitle());</span><br><span class="line">            helper.setText(mail.getContent(), <span class="keyword">true</span>);</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            LOG.info(<span class="string">"html邮件已经发送&#123;&#125;。"</span>, mail.getTo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"发送html邮件时发生异常！"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.strategy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.entity.Mail;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.strategy.MailStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 简单文本发送邮件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMailStrategy</span> <span class="keyword">implements</span> <span class="title">MailStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LogManager.getLogger(<span class="string">"bizLog"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, Mail mail)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message.setFrom(from);</span><br><span class="line">            message.setTo(mail.getTo());</span><br><span class="line">            message.setSubject(mail.getTitle());</span><br><span class="line">            message.setText(mail.getContent());</span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">            LOG.info(<span class="string">"纯文本的邮件已经发送给【&#123;&#125;】。"</span>, mail.getTo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"纯文本邮件发送时发生异常！"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.strategy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.entity.Mail;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.strategy.MailStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义模板格式发送邮件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMailStrategy</span> <span class="keyword">implements</span> <span class="title">MailStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LogManager.getLogger(<span class="string">"bizLog"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, Mail mail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Context ctx = <span class="keyword">new</span> Context(<span class="keyword">new</span> Locale(<span class="string">""</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mail.getMaps() &amp;&amp; mail.getMaps().size() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : mail.getMaps().entrySet()) &#123;</span><br><span class="line">                ctx.setVariable(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String htmlContent = templateEngine.process(mail.getTemplateName(), ctx);</span><br><span class="line">        <span class="keyword">final</span> MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="keyword">final</span> MimeMessageHelper message = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message.setFrom(from);</span><br><span class="line">            message.setTo(mail.getTo());</span><br><span class="line">            message.setSubject(mail.getTitle());</span><br><span class="line">            message.setText(htmlContent, <span class="keyword">true</span>);</span><br><span class="line">            javaMailSender.send(mimeMessage);</span><br><span class="line">            LOG.info(<span class="string">"模板邮件已经发送&#123;&#125;。"</span>, mail.getTo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            LOG.error(<span class="string">"发送模板邮件【&#123;&#125;】时发生异常！"</span>, mail.getTemplateName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是邮件的发送类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.biz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.entity.Mail;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.enums.MailContentTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.factory.MailFactory;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.strategy.MailStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 邮件发送类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailBiz</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MailStrategy&gt; mailStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 邮件实体 */</span></span><br><span class="line">    <span class="keyword">private</span> Mail mail = <span class="keyword">new</span> Mail();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置邮件标题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title：邮件标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailBiz <span class="title">title</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        mail.setTitle(title);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置邮件内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content：内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailBiz <span class="title">content</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        mail.setContent(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置邮件格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeEnum：邮件格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailBiz <span class="title">contentType</span><span class="params">(MailContentTypeEnum typeEnum)</span> </span>&#123;</span><br><span class="line">        mail.setContentType(typeEnum.value());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求目标邮件地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to：请求目标邮件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailBiz <span class="title">to</span><span class="params">(String to)</span> </span>&#123;</span><br><span class="line">        mail.setTo(to);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置模板名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailBiz <span class="title">templateName</span><span class="params">(String templateName)</span> </span>&#123;</span><br><span class="line">        mail.setTemplateName(templateName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板发送的变量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maps：maps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailBiz <span class="title">maps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        mail.setMaps(maps);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行发送邮件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = MailFactory.getInstance().get(mail.getContentType());</span><br><span class="line">        <span class="keyword">this</span>.mailStrategy.get(key).sendMail(from, mail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢就封装完毕了 在发送类里使用了对象级联的方式，使其调用更方便如果使用的是freemarker</p><p>这边我也提供了发送方式，建议大家自己扩展。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.email.strategy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.entity.Mail;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.strategy.MailStrategy;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.TemplateException;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.freemarker.FreeMarkerTemplateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerMailStrategy</span> <span class="keyword">implements</span> <span class="title">MailStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LogManager.getLogger(<span class="string">"bizLog"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, Mail mail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Template t = configuration.getTemplate(mail.getTemplateName());</span><br><span class="line">            <span class="keyword">final</span> String htmlContent = FreeMarkerTemplateUtils.processTemplateIntoString(t, mail.getMaps());</span><br><span class="line">            <span class="keyword">final</span> MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            <span class="keyword">final</span> MimeMessageHelper message = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="string">"UTF-8"</span>);</span><br><span class="line">            message.setFrom(from);</span><br><span class="line">            message.setTo(mail.getTo());</span><br><span class="line">            message.setSubject(mail.getTitle());</span><br><span class="line">            message.setText(htmlContent, <span class="keyword">true</span>);</span><br><span class="line">            javaMailSender.send(mimeMessage);</span><br><span class="line">            LOG.info(<span class="string">"FreeMarker模板邮件已经发送&#123;&#125;。"</span>, mail.getTo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            LOG.error(<span class="string">"FreeMarker发送模板邮件【&#123;&#125;】时发生异常！"</span>, mail.getTemplateName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体怎么使用呢 来看下测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.biz.MailBiz;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.email.enums.MailContentTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.mail.MailService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailBiz mailBiz;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mailBiz</span><br><span class="line">        .contentType(MailContentTypeEnum.HTML)</span><br><span class="line">        .title(<span class="string">"测试"</span>)</span><br><span class="line">        .to(<span class="string">"??????@qq.com"</span>)</span><br><span class="line">        .content(<span class="string">"&lt;h1&gt;测试content&lt;/h1&gt;"</span>)</span><br><span class="line">        .send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"username"</span>, <span class="string">"昴先生"</span>);</span><br><span class="line">        params.put(<span class="string">"methodName"</span>, <span class="string">"？？？"</span>);</span><br><span class="line">        params.put(<span class="string">"errorMessage"</span>, <span class="string">"出错了唉"</span>);</span><br><span class="line">        params.put(<span class="string">"occurredTime"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        mailBiz</span><br><span class="line">                .contentType(MailContentTypeEnum.TEMPLATE)</span><br><span class="line">                .title(<span class="string">"测试"</span>)</span><br><span class="line">                .to(<span class="string">"??????@qq.com"</span>)</span><br><span class="line">                .content(<span class="string">"测试content"</span>)</span><br><span class="line">                .templateName(<span class="string">"Test"</span>)</span><br><span class="line">                .maps(params)</span><br><span class="line">                .send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢这是邮件 thy的  由于上面提供了freemarker的发送方式，建议大家自己扩展</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">th:href</span>=<span class="string">"@&#123;https://cdn.bootcss.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.full-screen</span> &#123;</span></span><br><span class="line">        height: fit-content;</span><br><span class="line">        width: fit-content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.fixed-page</span> &#123;</span></span><br><span class="line">        overflow-x: scroll;</span><br><span class="line">        overflow-y: scroll;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        padding-right: 15px;</span><br><span class="line">        padding-left: 15px;</span><br><span class="line">        margin-right: auto;</span><br><span class="line">        margin-left: auto</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.jumbotron</span> &#123;</span></span><br><span class="line">        padding: 2rem 1rem;</span><br><span class="line">        margin-bottom: 2rem;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#e9ecef</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span>: <span class="selector-class">.3rem</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.jumbotron-fluid</span> &#123;</span></span><br><span class="line">        padding-right: 0;</span><br><span class="line">        padding-left: 0;</span><br><span class="line">        border-radius: 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"fixed-page"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">bgcolor</span>=<span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">style</span>=<span class="string">"font-family:'Microsoft YaHei';"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron jumbotron-fluid full-screen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container  full-screen"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"c-img c-img6"</span> <span class="attr">src</span>=<span class="string">"https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=2222976400,3502441702&amp;fm=58&amp;bpow=440&amp;bpoh=440"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"currentImg"</span> <span class="attr">id</span>=<span class="string">"currentImg"</span> <span class="attr">onload</span>=<span class="string">"alog &amp;&amp; alog('speed.set', 'c_firstPageComplete', +new Date); alog.fire &amp;&amp; alog.fire('mark');"</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532597177454&amp;di=aec784f189c38b207ee88ea296f2457f&amp;imgtype=0&amp;src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fblog%2F201308%2F13%2F20130813185613_T4nxf.thumb.700_0.jpeg"</span> <span class="attr">data-ispreload</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"485.91370558376"</span> <span class="attr">height</span>=<span class="string">"547"</span> <span class="attr">style</span>=<span class="string">"top: 0px; left: 382px; width: 318.02px; height: 358px; cursor: pointer;"</span> <span class="attr">log-rightclick</span>=<span class="string">"p=5.102"</span> <span class="attr">title</span>=<span class="string">"点击查看源网页"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"currentImg"</span> <span class="attr">id</span>=<span class="string">"currentImg"</span> <span class="attr">onload</span>=<span class="string">"alog &amp;&amp; alog('speed.set', 'c_firstPageComplete', +new Date); alog.fire &amp;&amp; alog.fire('mark');"</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532597216973&amp;di=5a1b48da42304a2dd63ec9697084bb11&amp;imgtype=0&amp;src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2Fb55830fe8fb1d3221b3494442b0b5c1902c6ef3a.jpg"</span> <span class="attr">width</span>=<span class="string">"288.71287128713"</span> <span class="attr">height</span>=<span class="string">"162"</span> <span class="attr">style</span>=<span class="string">"top: 48px; left: 397px; width: 288.713px; height: 162px; cursor: pointer;"</span> <span class="attr">log-rightclick</span>=<span class="string">"p=5.102"</span> <span class="attr">title</span>=<span class="string">"点击查看源网页"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"currentImg"</span> <span class="attr">id</span>=<span class="string">"currentImg"</span> <span class="attr">onload</span>=<span class="string">"alog &amp;&amp; alog('speed.set', 'c_firstPageComplete', +new Date); alog.fire &amp;&amp; alog.fire('mark');"</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532597216973&amp;di=5d72892a3193c4462b45d87f6a5370b2&amp;imgtype=0&amp;src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Fface%2Faff582421bd0e8331255cb92622328d19616e2c0.jpg"</span> <span class="attr">width</span>=<span class="string">"288.71287128713"</span> <span class="attr">height</span>=<span class="string">"162"</span> <span class="attr">style</span>=<span class="string">"top: 29px; left: 392px; width: 300px; height: 300px; cursor: pointer; display: block;"</span> <span class="attr">log-rightclick</span>=<span class="string">"p=5.102"</span> <span class="attr">title</span>=<span class="string">"点击查看源网页"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hi,</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span>Developer<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>There is an exception occurred in method</span><br><span class="line">                <span class="tag">&lt;<span class="name">code</span> <span class="attr">style</span>=<span class="string">"color: #d57e13;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;methodName&#125;"</span>&gt;</span>methodName<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>,</span><br><span class="line">                the error message is :</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">code</span> <span class="attr">style</span>=<span class="string">"font-family: 'Source Code Pro';"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;errorMessage&#125;"</span>&gt;</span>Error Message<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;occurredTime&#125;"</span>&gt;</span>occurredTime<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢我们跑去邮箱里去看看</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062498402-97f2dc8a-cdc5-4069-8da1-149ceb670d2e.png#align=left&display=inline&height=931&originHeight=931&originWidth=1347&size=0&status=done&width=1347" class="lazyload"></p><p>okokok，完事，这边还有一个多邮件轮训发送没有扩展，有时间在扩展</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十一）优雅的整合Quartz</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%BC%98%E9%9B%85%E7%9A%84%E6%95%B4%E5%90%88Quartz/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%BC%98%E9%9B%85%E7%9A%84%E6%95%B4%E5%90%88Quartz/</url>
      
        <content type="html"><![CDATA[<p>Quartz是一个功能丰富的开源作业调度库，几乎可以集成在任何Java应用程序中 - 从最小的独立应用程序到最大的电子商务系统。Quartz可用于创建简单或复杂的计划，以执行数十，数百甚至数万个作业; 将任务定义为标准Java组件的作业，这些组件可以执行几乎任何可以编程的程序。Quartz Scheduler包含许多企业级功能，例如支持JTA事务和集群。springboot在2.x后加入了quartz的支持，可以说真的是这个start还是做的不错的!!<br><a name="2cc3bab6"></a></p><h1 id="spring定时器"><a href="#spring定时器" class="headerlink" title="spring定时器"></a>spring定时器</h1><p>首先呢说一下spring自带的定时器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configurable</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务执行 "</span> + dateFormat().format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每1分钟执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 */1 *  * * * "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentByCron</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任务执行"</span> + dateFormat().format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SimpleDateFormat <span class="title">dateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中呢 　@EnableScheduling：标注启动定时任务 <a href>@Scheduled(fixedRate </a> = 1000 * 30)  定义某个定时任务。当然也可以使用cron表达式。但是呢需要进行任务的持久和复杂的管控，肯定就不行了，下面上quartz。</p><hr><p><a name="quartz"></a></p><h1 id="quartz"><a href="#quartz" class="headerlink" title="quartz"></a>quartz</h1><p>首先呢要使用首先加入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在yml中加入</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">quartz:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">org:</span></span><br><span class="line">          <span class="attr">quartz:</span></span><br><span class="line">            <span class="attr">scheduler:</span></span><br><span class="line">              <span class="attr">instanceName:</span> <span class="string">MyScheduler</span></span><br><span class="line">              <span class="attr">instanceId:</span> <span class="string">AUTO</span>  <span class="comment">#如果使用集群，instanceId必须唯一，设置成AUTO</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">job-store-type:</span> <span class="string">memory</span> <span class="comment">#jdbc 为持久化,memory 为内存</span></span><br></pre></td></tr></table></figure><p>这里呢我封装了一个操作的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.matchers.GroupMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * quartz管理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fulin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler  scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass     任务实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName      任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName 任务组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobCron      cron表达式(如：0/5 * * * * ? )</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends Job&gt; jobClass, String jobName, String jobGroupName, String jobCron)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</span><br><span class="line">            Trigger trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">                    .startAt(DateBuilder.futureDate(<span class="number">1</span>, DateBuilder.IntervalUnit.SECOND))</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobCron)).startNow().build();</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">            <span class="keyword">if</span> (!scheduler.isShutdown()) &#123;</span><br><span class="line">                scheduler.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建or更新任务，存在则更新不存在创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass     任务类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName      任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName 任务组名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobCron      cron表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrUpdateJob</span><span class="params">(Class&lt;? extends Job&gt; jobClass, String jobName, String jobGroupName, String jobCron)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">            <span class="keyword">if</span> (trigger == <span class="keyword">null</span>) &#123;</span><br><span class="line">                addJob(jobClass, jobName, jobGroupName, jobCron);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (trigger.getCronExpression().equals(jobCron)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                updateJob(jobName, jobGroupName, jobCron);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends Job&gt; jobClass, String jobName, String jobGroupName, <span class="keyword">int</span> jobTime)</span> </span>&#123;</span><br><span class="line">        addJob(jobClass, jobName, jobGroupName, jobTime, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Class&lt;? extends Job&gt; jobClass, String jobName, String jobGroupName, <span class="keyword">int</span> jobTime, <span class="keyword">int</span> jobTimes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName)<span class="comment">// 任务名称和组构成任务key</span></span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 使用simpleTrigger规则</span></span><br><span class="line">            Trigger trigger = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (jobTimes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                trigger = TriggerBuilder.newTrigger().withIdentity(jobName, jobGroupName)</span><br><span class="line">                        .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">1</span>).withIntervalInSeconds(jobTime))</span><br><span class="line">                        .startNow().build();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trigger = TriggerBuilder</span><br><span class="line">                        .newTrigger().withIdentity(jobName, jobGroupName).withSchedule(SimpleScheduleBuilder</span><br><span class="line">                                .repeatSecondlyForever(<span class="number">1</span>).withIntervalInSeconds(jobTime).withRepeatCount(jobTimes))</span><br><span class="line">                        .startNow().build();</span><br><span class="line">            &#125;</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">            <span class="keyword">if</span> (!scheduler.isShutdown()) &#123;</span><br><span class="line">                scheduler.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateJob</span><span class="params">(String jobName, String jobGroupName, String jobTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TriggerKey triggerKey = TriggerKey.triggerKey(jobName, jobGroupName);</span><br><span class="line">            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(jobTime)).build();</span><br><span class="line">            <span class="comment">// 重启触发器</span></span><br><span class="line">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName      任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName 任务组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.deleteJob(<span class="keyword">new</span> JobKey(jobName, jobGroupName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.pauseJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.resumeJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 立即执行一个job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroupName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAJobNow</span><span class="params">(String jobName, String jobGroupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobKey jobKey = JobKey.jobKey(jobName, jobGroupName);</span><br><span class="line">            scheduler.triggerJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有计划中的任务列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllJob() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GroupMatcher&lt;JobKey&gt; matcher = GroupMatcher.anyJobGroup();</span><br><span class="line">            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(matcher);</span><br><span class="line">            jobList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (JobKey jobKey : jobKeys) &#123;</span><br><span class="line">                List&lt;? extends Trigger&gt; triggers = scheduler.getTriggersOfJob(jobKey);</span><br><span class="line">                <span class="keyword">for</span> (Trigger trigger : triggers) &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">"jobName"</span>, jobKey.getName());</span><br><span class="line">                    map.put(<span class="string">"jobGroupName"</span>, jobKey.getGroup());</span><br><span class="line">                    map.put(<span class="string">"description"</span>, <span class="string">"触发器:"</span> + trigger.getKey());</span><br><span class="line">                    Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">                    map.put(<span class="string">"jobStatus"</span>, triggerState.name());</span><br><span class="line">                    <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> CronTrigger) &#123;</span><br><span class="line">                        CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">                        String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">                        map.put(<span class="string">"jobTime"</span>, cronExpression);</span><br><span class="line">                    &#125;</span><br><span class="line">                    jobList.add(map);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jobList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有正在运行的job</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryRunJon() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; jobList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;JobExecutionContext&gt; executingJobs = scheduler.getCurrentlyExecutingJobs();</span><br><span class="line">            jobList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;(executingJobs.size());</span><br><span class="line">            <span class="keyword">for</span> (JobExecutionContext executingJob : executingJobs) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                JobDetail jobDetail = executingJob.getJobDetail();</span><br><span class="line">                JobKey jobKey = jobDetail.getKey();</span><br><span class="line">                Trigger trigger = executingJob.getTrigger();</span><br><span class="line">                map.put(<span class="string">"jobName"</span>, jobKey.getName());</span><br><span class="line">                map.put(<span class="string">"jobGroupName"</span>, jobKey.getGroup());</span><br><span class="line">                map.put(<span class="string">"description"</span>, <span class="string">"触发器:"</span> + trigger.getKey());</span><br><span class="line">                Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());</span><br><span class="line">                map.put(<span class="string">"jobStatus"</span>, triggerState.name());</span><br><span class="line">                <span class="keyword">if</span> (trigger <span class="keyword">instanceof</span> CronTrigger) &#123;</span><br><span class="line">                    CronTrigger cronTrigger = (CronTrigger) trigger;</span><br><span class="line">                    String cronExpression = cronTrigger.getCronExpression();</span><br><span class="line">                    map.put(<span class="string">"jobTime"</span>, cronExpression);</span><br><span class="line">                &#125;</span><br><span class="line">                jobList.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jobList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢新建一个任务类，任务类一定要继承QuartzJobBean，其实跟之前一样，QuartzJobBean也是实现的job类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTimeoutJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"武器强化失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个测试类玩玩</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.conf.QuartzManager;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.dao.QuartzMapper;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.job.OrderTimeoutJob;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.QuartzEntity;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.JobService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootQuartzApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzManager quartzManager;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mcreateTask</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        quartzManager.addJob(OrderTimeoutJob.class, "maoxs", "q1", "0/1 * * * * ?");</span><br><span class="line">        log.info(<span class="string">"添加任务成功"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        quartzManager.pauseJob(<span class="string">"maoxs"</span>, <span class="string">"q1"</span>);</span><br><span class="line">        log.info(<span class="string">"暂停任务成功"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">"=============查询任务================"</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = quartzManager.queryAllJob();</span><br><span class="line">        System.out.println(Collections.unmodifiableCollection(maps));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行看看效果 嗯，效果还是很完美的</p><p><a name="158fccc9"></a></p><h2 id><a href="#" class="headerlink" title></a><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062450174-f2151c82-f391-46d7-a3cf-c05899f88804.png#align=left&display=inline&height=481&originHeight=481&originWidth=1504&size=0&status=done&width=1504" class="lazyload"></h2><p>肯定很多小伙伴关系怎么持久化任务，首先呢肯定是要先创建quartz的表<a href="https://download.csdn.net/download/qq_32867467/10613611" target="_blank" rel="noopener">点击下载</a></p><p>然后呢需要改下yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">quartz:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">org:</span></span><br><span class="line">          <span class="attr">quartz:</span></span><br><span class="line">            <span class="attr">scheduler:</span></span><br><span class="line">              <span class="attr">instanceName:</span> <span class="string">MyScheduler</span></span><br><span class="line">              <span class="attr">instanceId:</span> <span class="string">AUTO</span>  <span class="comment">#如果使用集群，instanceId必须唯一，设置成AUTO</span></span><br><span class="line">          <span class="attr">dataSource:</span> <span class="comment">#配置数据源</span></span><br><span class="line">            <span class="attr">myDS:</span></span><br><span class="line">              <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">              <span class="attr">URL:</span> <span class="string">jdbc:mysql://192.168.8.100:3306/quartz_database?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">              <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">              <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">              <span class="attr">maxConnections:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">job-store-type:</span> <span class="string">jdbc</span> <span class="comment">#jdbc 为持久化,memory 为内存</span></span><br><span class="line">      <span class="attr">jdbc:</span>  <span class="comment">#存储方式使用JobStoreTX(持久化到数据库中)</span></span><br><span class="line">        <span class="attr">initialize-schema:</span> <span class="string">never</span></span><br><span class="line">        <span class="attr">comment-prefix:</span> <span class="string">QRTZ_</span></span><br><span class="line">        <span class="attr">schema:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br></pre></td></tr></table></figure><p>然后呢我这里使用的是mysql  记得加入数据库驱动</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢我们重新运行那个测试</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062449821-8d0a090a-ccf9-4762-93dc-0859b1db4dcf.png#align=left&display=inline&height=481&originHeight=481&originWidth=1504&size=0&status=done&width=1504" class="lazyload"></p><p>ok没问题，再来看下数据库 也是有的</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062449838-488243ae-16a2-472b-8dff-3d0fb6af0c7f.png#align=left&display=inline&height=287&originHeight=287&originWidth=980&size=0&status=done&width=980" class="lazyload"></p><p>这里缺少一个持久化集群的示例，等等我会补上。</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（十）缓存的使用</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Spring Framework支持透明地向应用程序添加缓存。从本质上讲，抽象将缓存应用于方法，从而根据缓存中可用的信息减少执行次数。缓存逻辑应用透明，不会对调用者造成任何干扰。只要通过<code>@EnableCaching</code> 注释启用了缓存支持，Spring Boot就会自动配置缓存基础结构。下面我就介绍两个我比较常用的缓存。</p><hr><p><a name="JSR-107"></a></p><h2 id="JSR-107"><a href="#JSR-107" class="headerlink" title="JSR-107"></a>JSR-107</h2><p>为了统一缓存的开发规范，以及我们系统的扩展性。java发布了JSR-107缓存规范。Java Caching定义了5个核心接口，分别是CachingProvider、CacheManager、Cache和Expiry。</p><ul><li><strong>CachingProvider</strong> 定义了创建，配置，获取，管理和控制多个CacheManager。一个应用可以在运行期间访问多个CachingProvider。</li><li><strong>CacheManager</strong>定义了创建，配置，获取，管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager 的上下文中，一个CacheManager仅被一个CachingProvider所拥有。</li><li><strong>Cache</strong>是一个类似Map的数据结构，并临时存储Key为索引的值。一个Cache仅被一个CacheManager 所拥有。</li><li><strong>Entry</strong>是一个存储在Cache中的key-value对</li><li><strong>Expirt</strong>每一个存储在Cache中的条目有一个定义的有效期，一旦超过这个有效期，条目就为过期状态，一旦过期，条目不可访问，更新，和删除。缓存有效期可以通过ExpiryPolicy设置。</li></ul><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062401626-903214a6-c95d-41e4-bf45-c02ecf7c9019.png#align=left&display=inline&height=459&originHeight=459&originWidth=730&size=0&status=done&width=730" class="lazyload"></p><p>但是呢实现JSR107对于我们快速开发项目，遇到没有实现JSR-107接口的功能时，此时集成难度较大，也并不是所有框架都集成JSR-107。</p><p><a name="361177ea"></a></p><h2 id="Spring缓存抽象"><a href="#Spring缓存抽象" class="headerlink" title="Spring缓存抽象"></a>Spring缓存抽象</h2><p>所以呢我们更多使用的是Spring的缓存抽象，Spring的缓存抽象的概念，基本和JSR-107是通用的。Spring从3.1开始定义了Cache和CacheManager接口来同意不同的缓存技术；并且支持使用<strong>JSR-107注解</strong>来简化我们的开发。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062401661-2a90cfcb-0bfe-40f9-b84b-c7f346c174d1.png#align=left&display=inline&height=549&originHeight=549&originWidth=930&size=0&status=done&width=930" class="lazyload"></p><ul><li>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合。</li><li>Cache接口下Spring提供了各种缓存的实现，比如RedisCache，EhCacheCache，</li><li>ConcurrentMapCache等。</li><li>每次调用需要缓存功能的方法的时候，Spring会检查制定参数的制定目标方法，是否被调用过，如果有，就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结构后返回给用户，下次在调用的时候直接从缓存中获取。</li><li>使用Spring缓存抽象的时候我们需要注意，确定方法需要缓存以及他们的缓存策略，从缓存中读取之前缓存存储的数据。</li></ul><p><a name="af92c8fb"></a></p><h2 id="缓存注解"><a href="#缓存注解" class="headerlink" title="缓存注解"></a>缓存注解</h2><p>这里列出常用的几个概念和注解</p><table><thead><tr><th>名称</th><th>概念</th></tr></thead><tbody><tr><td>Cache</td><td>缓存接口，定义缓存操作，实现有RedisCache，EhCacheCache，ConcurrentMapCache等等</td></tr><tr><td>CacheManager</td><td>缓存管理器，管理各种缓存组件</td></tr><tr><td><a href>@Cacheable </a></td><td>主要针对方法配置，能够根据方法的请求参数对其返回的结果尽心缓存</td></tr><tr><td><a href>@CacheEvict </a></td><td>情况缓存</td></tr><tr><td><a href>@CachePut </a></td><td>保证方法被调用，又希望结果被缓存</td></tr><tr><td><a href>@EnableCaching </a></td><td>开启基于缓存的注解</td></tr><tr><td>serialize</td><td>缓存数据时value序列化策略</td></tr><tr><td>keyGenerator</td><td>缓存数据时key的生成策略</td></tr><tr><td><a href>@CacheConfig </a></td><td>统一配置本类的缓存注解的属性</td></tr></tbody></table><p>这里列出其中几个注解的主要参数</p><table><thead><tr><th align="left">参数名</th><th align="left">主要作用</th><th align="left">栗子</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">缓存的名称，在spring配置文件中定义，必须制定至少一个</td><td align="left">@Cacheable(value=”mycache”)                                      @Cacheable(value={“cache1”,”cache2”})</td></tr><tr><td align="left">key</td><td align="left">缓存的key，可以为空，如果制定要按照SpEL表达式编写，如果不制定，则按照方法的所有参数进行组合</td><td align="left">@Cacheable(value=”mycache”,key=”#userName”)</td></tr><tr><td align="left">condition</td><td align="left">缓存的条件，可以为空，使用SpEL编写，返回true或者false，只有为true才能进行缓存/清除操作，在调用方法之前之后都能进行判断</td><td align="left">@Cacheable(value=”mycache”,condition=”#userName.length()&gt;2”)</td></tr><tr><td align="left">allEntries (<a href>@CacheEvict) </a></td><td align="left">是否清空所有缓存内容，缺省为fasle，如果指定为true，则方法调用后将立即清空所有缓存</td><td align="left">@CacheEvict(value=”mycache”,allEntries=true)</td></tr><tr><td align="left">beforeInvocation （@CacheEvict）</td><td align="left">是否在方法执行前就清空，缺省为fasle，如果制定为true，则在方法还没有执行的时候就会清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td><td align="left">@CacheEvict(value=”mycache”,beforeInvocation=true)</td></tr><tr><td align="left">unless （@CachePut）（@Cacheable）</td><td align="left">用于否决缓存的，不等同于condition，该表达式只在方法执行之后判断，此时可以拿到返回值result进行判断，条件为true不会缓存，fasle才缓存</td><td align="left">@Cacheable(value=”mycache”,unless=”#result==null”)</td></tr></tbody></table><p><a name="SpEL"></a></p><h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>其中提到了SpEL，SpEL表达式可基于上下文并通过使用缓存抽象，提供与root独享相关联的缓存特定的内置参数</p><table><thead><tr><th>名称</th><th>位置</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root对象</td><td>当前被调用的方法名</td><td><code>#root.methodname</code></td></tr><tr><td>method</td><td>root对象</td><td>当前被调用的方法</td><td><code>#root.method.name</code></td></tr><tr><td>target</td><td>root对象</td><td>当前被调用的目标对象实例</td><td><code>#root.target</code></td></tr><tr><td>targetClass</td><td>root对象</td><td>当前被调用的目标对象的类</td><td><code>#root.targetClass</code></td></tr><tr><td>args</td><td>root对象</td><td>当前被调用的方法的参数列表</td><td><code>#root.args[0]</code></td></tr><tr><td>caches</td><td>root对象</td><td>当前方法调用使用的缓存列表</td><td><code>#root.caches[0].name</code></td></tr><tr><td>Argument Name</td><td>执行上下文</td><td>当前被调用的方法的参数，如findArtisan(Artisan artisan),可以通过#artsian.id获得参数</td><td><code>#artsian.id</code></td></tr><tr><td>result</td><td>执行上下文</td><td>方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict的beforeInvocation=false）</td><td><code>#result</code></td></tr></tbody></table><p>1.当我们要使用root对象的属性作为key时我们也可以将“#root”省略，因为Spring默认使用的就是root对象的属性。 如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(key = <span class="string">"targetClass + methodName +#p0"</span>)</span><br></pre></td></tr></table></figure><p>2.使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。 如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"users"</span>, key=<span class="string">"#id"</span>)</span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"users"</span>, key=<span class="string">"#p0"</span>)</span><br></pre></td></tr></table></figure><p><strong>SpEL提供了多种运算符</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>运算符</strong></th></tr></thead><tbody><tr><td>关系</td><td>&lt;，&gt;，&lt;=，&gt;=，==，!=，lt，gt，le，ge，eq，ne</td></tr><tr><td>算术</td><td>+，- ，* ，/，%，^</td></tr><tr><td>逻辑</td><td>&amp;&amp;，</td></tr><tr><td>条件</td><td>?: (ternary)，?: (elvis)</td></tr><tr><td>正则表达式</td><td>matches</td></tr><tr><td>其他类型</td><td>?.，?[…]，![…]，<a href="#fn1">[1]</a>，$[…]</td></tr></tbody></table><p><a name="85d22db7"></a></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>首先呢加入添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在启动或者配置类上加入 <code>@EnableCaching</code>注解来开启缓存注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application <span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个Service来模拟对数据库的操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, User&gt; users = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        users.put(<span class="number">1</span>, <span class="keyword">new</span> User(<span class="string">"我是快乐鱼"</span>));</span><br><span class="line">        users.put(<span class="number">2</span>, <span class="keyword">new</span> User( <span class="string">"我是忧郁猫"</span>));</span><br><span class="line">        users.put(<span class="number">3</span>, <span class="keyword">new</span> User( <span class="string">"我是昴先生"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是操作的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="39944e57"></a></p><h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable "></a><a href>@Cacheable </a></h3><p>在调用方法之前，首先应该在缓存中查找方法的返回值，如果这个值能够找到，就会返回缓存的值。否则，这个方法就会被调用，返回值会放到缓存之中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"user"</span>,key = <span class="string">"targetClass + methodName +#p0"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"缓存中没有，从map中获取"</span>);</span><br><span class="line">    User user = users.get(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的<code>value</code>是必需的，它指定了你的缓存存放在哪块命名空间。</p><p>此处的<code>key</code>是使用的spEL表达式，参考上章。这里有一个小坑，如果你把<code>methodName</code>换成<code>method</code>运行会报错，观察它们的返回类型，原因在于<code>methodName</code>是<code>String</code>而<code>methoh</code>是<code>Method</code>。</p><p>此处的<code>User</code>实体类一定要实现序列化<code>public class User implements Serializable</code>，否则会报<code>java.io.NotSerializableException</code>异常。</p><p>到这里，你已经可以运行程序检验缓存功能是否实现。</p><p>试着写一个controller 来调用此方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时注意控制台，第一次访问的时候日志打印 <code>缓存中没有，从map中获取</code> 第二次则什么也没有显示，说明此时缓存已经生效了，结果是从缓存中取的。默认呢是使用SimpleCacheConfiguration，它在容器中注册了一个ConcurrentMapCacheManager，将缓存数据存储在了ConcurrentMap中。</p><p><strong>深入源码，查看它的其它属性</strong></p><p>我们打开<code>@Cacheable</code>注解的源码，可以看到该注解提供的其他属性，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] cacheNames() default &#123;&#125;; //和value注解差不多，二选一</span><br><span class="line">String keyGenerator() default &quot;&quot;; //key的生成器。key/keyGenerator二选一使用</span><br><span class="line">String cacheManager() default &quot;&quot;; //指定缓存管理器</span><br><span class="line">String cacheResolver() default &quot;&quot;; //或者指定获取解析器</span><br><span class="line">String condition() default &quot;&quot;; //条件符合则缓存</span><br><span class="line">String unless() default &quot;&quot;; //条件符合则不缓存</span><br><span class="line">boolean sync() default false; //是否使用异步模式</span><br></pre></td></tr></table></figure><p>这里key中提到了keyGenerator，默认是使用SimplekeyGenerator 来生成的，他的默认策略为</p><p>如果没有参数：key=new SimpleKey();</p><p>如果有一个参数： key=参数的值</p><p>如果有多个参数的方法： key=new SimpleKey(params);</p><p>当然你也可以按照自己的规则去生成key，这里我自己提供了一个自定义的使用起来呢只需要在注解中加入<code>@Cacheable(keyGenerator = &quot;wiselyKeyGenerator&quot;)</code> 即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置统一的生成key的方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">wiselyKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(<span class="string">"-"</span>);</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="63a94e27"></a></p><h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut "></a><a href>@CachePut </a></h3><p><code>@CachePut</code>注解的作用 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，和 <code>@Cacheable</code> 不同的是，它每次都会触发真实方法的调用 。简单来说就是用户更新缓存数据。<strong>但需要注意的是该注解的<code>value</code> 和 <code>key</code> 必须与要更新的缓存相同</strong>，也就是与<code>@Cacheable</code> 相同。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"缓存中没有，从map中获取"</span>);</span><br><span class="line">    User user = users.get(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@CachePut</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    users.put(user.getId(), user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弄个controller测试下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;id&#125;/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">updateUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id, @PathVariable String name)</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"><span class="keyword">return</span> userService.updateUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先呢按id查询一个user 然后通过url更新这个用户，在根据id访问下这个用户，这是注意日志是不是没有打印</p><p><code>缓存中没有，从map中获取</code> 没有打印则缓存更新成功</p><p><strong>查看它的其它属性</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] cacheNames() default &#123;&#125;; //与value二选一</span><br><span class="line">String keyGenerator() default &quot;&quot;;  //key的生成器。key/keyGenerator二选一使用</span><br><span class="line">String cacheManager() default &quot;&quot;;  //指定缓存管理器</span><br><span class="line">String cacheResolver() default &quot;&quot;; //或者指定获取解析器</span><br><span class="line">String condition() default &quot;&quot;; //条件符合则缓存</span><br><span class="line">String unless() default &quot;&quot;; //条件符合则不缓存</span><br></pre></td></tr></table></figure><p><a name="5d841f0f"></a></p><h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict "></a><a href>@CacheEvict </a></h3><p><code>@CachEvict</code> 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空 。</p><p>这里需要注意两个属性</p><table><thead><tr><th>属性</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>allEntries</td><td>是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存</td><td>@CachEvict(value=”testcache”,allEntries=true)</td></tr><tr><td>beforeInvocation</td><td>是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td><td>@CachEvict(value=”testcache”，beforeInvocation=true)</td></tr></tbody></table><p>给个栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"缓存中没有，从map中获取"</span>);</span><br><span class="line">        User user = users.get(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除一条缓存，key为要清空的数据</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delect</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法调用后清空所有缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"accountCache"</span>, allEntries = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        users.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法调用前清空所有缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"accountCache"</span>, beforeInvocation = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delectAllBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        users.clear();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>其他属性</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] cacheNames() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//与value二选一</span></span><br><span class="line"><span class="function">String <span class="title">keyGenerator</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">//key的生成器。key/keyGenerator二选一使用</span></span><br><span class="line"><span class="function">String <span class="title">cacheManager</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">//指定缓存管理器</span></span><br><span class="line"><span class="function">String <span class="title">cacheResolver</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">//或者指定获取解析器</span></span><br><span class="line"><span class="function">String <span class="title">condition</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">//条件符合则清空</span></span><br></pre></td></tr></table></figure><p><a name="63f76c1e"></a></p><h3 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig "></a><a href>@CacheConfig </a></h3><p>当我们需要缓存的地方越来越多，你可以使用<code>@CacheConfig(cacheNames = {&quot;myCache&quot;})</code>注解来统一指定<code>value</code>的值，这时可省略<code>value</code>，如果你在你的方法依旧写上了<code>value</code>，那么依然以方法的<code>value</code>值为准。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = &#123;<span class="string">"user"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Cacheable(cacheNames = "user", key = "#id")</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"缓存中没有，从map中获取"</span>);</span><br><span class="line">        User user = users.get(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看它的其它属性</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String keyGenerator() default &quot;&quot;;  //key的生成器。key/keyGenerator二选一使用</span><br><span class="line">String cacheManager() default &quot;&quot;;  //指定缓存管理器</span><br><span class="line">String cacheResolver() default &quot;&quot;; //或者指定获取解析器</span><br></pre></td></tr></table></figure><p><a name="66cde69d"></a></p><h3 id="Caching"><a href="#Caching" class="headerlink" title="@Caching "></a><a href>@Caching </a></h3><p>有时候我们可能组合多个Cache注解使用，此时就需要@Caching组合多个注解标签了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Caching</span>(cacheable = &#123;</span><br><span class="line">            <span class="meta">@Cacheable</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#p0"</span>),</span><br><span class="line">            ...</span><br><span class="line">    &#125;,</span><br><span class="line">    put = &#123;</span><br><span class="line">            <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#p0"</span>),</span><br><span class="line">            ...</span><br><span class="line">    &#125;,evict = &#123;</span><br><span class="line">            <span class="meta">@CacheEvict</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#p0"</span>),</span><br><span class="line">            ....</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="d2c04b9e"></a></p><h2 id="整合EHCACHE3-x"><a href="#整合EHCACHE3-x" class="headerlink" title="整合EHCACHE3.x"></a>整合EHCACHE3.x</h2><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。它具有内存和磁盘存储，缓存加载器,缓存扩展,缓存异常处理程序,一个gzip缓存servlet过滤器,支持REST和SOAP api等特点。ehcache3.x与2.x的差距还是非常大的，主要区别在于3.x后使用了java的缓存规范JSR107!!!!!</p><p><a name="6860b943"></a></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>引入jar包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR107 API --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cache-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="d687e4bf"></a></p><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><p>需要说明的是默认路径为<code>config: classpath:/ehcache.xml</code> 入过在这个目录下这个配置可以不用写，但<code>ehcache.xml</code>必须有。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">jcache</span></span><br><span class="line">    <span class="attr">jcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:/cache/ehcache.xml</span></span><br></pre></td></tr></table></figure><p><a name="15c64aa0"></a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在resources的cache目录下新建ehcache.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">'http://www.w3.org/2001/XMLSchema-instance'</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">'http://www.ehcache.org/v3'</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jsr107</span>=<span class="string">'http://www.ehcache.org/v3/jsr107'</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.ehcache.org/v3/jsr107 http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache-template</span> <span class="attr">name</span>=<span class="string">"heap-cache"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">heap</span> <span class="attr">unit</span>=<span class="string">"entries"</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">heap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">offheap</span> <span class="attr">unit</span>=<span class="string">"MB"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">offheap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">alias</span>=<span class="string">"myuser"</span> <span class="attr">uses-template</span>=<span class="string">"heap-cache"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">expiry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ttl</span> <span class="attr">unit</span>=<span class="string">"seconds"</span>&gt;</span>40<span class="tag">&lt;/<span class="name">ttl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">expiry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后呢使用的时候<code>@CacheConfig(cacheNames = {&quot;myuser&quot;})</code> 中的cacheNames  的名字，xml中的alias必须也有，不然会报找不到缓存名。</p><p><a name="3f7403c7"></a></p><h2 id="整合EHCACHE2-x"><a href="#整合EHCACHE2-x" class="headerlink" title="整合EHCACHE2.x"></a>整合EHCACHE2.x</h2><p>整合原理跟ehcache3.x一样，需要稍微改动下</p><p><a name="6860b943-1"></a></p><h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="d687e4bf-1"></a></p><h3 id="yml配置-1"><a href="#yml配置-1" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:/cache/ehcache.xml</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        磁盘存储:将缓存中暂时不使用的对象,转移到硬盘,类似于Windows系统的虚拟内存</span></span><br><span class="line"><span class="comment">        path:指定在硬盘上存储对象的路径</span></span><br><span class="line"><span class="comment">        path可以配置的目录有：</span></span><br><span class="line"><span class="comment">            user.home（用户的家目录）</span></span><br><span class="line"><span class="comment">            user.dir（用户当前的工作目录）</span></span><br><span class="line"><span class="comment">            java.io.tmpdir（默认的临时目录）</span></span><br><span class="line"><span class="comment">            ehcache.disk.store.dir（ehcache的配置目录）</span></span><br><span class="line"><span class="comment">            绝对路径（如：d:\\ehcache）</span></span><br><span class="line"><span class="comment">        查看路径方法：String tmpDir = System.getProperty("java.io.tmpdir");</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        defaultCache:默认的缓存配置信息,如果不加特殊说明,则所有对象按照此配置项处理</span></span><br><span class="line"><span class="comment">        maxElementsInMemory:设置了缓存的上限,最多存储多少个记录对象</span></span><br><span class="line"><span class="comment">        eternal:代表对象是否永不过期 (指定true则下面两项配置需为0无限期)</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds:最大的发呆时间 /秒</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds:最大的存活时间 /秒</span></span><br><span class="line"><span class="comment">        overflowToDisk:是否允许对象被写入到磁盘</span></span><br><span class="line"><span class="comment">        说明：下列配置自缓存建立起600秒(10分钟)有效 。</span></span><br><span class="line"><span class="comment">        在有效的600秒(10分钟)内，如果连续120秒(2分钟)未访问缓存，则缓存失效。</span></span><br><span class="line"><span class="comment">        就算有访问，也只会存活600秒。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">"600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"myCache"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样呢也是这样使用<code>@CacheConfig(cacheNames = {&quot;myCache&quot;})</code> 中的cacheNames  的名字，xml中的alias必须也有，不然会报找不到缓存名。</p><p><a name="39b8a2e7"></a></p><h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性</li></ul><p><a name="6860b943-2"></a></p><h3 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当你导入这一个依赖时，SpringBoot的CacheManager就会使用RedisCache。</p><p>存入redis呢默认的缓存序列化策略为jdk序列化如果想更改怎么办呢，这里呢我们注入了一个RedisTemplate 设置了里面的序列化，然后呢把他注入到redisCacheManger里就可以了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisTemplate.getConnectionFactory());</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofHours(<span class="number">1</span>))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getValueSerializer()));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然也可以这样</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofHours(<span class="number">1</span>))   <span class="comment">// 设置缓存有效期一小时</span></span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer))</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager</span><br><span class="line">                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="9b1a5e6d"></a></p><h2 id="代码形势"><a href="#代码形势" class="headerlink" title="代码形势"></a>代码形势</h2><p>除了注解之外呢，想自己用代码的形势来使用缓存，其实是可以的，只用注入响应的cacheManager就可以啦，然后调用。举个栗子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheTest</span> <span class="keyword">extends</span> <span class="title">SpringbootCacheApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCacheManager redisCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">managerTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cache cache = redisCacheManager.getCache(<span class="string">"fulin"</span>);</span><br><span class="line">        cache.put(<span class="string">"1"</span>, <span class="string">"我看不清楚"</span>);</span><br><span class="line">        Cache.ValueWrapper valueWrapper = cache.get(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(valueWrapper.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以的，自己用代码控制缓存。</p><p>这里顺便说一下那个啥 jcache和ehcache的cacaheManager 的个性化注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JCacheCacheManager <span class="title">jCacheCacheManager</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line">        CachingProvider provider = Caching.getCachingProvider();</span><br><span class="line">        JCacheCacheManager jCacheCacheManager = <span class="keyword">new</span> JCacheCacheManager();</span><br><span class="line">        javax.cache.CacheManager eh107CacheManager = provider.getCacheManager(getClass().getResource(<span class="string">"/cache/ehcache.xml"</span>).toURI(), getClass().getClassLoader());</span><br><span class="line">        jCacheCacheManager.setCacheManager(eh107CacheManager);</span><br><span class="line">        <span class="keyword">return</span> jCacheCacheManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * ehcache 主要的管理器</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheCacheManager <span class="title">ehCacheCacheManager</span><span class="params">(EhCacheManagerFactoryBean bean)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EhCacheCacheManager(bean.getObject());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheManagerFactoryBean <span class="title">ehCacheManagerFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    EhCacheManagerFactoryBean factoryBean = <span class="keyword">new</span> EhCacheManagerFactoryBean();</span><br><span class="line">    factoryBean.setConfigLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">"/cache/ehcache.xml"</span>));</span><br><span class="line">    factoryBean.setShared(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> factoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了代码和注解看你取舍了，这边我给个工具类,能省略不少操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.Cache;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fulin缓存抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCacheSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getFromCache</span><span class="params">(Cache cache, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Cache.ValueWrapper valueWrapper = cache.get(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == valueWrapper ? <span class="keyword">null</span> : valueWrapper.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置缓存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">putCache</span><span class="params">(Cache cache, String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(key, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">evictFromCache</span><span class="params">(Cache cache, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.evict(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p><hr><ol><li>… <a href="#fnref1">↩︎</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（九）整合Redis</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B9%9D%EF%BC%89%E6%95%B4%E5%90%88Redis/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B9%9D%EF%BC%89%E6%95%B4%E5%90%88Redis/</url>
      
        <content type="html"><![CDATA[<p><a name="PklAa"></a></p><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。相比<code>Memcached</code>它支持存储的类型相对更多（字符、哈希、集合、有序集合、列表、GEO，<strong>同时Redis是线程安全的</strong>。2010年3月15日起，Redis的开发工作由VMware主持，2013年5月开始，Redis的开发由<code>Pivotal</code>赞助。</p><p><a name="Lettuce"></a></p><h2 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h2><p>Spring Boot 2.x对Redis的支持，最大的改变莫过于替换掉底层Jedis的依赖，替换成Luttuce。</p><p>Lettuce和Jedis都是连接Redis Server的客户端程序，Jedis在实现上是直连redis server，多线程环境下非线程安全，除非使用连接池，为每个Jedis实例线程间并发访问，且线程安全，满足多线程环境下的并发访问，同时它是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。</p><p>先添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先呢看下yml的配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span>  <span class="comment"># 指定存储的数据是哪个库</span></span><br></pre></td></tr></table></figure><p>默认情况下的模板只能支持StringRedisTemplate&lt;String,String&gt;，只能存字符串。这时需要自定义模板，当自定义模板后又想存储String字符串时，可以使用RedisTemplate的方式，他们俩并不冲突。在RedisCacheAutoConfiguration中自定义了一个RedisTemplate。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis缓存配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> FuLin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onfiguration</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(RedisAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisCacheAutoConfiguration</span>  </span>&#123;</span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisCacheTemplate</span><span class="params">(LettuceConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  RedisTemplate&lt;String, Serializable&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"one"</span>, <span class="string">"1"</span>);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">"two"</span>, <span class="string">"2"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"user:1"</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"fulin"</span>, <span class="string">"123456789"</span>));</span><br><span class="line">        </span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">1000</span>);</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">1000</span>).forEach(i -&gt; &#123;</span><br><span class="line">            executorService.execute(() -&gt; stringRedisTemplate.opsForValue().increment(<span class="string">"num"</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object one = redisTemplate.opsForValue().get(<span class="string">"one"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"1"</span>, one);</span><br><span class="line"></span><br><span class="line">        String two = stringRedisTemplate.opsForValue().get(<span class="string">"two"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"2"</span>, two);</span><br><span class="line"></span><br><span class="line">        User user = (User) redisTemplate.opsForValue().get(<span class="string">"user:1"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"fulin"</span>, user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Jedis"></a></p><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>如果依然想使用Jedis这里首先需要在spring-boot-starter-data-redis中排除Luttuce依赖，再引入Jedis依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将spring.redis.lettuce.pool 替换为 spring.redis.jedis.pool 即可，其他接连信息不变</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">3096</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">5000ms</span>           <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span>         <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span>        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span>           <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>           <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br></pre></td></tr></table></figure><p>然后使用没什么差别</p><p>这里放个学习手册  <a href="https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/" target="_blank" rel="noopener">RedisTemplate 学习手册</a></p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（八）事务的控制</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>所有的数据访问技术都有事务处理机制，这些技术提供了API用来开启事务、提交事务来完成数据操作，或者在发生错误的时候回滚数据。而Spring的事务机制是用统一的机制来处理不同数据访问技术的事务处理。Spring的事务机制提供了一个PlatformTransactionManager接口，不同的数据访问技术的事务使用不同的接口实现。SpringBoot提供了非常方便的事务操作，通过注解就可以实现事务的回滚，非常方便快捷，下面我们就说一下如何进行事务操作。<br><a name="6de618b5"></a></p><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a><strong>编程式事务</strong></h2><p>编程式事务管理使用TransactionTemplate或者直接使用底层的PlatformTransactionManager。对于编程式事务管理，spring推荐使用TransactionTemplate。</p><table><thead><tr><th>数据访问技术</th><th>实现</th></tr></thead><tbody><tr><td>JDBC</td><td>DataSourceTransactionManager</td></tr><tr><td>JPA</td><td>JpaTransactionManager</td></tr><tr><td>Hibernate</td><td>HibernateTransactionManager</td></tr><tr><td>JDO</td><td>JdoTransactionManager</td></tr><tr><td>分布式事务</td><td>JtaTransactionManager</td></tr></tbody></table><p>然后呢在代码中可以这样使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>  </span><br><span class="line"> <span class="keyword">private</span> DataSourceTransactionManager transactionManager;  </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testdelivery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">//定义事务隔离级别，传播行为，  </span></span><br><span class="line">        DefaultTransactionDefinition def = <span class="keyword">new</span> DefaultTransactionDefinition();    </span><br><span class="line">        def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);    </span><br><span class="line">        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    </span><br><span class="line">        <span class="comment">//事务状态类，通过PlatformTransactionManager的getTransaction方法根据事务定义获取；</span></span><br><span class="line">     <span class="comment">//获取事务状态后，Spring根据传播行为来决定如何开启事务  </span></span><br><span class="line">        TransactionStatus status = transactionManager.getTransaction(def);   </span><br><span class="line">        <span class="keyword">int</span> i = userService.queryForInt();    </span><br><span class="line">        System.out.println(<span class="string">"表中记录总数："</span>+i);  </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            userService.update(<span class="string">"1"</span>);    </span><br><span class="line">            transactionManager.commit(status);  <span class="comment">//提交status中绑定的事务  </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;    </span><br><span class="line">            transactionManager.rollback(status);  <span class="comment">//回滚  </span></span><br><span class="line">        &#125;    </span><br><span class="line">        i = userService.queryForInt(COUNT_SQL);    </span><br><span class="line">        System.out.println(<span class="string">"表中记录总数："</span>+i);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="1b703712"></a></p><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a><strong>声明式事务</strong></h2><p>可知编程式事务每次实现都要单独实现，但业务量大功能复杂时，使用编程式事务无疑是痛苦的，而声明式事务不同，声明式事务属于无侵入式，不会影响业务逻辑的实现。</p><p>声明式事务管理使用了 <code>AOP</code> 实现的，本质就是<strong>在目标方法执行前后进行拦截</strong>。在目标方法执行前加入或创建一个事务，在执行方法执行后，根据实际情况选择提交或是回滚事务。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062311994-ab7ad9cd-6d82-4fc5-989f-7d527e274b98.png#align=left&display=inline&height=549&originHeight=549&originWidth=1038&size=0&status=done&width=1038" class="lazyload"></p><p><code>@Transactiona</code>l可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。因此可以在Service层和Controller层使用。</p><p>在此处需要特别注意的是，此<code>@Transactional</code>注解来自<code>org.springframework.transaction.annotation</code>包，而不是<code>javax.transaction</code>。</p><p>这里特意说明一下</p><ol><li>如果在接口、实现类或方法上都指定了<code>@Transactional</code>注解，则优先级顺序为方法&gt;实现类&gt;接口；</li><li>建议只在实现类或实现类的方法上使用<code>@Transactional</code>，而不要在接口上使用，这是因为如果使用JDK代理机制（基于接口的代理）是没问题；而使用使用CGLIB代理（继承）机制时就会遇到问题，因为其使用基于类的代理而不是接口，这是因为接口上的<code>@Transactional</code>注解是“不能继承的”；</li><li>Spring提供了一个<code>@EnableTransactionManagement</code>注解在配置类上来开启声明式事务的支持。使用了<code>@EnableTransactionManagemen</code>t后，Spring容器会自动扫描注解<code>@Transactional</code>的方法和类。</li></ol><p><a name="0dd41352"></a></p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><table><thead><tr><th>参 数 名 称</th><th>功 能 描 述</th></tr></thead><tbody><tr><td>readOnly</td><td>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：@Transactional(readOnly=true)</td></tr><tr><td>rollbackFor</td><td>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})</td></tr><tr><td>rollbackForClassName</td><td>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：指定单一异常类名称@Transactional(rollbackForClassName=”RuntimeException”)指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”,”Exception”})</td></tr><tr><td>noRollbackFor</td><td>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</td></tr><tr><td>noRollbackForClassName</td><td>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：指定单一异常类名称：@Transactional(noRollbackForClassName=”RuntimeException”)指定多个异常类名称：@Transactional(noRollbackForClassName={“RuntimeException”,”Exception”})</td></tr><tr><td>propagation</td><td>该属性用于设置事务的传播行为。例如：@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</td></tr><tr><td>isolation</td><td>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</td></tr><tr><td>timeout</td><td>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</td></tr></tbody></table><p><a name="559ca6d0"></a></p><h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><p>事务属性包含以下五个方面：<code>隔离级别</code>、<code>传播行为</code>、<code>回滚规则</code>、<code>事务超时</code>、<code>只读</code>。</p><p><a name="4e56a273"></a></p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a><strong>事务隔离级别</strong></h3><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li><code>TransactionDefinition.ISOLATION_DEFAULT</code>：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED</li><li><code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</li><li><code>TransactionDefinition.ISOLATION_READ_COMMITTED</code>：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li><li><code>TransactionDefinition.ISOLATION_REPEATABLE_READ</code>：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</li><li><code>TransactionDefinition.ISOLATION_SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><p><a name="35d885e7"></a></p><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a><strong>事务传播行为</strong></h3><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><ul><li><code>TransactionDefinition.PROPAGATION_REQUIRED</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li><li><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code>：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><code>TransactionDefinition.PROPAGATION_SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code>：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><code>TransactionDefinition.PROPAGATION_NEVER</code>：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li><code>TransactionDefinition.PROPAGATION_MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li><code>TransactionDefinition.PROPAGATION_NESTED</code>：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p><a name="32a98158"></a></p><h3 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a><strong>事务超时</strong></h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。<br>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p><p><a name="cb8f07a0"></a></p><h3 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a><strong>事务只读属性</strong></h3><p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。<br>默认为读写事务。</p><p><a name="f16908f7"></a></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><a name="b0821c3c"></a></p><h3 id="仅对-public-方法有效"><a href="#仅对-public-方法有效" class="headerlink" title="仅对 public 方法有效"></a>仅对 public 方法有效</h3><p>只有 <code>@Transactional</code> 注解应用到 public 方法上才能进行事务管理。这是因为 Spring 在 AOP 事务注解时，在读取注解上的属性方法中，会优先判断方法是否是 public，如果不是 public，就不会读取事务配置信息。</p><p><a name="b39255c6"></a></p><h3 id="AOP-的自调用问题"><a href="#AOP-的自调用问题" class="headerlink" title="AOP 的自调用问题"></a>AOP 的自调用问题</h3><p>在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理。也就是说，在同一个类中的一个 <a href>@Transactional </a> 方法中，去掉用另一个 <a href>@Transactional </a> 方法，会导致第二个方法的事务无效，被 Spring AOP 所忽略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transaction1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    transaction2(); <span class="comment">// transaction2 事务无效</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transaction2</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="332cba33"></a></p><h3 id="对方法try-catch"><a href="#对方法try-catch" class="headerlink" title="对方法try-catch"></a>对方法try-catch</h3><p>对方法进行try-catch后 捕捉异常，则事物就失效了，如果既想try-catch又想事物回归怎么办呢？这样就行了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">boolean</span> <span class="title">transaction1</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        xxxService.save()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;   </span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">       TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();<span class="comment">//进行手动回滚 </span></span><br><span class="line">   <span class="keyword">return</span> fasle;   </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置回滚点</span></span><br><span class="line">Object savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint(); </span><br><span class="line">....</span><br><span class="line">    </span><br><span class="line"><span class="comment">//回滚到savePoint</span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br></pre></td></tr></table></figure><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（七）持久层框架</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B8%83%EF%BC%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B8%83%EF%BC%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>springboot具有非常棒的持久层框架支持，下面我将介绍我用过的三种持久层框架进行简述使用。</p><p>由于这里操作的都是一张表，这里贴出通用的yml和建表语句  切记这里使用的是mysql8 ，5.8之前的朋友请修改后缀去掉com.mysql.cj.jdbc.Driver 中的cj。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Test`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Test`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`inhere`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'在不在'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.8.100:3306/FuLinTest?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><hr><p><a name="JdbcTemplate"></a></p><h1 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h1><p>首先呢看下项目结构</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062270067-89d9a2dc-6511-4b4b-86c4-5111cbf5daea.png#align=left&display=inline&height=495&originHeight=495&originWidth=473&size=0&status=done&width=473" class="lazyload"></p><p>记得使用之前千万不要不加依赖哈哈</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jdbcTemplate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后贴出实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Boolean inhere;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTest</span><span class="params">(String name, <span class="keyword">int</span> age, Boolean inhere)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.inhere = inhere;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTest</span><span class="params">(Long id, String name, <span class="keyword">int</span> age, Boolean inhere)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.inhere = inhere;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"MyTest&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"id="</span>).append(id);</span><br><span class="line">        sb.append(<span class="string">", name='"</span>).append(name).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">", age="</span>).append(age);</span><br><span class="line">        sb.append(<span class="string">", inhere="</span>).append(inhere);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是dao层的实现类和接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyTestDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">MyTest <span class="title">selectOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(MyTest myTest)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(MyTest myTest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.dao.MyTestDao;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTestDaoImpl</span> <span class="keyword">implements</span> <span class="title">MyTestDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyTest <span class="title">selectOne</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id,name,age,inhere from Test where id=? "</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, (resultSet, i) -&gt; &#123;</span><br><span class="line">            MyTest myTest = <span class="keyword">new</span> MyTest();</span><br><span class="line">            myTest.setId(resultSet.getLong(<span class="string">"id"</span>));</span><br><span class="line">            myTest.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">            myTest.setAge(resultSet.getInt(<span class="string">"age"</span>));</span><br><span class="line">            myTest.setInhere(resultSet.getBoolean(<span class="string">"inhere"</span>));</span><br><span class="line">            <span class="keyword">return</span> myTest;</span><br><span class="line">        &#125;, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(MyTest myTest)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into Test (name,age,inhere) values(?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, myTest.getName(), myTest.getAge(), myTest.getInhere());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from Test where id=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MyTest myTest)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update Test set name=?,age=?,inhere=? where id=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, myTest.getName(), myTest.getAge(), myTest.getInhere(), myTest.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢编写测试看看都能用不</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.dao.MyTestDao;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootJdbcApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyTestDao myTestDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyTest myTest = <span class="keyword">new</span> MyTest(<span class="string">"fulin"</span>, <span class="number">18</span>, <span class="keyword">true</span>);</span><br><span class="line">        myTestDao.insert(myTest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(myTestDao.selectOne(<span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyTest myTest = <span class="keyword">new</span> MyTest(<span class="number">1L</span>, <span class="string">"fulin"</span>, <span class="number">18</span>, <span class="keyword">true</span>);</span><br><span class="line">        myTestDao.update(myTest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        myTestDao.delete(<span class="number">13L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok 我这边测试都通过了</p><hr><p><a name="bb59a9cf"></a></p><h1 id="Spring-Data-jpa"><a href="#Spring-Data-jpa" class="headerlink" title="Spring Data jpa"></a>Spring Data jpa</h1><p>首先呢还是先看下项目结构</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062270114-a1fb2338-246f-4380-9289-186b19c43161.png#align=left&display=inline&height=532&originHeight=532&originWidth=472&size=0&status=done&width=472" class="lazyload"></p><p>然后使用的时候千万不要忘了加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jpa --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先看下实体，不要写错注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"MyTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Boolean inhere;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot创建DAO层很多种方法其中japrepository是最强大的而且最有特色的一种，我们可以针对不同的实体创建repository接口。Spring会根据方法名称的规则进行自动生成实现，强大的不要不要的。在SpringBoot中默认已经提供了非常多的常规CRUD操作的repository，以下就是Spring为我们提供的repository接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">MyTest</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别看啥都没有功能超级牛逼  具体可以去jpa官网学习下怎么使用的  <a href="https://docs.spring.io/spring-data/jpa/docs/2.1.0.RC1/reference/html/" target="_blank" rel="noopener">JPA 学习手册</a></p><p>在看下service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(MyTest tset)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(MyTest myTest)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;MyTest&gt; <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.dao.TestDao;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.TestService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDao testDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MyTest tset)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testDao.save(tset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(MyTest myTest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testDao.saveAndFlush(myTest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        testDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MyTest&gt; <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写个测试类测试下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.service.TestService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootJpaApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyTest t = <span class="keyword">new</span> MyTest();</span><br><span class="line">        t.setAge(<span class="number">11</span>);</span><br><span class="line">        t.setInhere(<span class="keyword">false</span>);</span><br><span class="line">        t.setName(<span class="string">"DesrCat"</span>);</span><br><span class="line">        testService.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyTest t = <span class="keyword">new</span> MyTest();</span><br><span class="line">        t.setAge(<span class="number">180</span>);</span><br><span class="line">        t.setInhere(<span class="keyword">false</span>);</span><br><span class="line">        t.setName(<span class="string">"昴先生111"</span>);</span><br><span class="line">        t.setId(<span class="number">1L</span>);</span><br><span class="line">        testService.update(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;MyTest&gt; select = testService.select();</span><br><span class="line">        Assert.assertTrue(select.size() &gt; <span class="number">0</span>);</span><br><span class="line">        System.out.println(Collections.unmodifiableCollection(select));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testService.del(<span class="number">11L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里是都通过了你呢?</p><hr><p><a name="Mybatis"></a></p><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>这里看下项目结构</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062270066-0bb56a87-9b6b-4d06-a742-b644f965510f.png#align=left&display=inline&height=498&originHeight=498&originWidth=517&size=0&status=done&width=517" class="lazyload"></p><p>依赖依赖依赖依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的yml需要加入</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.maoxs.pojo</span></span><br></pre></td></tr></table></figure><p>然后呢是实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Boolean inhere;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢是dao</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyTestMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;MyTest&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.maoxs.dao.MyTestMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"base_sql"</span>&gt;</span></span><br><span class="line">         a.id as  id,</span><br><span class="line">         a.name as  name,</span><br><span class="line">         a.age as  age,</span><br><span class="line">         a.inHere as inHere</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.maoxs.pojo.MyTest"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"base_sql"</span>/&gt;</span></span><br><span class="line">        from</span><br><span class="line">        Test a</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切记在启动类上加入MapperScan 注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.maoxs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.dao.MyTestMapper;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MyTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootMybatisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyTestMapper myTestMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;MyTest&gt; all = myTestMapper.findAll();</span><br><span class="line">        System.out.println(Collections.unmodifiableCollection(all));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mybatis就不多说了，应该经常用吧实在不会的小伙伴 点击   <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">mybatis 学习手册</a></p><hr><p>然后呢就推荐大家使用mybatis的一个开源插件myabtis-plus</p><p>//TODO 后期呢我会放上使用帖子</p><p><a href="http://mp.baomidou.com/#/?id=%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">mybatis-plus 学习手册</a></p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（六）web开发与错误的处理</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%85%AD%EF%BC%89web%E5%BC%80%E5%8F%91%E4%B8%8E%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%85%AD%EF%BC%89web%E5%BC%80%E5%8F%91%E4%B8%8E%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在互联网时代，我们所开发的应用大多是直面用户的，程序中的任何一点小疏忽都可能导致用户的流失，而程序出现异常往往又是不可避免的，那该如何减少程序异常对用户体验的影响呢？其实方法很简单，对异常进行捕获，然后给予相应的处理即可，springboot 提供了比较方便的错误处理方式。</p><p>首先呢我们新建一个springboot项目，并且新建一个百分百会出错的controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来看错误的处理</p><hr><p><a name="ErrorController"></a></p><h3 id="ErrorController"><a href="#ErrorController" class="headerlink" title="ErrorController"></a>ErrorController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.ErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doHandleError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"出错了ErrorController"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后哪启动项目用postman测试</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062230507-2a086fbe-c602-42b5-a932-b8826f727901.png#align=left&display=inline&height=598&originHeight=598&originWidth=1116&size=0&status=done&width=1116" class="lazyload"></p><p>可以看到 出错返回了</p><hr><p><a name="ControllerAdvice"></a></p><h3 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="ControllerAdvice"></a>ControllerAdvice</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">HttpServletRequest</span> <span class="title">req</span>, <span class="title">Exception</span> <span class="title">e</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"出错了ExceptionHandler"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以了依然用postman进行测试</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062230492-7fc3271e-a0b7-43ab-8dad-53c24e10c696.png#align=left&display=inline&height=598&originHeight=598&originWidth=1116&size=0&status=done&width=1116" class="lazyload"></p><p>依然达到效果。</p><p>不过呢做个说明，这个控制器不能识别是不是ajax，但是可以巧妙的通过异常类来区分，</p><p>只需要更改<a href>@ExceptionHandler(value </a> = 自定义异常.class)即可。</p><hr><p><a name="BasicErrorController"></a></p><h3 id="BasicErrorController"><a href="#BasicErrorController" class="headerlink" title="BasicErrorController"></a>BasicErrorController</h3><p>BasicErrorController，这个是SpringBoot的默认错误处理，也是一种全局处理方式。咱们可以模仿这种处理方式自定义自己的全局错误处理 下面定义了一个自己的BasicErrorController，可以根据自己的需求自定义errorHtml()和error()的返回值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ServerProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBasicErrorController</span> <span class="keyword">extends</span> <span class="title">BasicErrorController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBasicErrorController</span><span class="params">(ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> DefaultErrorAttributes(), serverProperties.getError());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请求的状态</span></span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        response.setStatus(getStatus(request).value());</span><br><span class="line">        Map&lt;String, Object&gt; model = getErrorAttributes(request,</span><br><span class="line">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class="line">        ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="comment">//指定自定义的视图</span></span><br><span class="line">        <span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error/error"</span>, model) : modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">                isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="comment">//输出自定义的Json格式</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="keyword">false</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>, <span class="string">"出错了出错了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(map, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切记要加controller 否则不会被扫描到注册</p><p>然后进行测试先试试页面好使不</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062230508-4b23b3a4-1113-4cff-8a16-2c9b1f972879.png#align=left&display=inline&height=314&originHeight=314&originWidth=849&size=0&status=done&width=849" class="lazyload"></p><p>没问题在试试 ajax调用</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062230562-52f4efc6-bdf4-4168-b997-82f92dafc538.png#align=left&display=inline&height=475&originHeight=475&originWidth=1073&size=0&status=done&width=1073" class="lazyload"><br>也没问题</p><hr><p><a name="22408e5d"></a></p><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><p>在spring2.x后 自定义错误页面变的更简单只需要实现ErrorViewResolver即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status.value() == <span class="number">400</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error/400"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error/500"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><p><a name="279d2c8a"></a></p><h3 id="映射Spring-MVC之外的错误页面"><a href="#映射Spring-MVC之外的错误页面" class="headerlink" title="映射Spring MVC之外的错误页面"></a>映射Spring MVC之外的错误页面</h3><p>添加如下配置即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorPageRegistrar <span class="title">errorPageRegistrar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyErrorPageRegistrar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorPageRegistrar</span> <span class="keyword">implements</span> <span class="title">ErrorPageRegistrar</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addErrorPages(<span class="keyword">new</span> ErrorPage(HttpStatus.BAD_REQUEST, <span class="string">"具体你的path"</span>));</span><br><span class="line">            registry.addErrorPages(<span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">"具体你的path"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>具体呢各种方法有各种方法的用途，我个人比较喜欢第继承BasicErrorController更灵活的处理还可以扩展。</p><p><code>ControllerAdvice</code> 处理有一定的局限性只有进入 <code>Controller</code> 层的错误，才会由 <code>@ControllerAdvice</code> 处理。</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（五）Servlet、Filter、Listenter</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89Servlet%E3%80%81Filter%E3%80%81Listenter/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89Servlet%E3%80%81Filter%E3%80%81Listenter/</url>
      
        <content type="html"><![CDATA[<p>web开发使用Controller基本能解决大部分的需求，但是有时候我们也需要使用Servlet，因为相对于拦截和监听来说，有时候原生的还是比较好用的，现在就来简单的在SpringBoot中使用这些特殊类吧。当使用spring-Boot时，嵌入式Servlet容器通过扫描注解的方式注册Servlet、Filter和Servlet规范的所有监听器（如HttpSessionListener监听器）。Spring boot 的主 Servlet 为 DispatcherServlet，其默认的url-pattern为“/”。也许我们在应用中还需要定义更多的Servlet，该如何使用SpringBoot来完成呢？<br><a name="182ed3fc"></a></p><h3 id="代码注册"><a href="#代码注册" class="headerlink" title="代码注册"></a>代码注册</h3><p>首先贴出 Servlet、Filter、Listenter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我filter初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我filter执行"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我filter销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我监听器初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我监听器销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我进入了servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"我进入了servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注入几个bean分别是ServletRegistrationBean、FilterRegistrationBean、ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> TestServlet(), <span class="string">"/show/*"</span>);<span class="comment">// ServletName默认值为首字母小写，即myServlet</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">indexFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> TestFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean();</span><br><span class="line">        servletListenerRegistrationBean.setListener(<span class="keyword">new</span> TestListener());</span><br><span class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行 并访问/show/index 查看日志</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062190803-97fa94ea-8794-4522-be11-00b3e5fb1767.png#align=left&display=inline&height=317&originHeight=317&originWidth=791&size=0&status=done&width=791" class="lazyload"></p><p>ok 完全生效。</p><hr><p><a name="1b1ffb98"></a></p><h3 id="注解自动注册"><a href="#注解自动注册" class="headerlink" title="注解自动注册"></a>注解自动注册</h3><p>同样是上面的三个类 ，去除代码注册的bean  然后加入以下注解</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062190645-db5be5ce-77d6-4354-9bb2-3ccf63d0f61f.png#align=left&display=inline&height=119&originHeight=119&originWidth=584&size=0&status=done&width=584" class="lazyload"></p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062190865-ab72637c-10ec-4dbe-8022-042d15b8f05b.png#align=left&display=inline&height=107&originHeight=107&originWidth=723&size=0&status=done&width=723" class="lazyload"></p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062190699-86248dc7-faa4-49cc-86c4-29a90725c8db.png#align=left&display=inline&height=69&originHeight=69&originWidth=478&size=0&status=done&width=478" class="lazyload"></p><p>然后在启动类上加入注解</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062190703-a0fa2e76-4011-4567-860b-d81e2d0c1a3f.png#align=left&display=inline&height=134&originHeight=134&originWidth=579&size=0&status=done&width=579" class="lazyload"></p><p>运行 并访问/show/index 查看日志</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062190626-35dc9042-ed4a-4d01-9ed7-158023f43870.png#align=left&display=inline&height=317&originHeight=317&originWidth=791&size=0&status=done&width=791" class="lazyload"></p><p>依然ok</p><hr><p><a name="d01dd06d"></a></p><h3 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h3><p>在springboot使用springmvc 的时候不需要配置DispatcherServlet的因为已经自动配置了。</p><p>但是如果想要加一些初始配置参数如何解决呢，添加以下代码即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherRegistration</span><span class="params">(DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(dispatcherServlet);</span><br><span class="line">        registration.addUrlMappings(<span class="string">"*.do"</span>);</span><br><span class="line">        registration.addUrlMappings(<span class="string">"*.json"</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（四）web开发与模版引擎</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%9B%9B%EF%BC%89web%E5%BC%80%E5%8F%91%E4%B8%8E%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E5%9B%9B%EF%BC%89web%E5%BC%80%E5%8F%91%E4%B8%8E%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot 的web应用开发，是基于spring mvc的，在动态HTML实现上Spring Boot依然可以完美胜任，并且提供了多种模板引擎的默认配置支持，所以在推荐的模板引擎下，我们可以很快的上手开发动态网站。</p><p>springboot在spring 的默认基础上，自动添加了以下特征：</p><ol><li>包含了ContentNegotiatingViewResolver 和BeanNameViewResolver beans。</li><li>对静态资源的支持，包括对webjars的支持。</li><li>自动注册Converter、GenericConverter、Formatter beans。</li><li>对HttpMessageConverters的支持</li><li>自动注册MessageCodeResolver</li><li>对静态比如 index.html的支持</li><li>主动使用ConfigurableWebBindingInitializer bean</li></ol><p>差不多SpringBoot支持这几种模版引擎</p><p>FreeMarker、Thymeleaf、Groovy、Mustache</p><p>我只用过前两种，后两种用到我会继续补充。</p><p>这里要说明下jsp，官方已经不推荐使用jsp，因为jsp只能打war包，然后在标准的容器内运行</p><p>然而一些容器 比如jetty根本就不支持jsp，jsp的一些比如自定义错误页面，也无法覆盖springBoot的默认错误页面</p><p>下面就来分别说一下吧</p><p><strong>这里为了方便我所有demo的controller、css 和实体类以及最后的结果都是一样的提前贴出</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"hello"</span>);</span><br><span class="line">        String name = <span class="string">"地下城小分队"</span>;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> User(i + <span class="number">0L</span>, <span class="string">"勇士代号"</span> + UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">6</span>));</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        mv.addObject(<span class="string">"name"</span>, name);</span><br><span class="line">        mv.addObject(<span class="string">"users"</span>, users);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line">  <span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff527d</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062127624-021bdff7-73a6-4bd6-afd1-ae304a937644.png#align=left&display=inline&height=473&originHeight=473&originWidth=374&size=0&status=done&width=374" class="lazyload"></p><hr><p><a name="d944c4c7"></a></p><h1 id="自由Marker"><a href="#自由Marker" class="headerlink" title="自由Marker"></a>自由Marker</h1><p>首先呢看下项目结构目录</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062127009-f5c5330b-b631-411c-a160-f90a4a4eec5d.png#align=left&display=inline&height=530&originHeight=530&originWidth=488&size=0&status=done&width=488" class="lazyload"></p><p>玩起来之前切记添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- freemarker 模版引擎 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml配置如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/templates/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.ftl</span></span><br></pre></td></tr></table></figure><p>然后是ftl</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/css/home.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#list</span> <span class="attr">users</span> <span class="attr">as</span> <span class="attr">u</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;u.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;u.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于freemarker呢 不太会的小伙伴 点击 <a href="https://sourceforge.net/projects/freemarker/files/chinese-manual/" target="_blank" rel="noopener">自由Marker学习手册</a> 日后有机会我会补充使用</p><hr><p><a name="Thymeleaf"></a></p><h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><p>项目结构</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062126947-6eccaa7a-4d82-400e-a40b-00454691b3e5.png#align=left&display=inline&height=550&originHeight=550&originWidth=473&size=0&status=done&width=473" class="lazyload"></p><p>别忘了添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/templates/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure><p>然后是html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/css/home.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">th:each</span>=<span class="string">"users : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;users.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;users.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对Thymeleaf 不太会的小伙伴可以点击 <a href="https://www.thymeleaf.org/documentation.html" target="_blank" rel="noopener">Thymeleaf学习手册</a> 日后有机会我会补充使用</p><hr><p><a name="jsp"></a></p><h1 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h1><p>然后就TM是jsp了 真是忍不住吐槽了，官方不推荐真的是有原因的。</p><p>看下项目结构</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062126986-5d3cbfb3-30d0-4610-8406-65c0d2e83a52.png#align=left&display=inline&height=574&originHeight=574&originWidth=473&size=0&status=done&width=473" class="lazyload"></p><p>如果使用插件创建的话</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062126947-68f8f30c-d3fe-48e9-b4cb-45412f5e6a21.png#align=left&display=inline&height=534&originHeight=534&originWidth=969&size=0&status=done&width=969" class="lazyload"></p><p>记得勾选上为war 或者在pom中添加 <code>&lt;packaging&gt;war&lt;/packaging&gt;</code></p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里要说明下启动类需要改下 添加如下配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootJspApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(SpringbootJspApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootJspApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/WEB-INF/jsp/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure><p>jsp文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../webapp/css/home.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"user"</span> <span class="attr">items</span>=<span class="string">"$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然发现一个有趣的事情在使用<code>spring-boot-maven-plugin</code>打包插件时，默认情况下打包的应用时访问不了<code>jsp</code>目录文件的。搞了半天也访问不到，其实呢很简单  在pom中加入资源配置即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包时将jsp文件拷贝到META-INF目录下 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定resources插件处理哪个目录下的资源文件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--注意此次必须要放在此目录下才能被访问到 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;resource&gt;</span></span><br><span class="line"><span class="comment">                指定resources插件处理哪个目录下的资源文件</span></span><br><span class="line"><span class="comment">                &lt;directory&gt;src/main/resources/static&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">                注意此次必须要放在此目录下才能被访问到</span></span><br><span class="line"><span class="comment">                &lt;targetPath&gt;META-INF/resources/static&lt;/targetPath&gt;</span></span><br><span class="line"><span class="comment">                &lt;includes&gt;</span></span><br><span class="line"><span class="comment">                    &lt;include&gt;**/**&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">            &lt;/resource&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;excludes&gt;</span></span><br><span class="line"><span class="comment">                    &lt;exclude&gt;src/main/resources/static/**&lt;/exclude&gt;</span></span><br><span class="line"><span class="comment">                &lt;/excludes&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相信大家一开始学的都是jsp吧 就不贴啥网站了</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（三）日志的配置</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89%E6%97%A5%E5%BF%97%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89%E6%97%A5%E5%BF%97%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在开发和运维中日志的处理可是少不了的，这里我们就来说明一下SpringBoot中的日志配置</p><p>首先说明下SpringBoot支持的日志框架</p><p>Java Util Logging、Log4J2、logback</p><p>其中呢SpringBoot默认使用的是logback，配置方式有默认配置和引用外部文件配置两种。<br><a name="62382372"></a></p><h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><p><a name="5d3ac40e"></a></p><h3 id="一、默认配置方式"><a href="#一、默认配置方式" class="headerlink" title="一、默认配置方式"></a>一、默认配置方式</h3><p>SpringBoot默认使用的是logback。</p><p>如果你在Maven中添加的以下依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实这个是不需要的，因为SpringBoot的spring-boot-starter中包含了spring-boot-starter-logging。</p><p>日志级别从高到低分为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br></pre></td></tr></table></figure><p>yml中加入</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062089489-cc8e2b53-48ff-41ba-9c30-e1faf12f36ff.png#align=left&display=inline&height=733&originHeight=733&originWidth=1346&size=0&status=done&width=1346" class="lazyload"></p><p>新建一个测试类，发现日志就已经输出了</p><p>如果想自定义包的日志级别 可以在l添加如下配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">com.maoxs:</span> <span class="string">info</span> <span class="comment">#自定义包的日志输出级别</span></span><br></pre></td></tr></table></figure><p>如果想改变日志的输出格式则添加如下配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">"%d -%msg%n"</span></span><br></pre></td></tr></table></figure><p>如果想输出为文件形式则可以添加如下配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">"%d -%msg%n"</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">E:\springBootSomeProject\</span>  <span class="comment"># 日志文件,绝对路径或相对路径</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">E:\springBootSomeProject\log</span>   <span class="comment"># 保存日志文件目录路径</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>logging.file <code>设置文件，可以是绝对路径，也可以是相对路径。如：</code>logging.file=my.log<br>logging.path <code>设置目录，会在该目录下创建</code>spring.log<code>文件，并写入日志内容，如：</code>logging.path=E:\somePaoject</p><p>但是二者不能同时使用，如若同时使用，则只有<code>logging.file</code>生效<br>默认情况下，日志文件的大小达到<code>10MB</code>时会切分一次，产生新的日志文件，默认级别为：<code>ERROR、WARN、INFO</code></p><p>插件使用 由于日志每次都要写这么一行玩意</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span>  <span class="keyword">static</span> Logger logger=LoggerFactory.getLogger(******<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>可以使用lombok插件 具体安装可以去百度 （未来我会放上使用贴）</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062089528-1775727d-ef81-4e0e-b7a8-b5697ab1c8b0.png#align=left&display=inline&height=449&originHeight=449&originWidth=889&size=0&status=done&width=889" class="lazyload"></p><p>也可以实现日志的效果，很方便。</p><hr><p><a name="d55acd04"></a></p><h3 id="二、自定义日志配置"><a href="#二、自定义日志配置" class="headerlink" title="二、自定义日志配置"></a>二、自定义日志配置</h3><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p><ul><li>Logback：<code>logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</code></li><li>Log4j：<code>log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</code></li><li>Log4j2：<code>log4j2-spring.xml, log4j2.xml</code></li><li>JDK (Java Util Logging)：<code>logging.properties</code></li></ul><p>spring官方提示建议您使用<code>-spring</code>变量进行日志记录配置 例如，<code>logback-spring.xml</code>而不是<code>logback.xml</code></p><p>也就是说如果命名为logback.xml将无法初始化日志配置</p><p>如果是spring指认的默认配置文件则yml不需要配置任何东西就可以生效，如果不是的话则需要指认下添加如下配置即可</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback-xxxx.xml</span></span><br></pre></td></tr></table></figure><p>这里贴出一份基础的 logback-spring.xml，供大家测试 想学习更深的话 点击<a href="https://logback.qos.ch/demo.html" target="_blank" rel="noopener">logback学习网站</a></p><p>比较方便的是 不同环境中间的配置 可以用<code>&lt;springProfile name=&quot;profile&quot;&gt;</code>标签来包括</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件输出格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"PATTERN"</span> <span class="attr">value</span>=<span class="string">"%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) |-%-5level [%thread] %c [%L] -| %msg%n"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- test文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"TEST_FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"c:/opt/roncoo/logs"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- pro文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"PRO_FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"/opt/roncoo/logs"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.maoxs"</span> <span class="attr">level</span>=<span class="string">"debug"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每天产生一个文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"TEST-FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;TEST_FILE_PATH&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;TEST_FILE_PATH&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>100<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"TEST-FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"PROD_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PRO_FILE_PATH&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;PRO_FILE_PATH&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>100<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"PROD_FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里在说下log4j2的配置把 可能有些小伙伴还是喜欢log4j2的配置规则</p><p>如果想使用log4j2则需要去除spring-boot-starter-logging 因为会冲突</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--去除 spring-boot-starter-logging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加log4j2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里也贴出一个log4j2的基础配置，供大家测试 想学习更多配置 点击 <a href="http://logging.apache.org/log4j/2.x/articles.html" target="_blank" rel="noopener">log4j2学习网站</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span></span><br><span class="line"><span class="comment">     你会看到log4j2内部各种详细输出。可以设置成OFF(关闭) 或 Error(只输出错误信息)。</span></span><br><span class="line"><span class="comment">     30s 刷新此配置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件目录、压缩文件目录、日志格式配置  /Users/admin/Code 根据自己的需求改变--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileName"</span>&gt;</span>/Users/admin/Code/log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"fileGz"</span>&gt;</span>/Users/admin/Code/log/7z<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"PID"</span>&gt;</span>????<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span>&gt;</span>%clr&#123;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;&#123;faint&#125; %clr&#123;%5p&#125; %clr&#123;$&#123;sys:PID&#125;&#125;&#123;magenta&#125; %clr&#123;---&#125;&#123;faint&#125; %clr&#123;[%15.15t]&#125;&#123;faint&#125; %clr&#123;%-40.40c&#123;1.&#125;&#125;&#123;cyan&#125; %clr&#123;:&#125;&#123;faint&#125; %m%n%xwEx<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出控制台日志的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出日志的格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"infoFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;fileName&#125;/web-info.log"</span> <span class="attr">immediateFlush</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">filePattern</span>=<span class="string">"$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/%d&#123;yyyy-MM-dd&#125;-%i.web-info.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"20 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录info和warn级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 存储所有error信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"errorFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;fileName&#125;/web-error.log"</span> <span class="attr">immediateFlush</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">filePattern</span>=<span class="string">"$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/%d&#123;yyyy-MM-dd&#125;-%i.web-error.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_PATTERN&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 只记录error级别信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mixed sync/async --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">includeLocation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"infoFile"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"errorFile"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncRoot</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">includeLocation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"infoFile"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"errorFile"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置方法和logback 自动以配置一样</p><p>值得一提的是lombok 也提供了log4j2的简便用法 在类上加入<a href>@Log4j2 </a> 注解即可</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062089560-a3737da6-7440-4dfb-9d6d-5b64a3ef946d.png#align=left&display=inline&height=383&originHeight=383&originWidth=990&size=0&status=done&width=990" class="lazyload"></p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（二）properties和yml</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89properties%E5%92%8Cyml/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89properties%E5%92%8Cyml/</url>
      
        <content type="html"><![CDATA[<p>上述中讲到了怎么创建SpringBoot项目，那么现在就来介绍下SpringBoot配置文件的两种格式yml和properties</p><p>首先呢发上一份application.properties<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062053334-f479c51b-2689-4940-8d80-a6a2ace19d4c.png#align=left&display=inline&height=420&originHeight=420&originWidth=1130&size=0&status=done&width=1130" class="lazyload"></p><p>在放上一份相同配置的application.yml</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062053372-f2eb72b0-c505-475e-b712-20347ba604ab.png#align=left&display=inline&height=416&originHeight=416&originWidth=1721&size=0&status=done&width=1721" class="lazyload"></p><p>我们可以看到，相同的配置下yml显得更加简洁， 但是yml却拥有相当严格的格式，他的层级关系必须以相应的缩进表示</p><p>可以使2空格可以使更多的空格只要层级间保持一致即可，切记冒号前要多加一个空格</p><hr><p><a name="01b1dcc5"></a></p><h1 id="读取顺序"><a href="#读取顺序" class="headerlink" title="读取顺序"></a>读取顺序</h1><p>说明一下读取顺序的问题</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062053344-d46ae6af-cefa-44e9-bdab-4fb2916a1819.png#align=left&display=inline&height=641&originHeight=641&originWidth=515&size=0&status=done&width=515" class="lazyload"></p><p>如果在不同的目录中存在多个配置文件，它的读取顺序是：</p><pre><code>1、config/application.properties（项目根目录中config目录下）2、config/application.yml3、application.properties（项目根目录下）4、application.yml5、resources/config/application.properties（项目resources目录中config目录下）6、resources/config/application.yml7、resources/application.properties（项目的resources目录下）8、resources/application.yml</code></pre><p>   注：</p><pre><code>1、如果同一个目录下，有application.yml也有application.properties，默认先读取application.properties。2、如果同一个配置属性，在多个配置文件都配置了，默认使用第1个读取到的，后面读取的不覆盖前面读取到的。3、创建SpringBoot项目时，一般的配置文件放置在“项目的resources目录下</code></pre><hr><p><a name="3f7186e2"></a></p><h1 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h1><p>在真实的开发中，环境总是多变的，我们不能一直的去改配置文件，做一些重复的劳动，在SpringBoot中提供了配置文件的多环境配置，不同的配置环境可以配置不同的参数，当然这样也方便部署，提高效率，减少出错的情况。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564062053315-76249c94-2bd0-4476-8bda-c8694731f543.png#align=left&display=inline&height=136&originHeight=136&originWidth=443&size=0&status=done&width=443" class="lazyload"></p><p>在配置文件后面 以application-{profile}.yml 的方式命名文件 然后在application.yml中加入</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>即可 启动的时候就会去读取appliaction-dev.yml中的配置</p><hr><p><a name="bootstrap"></a></p><h1 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h1><p>如果你创建了一个bootstrap.yml的配置文件 （不是那个前端框架）</p><p>则你在启动SpringBoot项目的时候会先去读取bootstrap.yml中的配置，这里要说明一下</p><p>bootstrap.yml 用于应用程序上下文的引导阶段。</p><p>bootstrap.yml 由父Spring ApplicationContext加载。</p><p>父ApplicationContext 被加载到使用 application.yml 的之前。</p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来学SpringBoot（一）项目的创建</title>
      <link href="/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2019/07/25/yuque/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Spring官方说，Spring Boot使得创建独立的、生产级的基于Spring的应用程序变得很容易，您可以“直接运行”。我们对Spring平台和第三方库抱有自己的看法，这样您就可以以最小的麻烦开始。大多数Spring启动应用程序只需要很少的Spring配置。<br>我们就从创建项目开始</p><p>工具为idea  、jdk1.8</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061992276-d6bf22f2-55d4-4882-a85c-cbe66c3b34a1.png#align=left&display=inline&height=733&originHeight=733&originWidth=1214&size=0&status=done&width=1214" class="lazyload"></p><p>idea新建项目注意 默认访问的网址是<a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a>  如果部分小伙伴的点击下一步加载不出来的话在Custom中把请求协议改为http (如果实在加载不出来，要学会科学上网)</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061993510-f6edf61f-9da0-4e38-92f7-a951e2407e6a.png#align=left&display=inline&height=623&originHeight=623&originWidth=1032&size=0&status=done&width=1032" class="lazyload"></p><p>填写对应的  group 和 artifact</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061992268-b5565939-ea0c-42f0-a0f4-28bf8e507653.png#align=left&display=inline&height=727&originHeight=727&originWidth=1198&size=0&status=done&width=1198" class="lazyload"></p><p>这里有SpringBoot 集成的很多依赖，需要什么就选择什么</p><p>next 下就创建了一个SpringBoot项目</p><p>需要注意下 SpringBoot pom的 parent 或者 祖宗 parent 必须是 spring-boot-starter-parent</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061992282-6ec697a5-3ac3-487e-98a7-ca756d18347c.png#align=left&display=inline&height=739&originHeight=739&originWidth=1153&size=0&status=done&width=1153" class="lazyload"></p><p>看下项目的结构</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061992301-f4042611-0f0d-47d6-ad5b-5ed3ce551481.png#align=left&display=inline&height=277&originHeight=277&originWidth=492&size=0&status=done&width=492" class="lazyload"></p><p>application.properties 是SpringBoot的 配置文件， 这里我推荐使用yml格式的</p><p>这里编写一个随便创建一个包 建一个测试的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要说明 SpringBoot是内嵌了容器，可以直接main方法当作媒介直接启动项目</p><p>不过需要添加@SpringBootAppliaction 注解才可以启动项目</p><p>这里需要注意SpringBoot 推荐吧启动类放在子包的外边，因为这样他会扫描自己同级目录和同级目录下的子包的所有的类，当然如果特殊可以添加 @ComponentScan() 里面填写包的路径即可，多个”,”隔开</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061992325-ed427f11-b553-4a53-b93b-005f894a851f.png#align=left&display=inline&height=510&originHeight=510&originWidth=1644&size=0&status=done&width=1644" class="lazyload"></p><p>然后启动方法即可 SpringBoot启动默认的端口是 8080</p><p>访问刚才写的接口</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061992372-5f1b792d-47ee-40cf-8e2a-f110ba11aed4.png#align=left&display=inline&height=375&originHeight=375&originWidth=941&size=0&status=done&width=941" class="lazyload"></p><p>成功既可以 如果想设置端口可以在yml设置响应的server.port</p><p>如果不太懂配置的小伙伴</p><p><a href="https://spring.io/projects/spring-boot#learn" target="_blank" rel="noopener">点击查看SpringBoot文档</a></p><p><strong>本博文是基于springboot2.x  如果有什么不对的请在下方留言。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 一起来学SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot AOP自定义注解实现日志功能</title>
      <link href="/2019/07/25/yuque/SpringBoot%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/07/25/yuque/SpringBoot%20AOP%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>tags: [SpringBoot,Aop,Spring]<br>categories:  Spring相关</p><hr><p>首先我们为什么需要做日志管理，在现实的上线中我们经常会遇到系统出现异常或者问题。 这个时候就马上打开CRT或者SSH连上服务器拿日子来分析。受网络的各种限制。于是我们就想为什么不能直接在管理后台查看报错的信息呢。于是日志管理就出现了。其次个人觉得做日志管理最好的是Aop，有的人也喜欢用拦截器。都可以，在此我重点介绍我的实现方式。<br />依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先创建一个@interface的注解类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SysLog &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="">@Documented </a> –注解是否将包含在JavaDoc中</p><p><a href="">@Retention </a> –什么时候使用该注解</p><p><a href="">@Target </a> –注解用于什么地方</p><p><a href="">@Inherited </a> – 是否允许子类继承该注解</p><p>1.）@Retention– <strong>定义该注解的生命周期</strong></p><p>●   RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override, @SuppressWarnings都属于这类注解。</span><br></pre></td></tr></table></figure><p>●   RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式</p><p>●   RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</p><p>2.）<a href="">@Target </a> – <strong>表示该注解用于什么地方</strong>。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括</p><p>● ElementType.CONSTRUCTOR:用于描述构造器</p><p>● ElementType.FIELD:成员变量、对象、属性（包括enum实例）</p><p>● ElementType.LOCAL_VARIABLE:用于描述局部变量</p><p>● ElementType.METHOD:用于描述方法</p><p>● ElementType.PACKAGE:用于描述包</p><p>● ElementType.PARAMETER:用于描述参数</p><p>● ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p><p>3.)@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。</p><p>4.)<a href="">@Inherited </a> – <strong>定义该注释和子类的关系</strong></p><pre><code>[@Inherited ]() 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</code></pre><p>然后呢在controller中使用注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SysLog</span>(<span class="string">"我是昴先生"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello word"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SysLog</span>(<span class="string">"我是快乐鱼"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/main"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"wo de"</span>);</span><br><span class="line">map.put(<span class="string">"task"</span>, <span class="number">123</span>);</span><br><span class="line">map.put(<span class="string">"task"</span>, list);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后用下aop反射得到注解中的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// AOP 切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogAspect</span> </span>&#123;</span><br><span class="line"><span class="comment">// 切入点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"@annotation(org.mao.annotation.SysLog)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在方法执行前后</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myLog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Around</span>(value = <span class="string">"pointcut() &amp;&amp; @annotation(sysLog)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point, SysLog sysLog)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"++++执行了around方法++++"</span>);</span><br><span class="line">String requestUrl = sysLog.value();</span><br><span class="line"><span class="comment">// 拦截的类名</span></span><br><span class="line">Class clazz = point.getTarget().getClass();</span><br><span class="line"><span class="comment">// 拦截的方法</span></span><br><span class="line">Signature sig = point.getSignature();</span><br><span class="line">MethodSignature msig = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (!(sig <span class="keyword">instanceof</span> MethodSignature)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"该注解只能用于方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">msig = (MethodSignature) sig;</span><br><span class="line">Object target = point.getTarget();</span><br><span class="line">Method currentMethod;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">currentMethod = target.getClass().getMethod(msig.getName(), msig.getParameterTypes());</span><br><span class="line">System.out.println(<span class="string">"执行了类:"</span> + clazz.getSimpleName());</span><br><span class="line">System.out.println(<span class="string">"方法:"</span> + currentMethod.getName());</span><br><span class="line">System.out.println(<span class="string">"自定义注解:"</span> + requestUrl);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> point.proceed(); <span class="comment">// 执行程序</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">throwable.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> throwable.getMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法执行后</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myLog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"pointcut() &amp;&amp; @annotation(sysLog)"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, SysLog sysLog, Object result)</span> </span>&#123;</span><br><span class="line"><span class="comment">// HttpServletRequest request = ((ServletRequestAttributes)</span></span><br><span class="line"><span class="comment">// RequestContextHolder.getRequestAttributes()).getRequest();</span></span><br><span class="line"><span class="comment">// HttpSession session = request.getSession();</span></span><br><span class="line">System.out.println(<span class="string">"++++执行了afterReturning方法++++"</span>);</span><br><span class="line">System.out.println(<span class="string">"执行结果："</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法执行后 并抛出异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> myLog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"pointcut() &amp;&amp; @annotation(sysLog)"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, SysLog sysLog, Exception ex)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"++++执行了afterThrowing方法++++"</span>);</span><br><span class="line">System.out.println(<span class="string">"请求："</span> + sysLog.value() + <span class="string">" 出现异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 使用redis发布订阅</title>
      <link href="/2019/07/25/yuque/SpringBoot%20%E4%BD%BF%E7%94%A8redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/2019/07/25/yuque/SpringBoot%20%E4%BD%BF%E7%94%A8redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<p>tags: [Spring,SpringBoot,Redis]<br>categories:  Spring相关</p><hr><p>消息是许多软件架构的重要组成部分。消息传递解决方案提供了高性能，可扩展性，队列持久性和耐用性，故障转移支持等，以及许多更漂亮具备的功能，在Java世界中大多总是使用JMS实现。后来使用Apache ActiveMQ的，有时只是需要简单的排队支持，而Apache ActiveMQ显得过于复杂。事实上，Redis 不仅提供一个NoSQL数据库，同时提供了一套消息系统。<br>使用Redis作为pub/sub的队列，将消息存放在Redis内存中。</p><p>话不多说直接上配置</p><p>yml配置</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061855119-c9c71236-339e-478f-88dd-fdcf87471134.png#align=left&display=inline&height=311&originHeight=311&originWidth=627&size=0&status=done&style=none&width=627" class="lazyload"></p><p>编写监听类来接收订阅的消息</p><p>Cat监听</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听发送的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是Cat监听"</span> + message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fish监听</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听发送的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FishListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是Fish监听"</span> + message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis的相关配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.listener.CatListener;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.listener.FishListener;</span><br><span class="line"><span class="keyword">import</span> com.maoxs.pojo.MessageReceiver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"all"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis消息监听器容器</span></span><br><span class="line"><span class="comment">     * 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器</span></span><br><span class="line"><span class="comment">     * 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listenerAdapter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//相当于xml中的bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            MessageListenerAdapter CatAdapter, MessageListenerAdapter FishAdapter)</span> </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//订阅了一个叫chat 的通道</span></span><br><span class="line">        container.addMessageListener(CatAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"cat"</span>));</span><br><span class="line">        container.addMessageListener(FishAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"fish"</span>));</span><br><span class="line">        <span class="comment">//这个container 可以添加多个 messageListener</span></span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息监听器适配器，绑定消息处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">CatAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> CatListener());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息监听器适配器，绑定消息处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">FishAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> FishListener());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis 读取内容的template</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义value的序列化方式</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个定时器模拟发布消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时器功能</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"stringRedisTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">2000</span>) <span class="comment">//间隔2s 通过StringRedisTemplate对象向redis消息队列cat频道发布消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCatMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.convertAndSend(<span class="string">"cat"</span>,<span class="string">"猫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>) <span class="comment">//间隔1s 通过StringRedisTemplate对象向redis消息队列fish频道发布消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFishMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.convertAndSend(<span class="string">"fish"</span>,<span class="string">"鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maoxs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.maoxs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DemoApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就启动看下效果</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061854852-a6c38ddb-31e1-46d0-8b30-4162e5621d9e.png#align=left&display=inline&height=576&originHeight=576&originWidth=1180&size=0&status=done&style=none&width=1180" class="lazyload"></p><p>ok 大功告成!!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring @Autowired Map 和 List</title>
      <link href="/2019/07/25/yuque/Spring%20@Autowired%20Map%20%E5%92%8C%20List/"/>
      <url>/2019/07/25/yuque/Spring%20@Autowired%20Map%20%E5%92%8C%20List/</url>
      
        <content type="html"><![CDATA[<p>tags: [SpringBoot,Spring]<br>categories:  Spring相关</p><hr><p>在开发的时候有时候经常会看到这样代码</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061794307-e9d48e8c-a3e9-4780-9080-fb88b9d399a2.png#align=left&display=inline&height=223&originHeight=223&originWidth=654&size=0&status=done&style=none&width=654" class="lazyload"><br>这是Spring的一个特殊的注入功能</p><p>如图所示</p><p>当注入一个Map的时候 ，value泛型为MaoService，则注入后Spring会将实例化后的bean放入value ，key则为注入后bean的名字</p><p>当注入一个List的时候，List的泛型为MaoService，则注入后Spring会将实例化的bean放入List中</p><p>做个测试</p><p>首先定义一个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MaoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义三个MaoService的实现类 Fish 、Dog、 Cat</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.MaoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">implements</span> <span class="title">MaoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"xuxuxu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.MaoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">MaoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.MaoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>  <span class="keyword">implements</span> <span class="title">MaoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵喵喵"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写一个测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,MaoService&gt; maoServiceMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MaoService&gt; maoServiceList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">sendMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maoServiceMap.get(<span class="string">"cat"</span>).say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">sendList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maoServiceList.get(<span class="number">0</span>).say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用SpringTest</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> com.service.Test maoService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sayMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maoService.sendMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sayList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maoService.sendList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeBug进去看看</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061794640-2b955226-8f36-4232-aa44-6bf62a994767.png#align=left&display=inline&height=466&originHeight=466&originWidth=823&size=0&status=done&style=none&width=823" class="lazyload"></p><p>Map的key为bean的名字 value是bean的实例</p><p>紧接着为List</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061794261-116b3962-2091-49e5-8937-421e19de28fe.png#align=left&display=inline&height=290&originHeight=290&originWidth=640&size=0&status=done&style=none&width=640" class="lazyload"></p><p>Spring吧bean放入了List中  那个这个顺序怎么控制呢</p><p>在实现类中加入<a href="/value">@Order(value) </a> 注解即可 ，值越小越先被初始化越先被放入List</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用好玩的Git命令</title>
      <link href="/2019/07/25/yuque/%E5%B8%B8%E7%94%A8%E5%A5%BD%E7%8E%A9%E7%9A%84Git%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/25/yuque/%E5%B8%B8%E7%94%A8%E5%A5%BD%E7%8E%A9%E7%9A%84Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br />Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br />Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。<br><a name="f14069be"></a></p><h2 id="与SVN的区别"><a href="#与SVN的区别" class="headerlink" title="与SVN的区别"></a>与SVN的区别</h2><ul><li>GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li><li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li><li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li><li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li><li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ul><p><a name="0dfbe902"></a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a name="c5426a1a"></a></p><h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git  init</span><br></pre></td></tr></table></figure><p><a name="1ecc6aed"></a></p><h3 id="添加文件到-暂存区"><a href="#添加文件到-暂存区" class="headerlink" title="添加文件到 暂存区"></a>添加文件到 暂存区</h3><p>add  . 当前目录下的所有文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;文件&gt;</span><br></pre></td></tr></table></figure><p><a name="997d9073"></a></p><h3 id="查看当前Git仓库的状态"><a href="#查看当前Git仓库的状态" class="headerlink" title="查看当前Git仓库的状态"></a>查看当前Git仓库的状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><a name="6ab35d2e"></a></p><h3 id="本地提交"><a href="#本地提交" class="headerlink" title="本地提交"></a>本地提交</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'注释'</span></span><br></pre></td></tr></table></figure><p><a name="0570a127"></a></p><h3 id="查看Git提交的历史"><a href="#查看Git提交的历史" class="headerlink" title="查看Git提交的历史"></a>查看Git提交的历史</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><a name="034a01b0"></a></p><h3 id="回退更改-提交层面-强调-撤销"><a href="#回退更改-提交层面-强调-撤销" class="headerlink" title="回退更改(提交层面 强调 撤销)"></a>回退更改(提交层面 强调 撤销)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset  - -hard  &lt;版本号&gt;</span><br></pre></td></tr></table></figure><p><a name="3d684399"></a></p><h3 id="检出历史版本项目-强调-替换"><a href="#检出历史版本项目-强调-替换" class="headerlink" title="检出历史版本项目(强调 替换)"></a>检出历史版本项目(强调 替换)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout  &lt;版本号&gt;</span><br></pre></td></tr></table></figure><p><a name="adc49bfe"></a></p><h3 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><a name="53518c22"></a></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -f &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><a name="4853b005"></a></p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a <span class="string">'标签号'</span> -m <span class="string">'注释'</span></span><br></pre></td></tr></table></figure><p><a name="16103ed6"></a></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p><a name="63e17c6b"></a></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p><a name="ee3e6cb4"></a></p><h3 id="图形化显示log"><a href="#图形化显示log" class="headerlink" title="图形化显示log"></a>图形化显示log</h3><p>一行显示可以直接  –oneline</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --all –graph</span><br></pre></td></tr></table></figure><p><a name="0e3b59d0"></a></p><h3 id="从远程仓库克隆项目"><a href="#从远程仓库克隆项目" class="headerlink" title="从远程仓库克隆项目"></a>从远程仓库克隆项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 分支 地址 &lt;检出到某某文件夹&gt;</span><br></pre></td></tr></table></figure><p><a name="62d26794"></a></p><h3 id="添加远程仓库地址"><a href="#添加远程仓库地址" class="headerlink" title="添加远程仓库地址"></a>添加远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add 远程名字默认为&lt;origin&gt;  地址</span><br></pre></td></tr></table></figure><p><a name="57c52b6e"></a></p><h3 id="查看远程仓库地址"><a href="#查看远程仓库地址" class="headerlink" title="查看远程仓库地址"></a>查看远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><a name="053c84d5"></a></p><h3 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push  -u 远程名字默认为&lt;origin&gt;  分支</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 提交代码到 gitlab</title>
      <link href="/2019/07/25/yuque/idea%20%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%20gitlab/"/>
      <url>/2019/07/25/yuque/idea%20%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%20gitlab/</url>
      
        <content type="html"><![CDATA[<p>GitLab是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。<br><a name="48ad8bfc"></a></p><h2 id="注册GitLab"><a href="#注册GitLab" class="headerlink" title="注册GitLab"></a>注册GitLab</h2><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613883-efee800e-3f12-475c-8d6d-55eec51b47ca.png#align=left&display=inline&height=680&originHeight=680&originWidth=1405&size=0&status=done&style=none&width=1405" class="lazyload"><br>可以选择第三方登录，这里由hub帐号登录<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613932-c44a72af-347e-48b6-8251-98d8bb03ea97.png#align=left&display=inline&height=581&originHeight=581&originWidth=989&size=0&status=done&style=none&width=989" class="lazyload"><br>个人习惯我们创建一个组<br><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613912-4a4de6d9-a665-4afa-ba49-4e7089198dd8.png#align=left&display=inline&height=478&originHeight=478&originWidth=1395&size=0&status=done&style=none&width=1395" class="lazyload"></p><p>下面我们在组下创建一个项目用于测试</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613818-09e85490-ddce-4712-8334-5e2c3f05b332.png#align=left&display=inline&height=589&originHeight=589&originWidth=1515&size=0&status=done&style=none&width=1515" class="lazyload"></p><p>ok 下面常规操作</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613940-d7957f7b-14b7-4477-be19-597ef59b9132.png#align=left&display=inline&height=526&originHeight=526&originWidth=1345&size=0&status=done&style=none&width=1345" class="lazyload"></p><p><a name="dde4be02"></a></p><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>配置git全局用户名</p><p><code>git config --global user.name &quot;yourname&quot;</code></p><p>配置git全局邮箱</p><p><code>git config --global user.email &quot;xxxxxx@xx.com&quot;</code></p><p>然后是idea</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613844-a9de4f4a-2eac-4ff9-ba39-50bfe6610925.png#align=left&display=inline&height=611&originHeight=611&originWidth=1073&size=0&status=done&style=none&width=1073" class="lazyload"></p><p>然后是github</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613852-4a41a95a-f8db-410f-9e25-a3ec6f6d2670.png#align=left&display=inline&height=591&originHeight=591&originWidth=1289&size=0&status=done&style=none&width=1289" class="lazyload"></p><p><a name="13627c5c"></a></p><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><p><code>ssh-keygen -t rsa -C &quot;xxxxxx@xx.com&quot;</code></p><p>一般会在C盘C:\Users\xxxx.ssh 下生成两个文件</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613855-0b24b5d9-97e5-455d-9bf7-4b39132a9bfa.png#align=left&display=inline&height=119&originHeight=119&originWidth=723&size=0&status=done&style=none&width=723" class="lazyload"></p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613862-609dfe48-cd4b-4ae9-8c97-0a1d9b3453af.png#align=left&display=inline&height=853&originHeight=853&originWidth=1704&size=0&status=done&style=none&width=1704" class="lazyload"></p><p><a name="96c8a2b1"></a></p><h2 id="提交到git库"><a href="#提交到git库" class="headerlink" title="提交到git库"></a>提交到git库</h2><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613833-d9984841-53bb-41f8-83a8-1907803d8b1f.png#align=left&display=inline&height=709&originHeight=709&originWidth=1036&size=0&status=done&style=none&width=1036" class="lazyload"></p><p>然后push 到远程库 如果没有库URL请自行设置</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613927-f4cdf793-559e-4a29-b89f-08d3e973cda3.png#align=left&display=inline&height=540&originHeight=540&originWidth=1337&size=0&status=done&style=none&width=1337" class="lazyload"></p><p>然后这个项目就偷偷的跑到 GitLab中了</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564061613874-f9e2f4c0-6c36-4211-8048-1e5bcd2aadbf.png#align=left&display=inline&height=862&originHeight=862&originWidth=1803&size=0&status=done&style=none&width=1803" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> Git相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 firewalld基本使用</title>
      <link href="/2019/07/25/yuque/Centos7%20firewalld%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/25/yuque/Centos7%20firewalld%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>tags: [Centos7,Firewalld]<br>categories:  环境配置</p><hr><p>由于Centos7 自带的防火墙是firewalld 所以说呢我们在平时开发的时候还是要学习下的。<br><a name="b7b05952"></a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>启动：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure><p><a name="firewalld-cmd"></a></p><h2 id="firewalld-cmd"><a href="#firewalld-cmd" class="headerlink" title="firewalld-cmd"></a>firewalld-cmd</h2><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --version</span><br></pre></td></tr></table></figure><p>查看帮助：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>显示状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p>查看所有打开的端口：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd--zone=public --list-ports</span><br></pre></td></tr></table></figure><p>更新防火墙规则：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>查看区域信息:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd--get-active-zones</span><br></pre></td></tr></table></figure><p>查看指定接口所属区域：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd--get-zone-of-interface=eth0</span><br></pre></td></tr></table></figure><p>拒绝所有包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --panic-on</span><br></pre></td></tr></table></figure><p>取消拒绝状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --panic-off</span><br></pre></td></tr></table></figure><p>查看是否拒绝：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-panic</span><br></pre></td></tr></table></figure><p><a name="0fddea58"></a></p><h2 id="怎么开启一个端口"><a href="#怎么开启一个端口" class="headerlink" title="怎么开启一个端口"></a>怎么开启一个端口</h2><p>添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent   （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure><p>重新载入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>查看firewall是否运行,下面两个命令都可以</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p>查看当前开了哪些端口</p><p>其实一个服务对应一个端口，每个服务对应<code>/usr/lib/firewalld/services</code>下面一个xml文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-services</span><br></pre></td></tr></table></figure><p>查看还有哪些服务可以打开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --get-services</span><br></pre></td></tr></table></figure><p>查看所有打开的端口：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>更新防火墙规则：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装mysql8</title>
      <link href="/2019/07/25/yuque/Docker%20%E5%AE%89%E8%A3%85mysql8/"/>
      <url>/2019/07/25/yuque/Docker%20%E5%AE%89%E8%A3%85mysql8/</url>
      
        <content type="html"><![CDATA[<p>tags: [Docker]<br>categories:  环境配置</p><hr><hr><p>MySQL™软件提供了一个非常快速，多线程，多用户，强大的SQL（结构化查询语言）数据库服务器<br />pull一个mysql镜像下来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>先运行这个镜像copy出配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d docker.io/mysql</span><br></pre></td></tr></table></figure><p>移动出mysql data</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp mysql:/var/lib/mysql/ ~/</span><br></pre></td></tr></table></figure><p>复制到 /mysql/mysql_data/ 文件下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv ~/mysql /mysql/mysql_data/</span><br></pre></td></tr></table></figure><p>同样的道理copy出 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp mysql:/etc/mysql/my.cnf /mysql/mysql_conf/my.cnf</span><br></pre></td></tr></table></figure><p>停止容器 删除容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f mysql</span><br></pre></td></tr></table></figure><p><strong>映射启动 mysql镜像 –privileged=true 是对容器赋予权限</strong></p><p><strong>-v是将容器内部的文件映射到外部</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql --privileged=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">-v /mysql/mysql_conf/my.cnf:/etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">-v /mysql/mysql_data:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456</span><br><span class="line"></span><br><span class="line">-p 3306:3306 -d docker.io/mysql</span><br></pre></td></tr></table></figure><p>启动完毕后 没有设置密码加密方式和远程连接所有外部不能连接 进入镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it CONTAINER_ID /bin/bash</span><br></pre></td></tr></table></figure><p>进入mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p123456</span><br></pre></td></tr></table></figure><p>如果无法远程连接的话复制下面的话即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter user <span class="string">'root'</span>@<span class="string">'%'</span> identified with mysql_native_password by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装docker</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85docker/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口<br />选择yum安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-io</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull <span class="built_in">test</span>/webapp</span><br></pre></td></tr></table></figure><p>运行镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 <span class="built_in">test</span>/webapp</span><br></pre></td></tr></table></figure><p><strong>-d:让容器在后台运行。</strong><br /><strong>-p:将容器内部使用的网络端口映射到我们使用的主机上。</strong><br />查看运行中的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看运行中镜像的端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker port containerId</span><br></pre></td></tr></table></figure><p>更改容器的名字</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rename old_name new_name</span><br></pre></td></tr></table></figure><p>启动停止容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start/stop name</span><br></pre></td></tr></table></figure><p>进入一个容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach d48b21a7e439</span><br></pre></td></tr></table></figure><p>进入正在运行容器并以命令行交互</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it e9410ee182bd /bin/sh</span><br></pre></td></tr></table></figure><p>配置镜像加速</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>在配置中加入</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装redis</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85redis/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<p>配置redis 安装的环境</p><p><a name="d6f4c679"></a></p><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><p>由于<a href="http://www.linuxidc.com/topicnews.aspx?tid=14" target="_blank" rel="noopener">CentOS</a>官方yum源里面没有Redis,这里我们需要安装一个第三方的yum源,这里用了<a href="http://www.linuxidc.com/topicnews.aspx?tid=5" target="_blank" rel="noopener">Fedora</a>的epel仓库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure><p>基本操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start redis</span><br><span class="line">systemctl stop redis</span><br><span class="line">systemctl restart redis</span><br><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure><p>配置文件在</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/redis.conf</span><br></pre></td></tr></table></figure><p><a name="993e6568"></a></p><h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></table></figure><p>上传redis安装包</p><p>redis-4.0.8.tar</p><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-4.0.8.tar</span><br></pre></td></tr></table></figure><p>进入解压后redis目录解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>然后安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></table></figure><p>PREFIX 是制定安装位置</p><p>然后在/usr/local下会有 Cli 是客户端   server 是服务端</p><p>设置后端启动 打开根目录下解压后的redis-4.0.8文件</p><p>把redis.conf 拷贝到 redis安装目录的bin下 然后编辑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deamonize yes</span><br></pre></td></tr></table></figure><p><a name="f4ec74c1"></a></p><h3 id="设置systemctl"><a href="#设置systemctl" class="headerlink" title="设置systemctl"></a>设置systemctl</h3><p>首先</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>加入如下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf </span><br><span class="line">ExecStop=/usr/local/redis/bin/redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 754 /usr/lib/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>然后就可以玩了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start redis.service</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>设置密码 为了安全一定要设，而且这里如果不绑定ip也不设密码的话，redis是默认保护模式，只能本虚拟机访问，不允许其他ip访问，本人刚开始图方便啥都不设，结果在这里踩坑了；</p><p>编辑 redis.conf</p><p>注释 bind</p><p>设置密码 requirepass</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli   -h  192.168.80.102  -p 6379</span><br></pre></td></tr></table></figure><p>连接到客户端</p><p>输入config get requirepass</p><p>下方出现(error) NOAUTH Authentication required.</p><p>输入auth “输入的密码”</p><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装jdk</title>
      <link href="/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85jdk/"/>
      <url>/2019/07/25/yuque/Centos7%20%E5%AE%89%E8%A3%85jdk/</url>
      
        <content type="html"><![CDATA[<p>在虚拟机中配置jdk的环境以及安装.<br />在 /usr/local创建一个 java目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir java</span><br></pre></td></tr></table></figure><p>将上传的jdk复制到 java目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /root/jdk.xxxxx.tar /usr/<span class="built_in">local</span>/java</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf jdk.xxx.tar</span><br></pre></td></tr></table></figure><p>安装依赖（有的话忽略就行）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install glibc.i686</span><br></pre></td></tr></table></figure><p>配置环境编辑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在文件最后添加一下信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line"><span class="comment">#设置自己的java路径</span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.*.*_**</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib.tools.jar</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure><p>保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>使更改的配置立即生效</p><p>检测</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Java –version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> Jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 设置静态ip</title>
      <link href="/2019/07/25/yuque/Centos7%20%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
      <url>/2019/07/25/yuque/Centos7%20%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</url>
      
        <content type="html"><![CDATA[<p>有时候为了使用虚拟机更方便，所有我们通常要设置静态ip，这篇文章就是介绍怎么取设置静态IP的<br />进入<code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code>中:</p><p>修改</p><p>这里讲dhcp换成static</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=static</span><br></pre></td></tr></table></figure><p>将no换成yes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><p>想上网设置为NAT网段新增 ** 这里代表是你在NAT模式中设置的网段</p><p>静态IP</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.**.100</span><br></pre></td></tr></table></figure><p>默认网关</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GATEWAY=192.168.**.2</span><br></pre></td></tr></table></figure><p>子网掩码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure><p>设置DNS 任意选择</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></table></figure><p>保存退出后,重启网络服务:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>出现这玩意的时候说明已经ok了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Restarting network (via systemctl):                        [  确定  ]</span><br></pre></td></tr></table></figure><p>如果发生ip改变但是设置的静态ip还可以ping通</p><p>添加属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NM_CONTROLLED=no</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
            <tag> 静态IP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
