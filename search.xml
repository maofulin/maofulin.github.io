<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈极限编程</title>
      <link href="/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a name="DWPcp"></a></p><h2 id="为什么出现极限编程-？"><a href="#为什么出现极限编程-？" class="headerlink" title="为什么出现极限编程 ？"></a>为什么出现极限编程 ？</h2><p>敏捷方法论有一个共同的特点，<strong>那就是都将矛头指向了“文档”</strong>，它们认为传统的软件工程方法文档量太“重”了，称为“重量级”方法，而相应的敏捷方法则是“轻量级”方法。正是因为“轻量级”感觉没有什么力量，不但不能够有效体现灵活性，反而显得是不解决问题的方法论似的。因此，就有了一次划时代的会议，创建了敏捷联盟。</p><p>在敏捷方法论领域中，比较知名的、有影响力的，是拥有与 Microsoft 的操作系统相同缩写语——XP的极限编程（eXtreme Programming）。极限编程方法论可以说是敏捷联盟中最鲜艳的一面旗帜，也是被研究、尝试、应用、赞扬、批判最多的一种方法论，也是相对来说最成熟的一种。</p><p>这一被誉为“黑客文化”的方法论的雏形最初形成于1996—1999年间，Kent Beck、Ward Cunninggham、Ron Jeffrey 在开发 C3 项目（Chrysler Comprehensive Compensation）的实践中总结出了 XP 的基本元素。在此之后，Kent Beck 和他的一些好朋友们一起在实践中完善提高，终于形成了极限编程方法论。</p><p><a name="42e97bb5"></a></p><h2 id="什么是解析极限编程"><a href="#什么是解析极限编程" class="headerlink" title="什么是解析极限编程 ?"></a>什么是解析极限编程 ?</h2><p>那么什么是 极限编程呢？ <strong>这里我们把极限编程简称为 XP</strong></p><p><strong>XP 是一种轻量（敏捷）、高效、低风险、柔性、可预测、科学而且充满乐趣的软件开发方式</strong>。与其他方法论相比，其最大的不同在于：</p><ul><li>在更短的周期内，更早地提供具体、持续的反馈信息。</li><li>在迭代的进行计划编制，首先在最开始迅速生成一个总体计划，然后在整个项目开发过程中不断的发展它。</li><li>依赖于自动测试程序来监控开发进度，并及早地捕获缺陷。</li><li>依赖于口头交流、测试和源程序进行沟通。</li><li>倡导持续的演化式设计。</li><li>依赖于开发团队内部的紧密协作。</li><li>尽可能达到程序员短期利益和项目长期利益的平衡。</li></ul><p>Kent Beck 曾经说过“开车”就是一个 XP 的范例，即使看上去进行得很顺利，也不要把视线从公路上移开，因为路况的变化，将使得你必须随时做出一些这样那样的调整。而在软件项目中，客户就是司机，他们也没有办法确切地知道软件应该做什么，因此程序员就需要向客户提供方向盘，并且告知我们现在的位置。</p><p>XP 包括写什么呢？如图，<code>XP 由价值观、原则、实践和行为四个部分组成，它们彼此相互依赖、关联， 并通过行为贯穿于整个生命期。</code></p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063718991-29167fcf-916c-42d8-8bc5-88af4b8e4953.png#align=left&display=inline&height=282&originHeight=282&originWidth=185&size=0&status=done&width=185" class="lazyload"></p><p><a name="055f2aff"></a></p><h2 id="四大价值观"><a href="#四大价值观" class="headerlink" title="四大价值观"></a>四大价值观</h2><p>XP 的核心是其总结的</p><p><strong>沟通（Communication）</strong></p><p><strong>简单（Simplicity）</strong></p><p><strong>反馈（Feedback）</strong></p><p><strong>勇气（Courage）</strong></p><p>四大价值观，它们是XP的基础，也是XP的灵魂。</p><p>此外还扩展了第五个价值观：谦逊（Modesty）。 XP用“沟通、简单、反馈、勇气和谦逊”来减轻开发压力和包袱；XP 精神可以启发我们如何学习和对待快速变化、多样的开发技术。成功学习 XP 的关键，是用“沟通、简单、反馈、勇气和谦逊”的态度来对待 XP；轻松愉快地来感受 XP 的实践思想；自己认真实践后，通过对真实反馈的分析，来决定 XP 对自己的价值；有勇气接受它，或改进它。</p><p><code>PS 吐槽：对吧，我老实程序员。拿这几个价值观去恋爱去了，但是现在还是单身0.0</code></p><p><a name="a5346f0e"></a></p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>通常程序员给人留下的印象就是“内向、不善言谈”，然后项目中的许多问题就出在这些<strong>缺乏沟通</strong>的开发人员身上。<strong>经常由于某个程序员做出了一个设计决定，但是却不能及时地通知大家</strong>，结果使得大家在协作与配合上出现了很多的麻烦，而在传统的方法论中，并不在意这种口头沟通不畅的问题，而是希望借助于完善的流程和面面俱到的文档、报表、计划来替代，但是这同时又引入了效率不高的新问题。</p><p>XP 方法论认为，<strong>如果小组成员之间无法做到持续的、无间断的交流，那么协作就无从谈起</strong>，从这个角度能够发现，通过文档、报表等人工制品进行交流面临巨大的局限性。因此，XP 组合了诸如对编程这样的最佳实践，<strong>鼓励大家进行口头交流，通过交流解决问题，提高效率</strong>。</p><p><code>PS 吐槽： 闷头苦干？不见得你带来的效益更高</code></p><p><a name="d517acb6"></a></p><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p>XP 方法论提倡在工作中秉承“够用就好”的思路，也就是<strong>尽量地简单化，只要今天够用就行，不考虑明天会发现的新问题</strong>。这一点看上去十分容易，但是要真正做到保持简单的工作其实很难的。因为在传统的开发方法中，都要求大家对未来做一些预先规划，以便对今后可能发生的变化预留一些扩展的空间。</p><p>正如对传统开发方法的认识一样，许多开发人员也会质疑 XP，保持系统的扩展性很重要，如果都保持简单，那么如何使得系统能够有良好的扩展性呢？其实不然，保持简单的理由有两个：</p><ul><li><strong>开发小组在开发时所做的规划，并无法保证其符合客户需要的，因此做的大部分工作都将落空，使得开发过程中重复的、没有必要的工作增加，导致整体效率降低</strong>。</li><li>在 XP 中<strong>提倡时刻对代码进行重构，一直保持其良好的结构与可扩展性</strong>。也就是说，可扩展性和为明天设计并不是同一个概念，XP 是反对为明天考虑而工作，并不是说代码要失去扩展性</li></ul><p>而且简单和沟通之间还有一种相对微妙的相互支持关系。当一个团队之间，沟通的越多，那么就越容易明白哪些工作需要做，哪些工作不需要做。另一方面，<strong>系统越简单，需要沟通的内容也就越少，沟通也将更加全面</strong>。</p><p><code>PS 吐槽： 唉~~~~~</code></p><p><a name="1d50fa5b"></a></p><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>是什么原因使得我们的客户、管理层这么不理解开发团队？为什么客户、管理层总是喜欢给我们一个死亡之旅？究其症结，就是开发的过程中缺乏必要的反馈。在许许多多项目中，<strong>当开发团队经历过了需求分析阶段之后，在相当长的一段时间内，是没有任何反馈信息的</strong>。整个<strong>开发过程对于客户和管理层而言就像一个黑盒子</strong>，进度完全是不可见的。</p><p>而且在项目的过程中，这样的现象不仅出现在开发团队与客户、管理层之间，还包括在开发团队内部。这一切问题都需要我们更加注重反馈。，反馈对于任何软件项目的成功都是至关重要的，而在 XP 方法论中则更进一步，通过持续、明确的反馈来暴露软件状态的问题。具体而言就是：</p><ul><li>在开发团队内部，<strong>通过提前编写单元测试代码，时时反馈代码的问题与进展</strong>。</li><li>在开发过程中，还应该加强集成工作，做到持续集成，使得每一次增量都是一个可执行的工作版本，也就是逐渐是软件长大，整个过程中，应该通过向客户和管理层演示这些可运行的版本，以便及早地反馈，及早地发现问题。</li></ul><p>同时，我们也会发现反馈与沟通也有着良好的配合，及时和良好的反馈有助于沟通。而简单的系统更有利于测试和反馈。</p><p><code>PS 吐槽：不得不说啊 测试也是很重要的一环</code></p><p><a name="781301cb"></a></p><h3 id="勇气"><a href="#勇气" class="headerlink" title="勇气"></a>勇气</h3><p>在应用 XP 方法论时，我们每时每刻都在应对变化：由于沟通良好，因此会有更多需求变更的机会；由于时刻保持系统的简单，因此新的变化会带来一些重新开发的需要；由于反馈及时，因此会有更多中间打断你的思路的新需求。</p><p>总之这一切，使得你立刻处于变化之中，因此这时就<strong>需要你有勇气来面对快速开发，面对可能的重新开发</strong>。也许你会觉得，为什么要让我们的开发变得如此零乱，但是其实这些变化若你不让它早暴露，那么它就会迟一些出现，并不会因此消亡，因此，XP 方法论让它们早出现、早解决，是实现“小步快走”开发节奏的好办法。</p><p>也就是 XP 方法论要求开发人员穿上强大、自动测试的盔甲，<strong>勇往直前，在重构、编码规范的支持下，有目的地快速开发</strong>。</p><p><strong>勇气可以来源于沟通</strong>，因为它使得高风险、高回报的试验成为可能；勇气可以来源于简单，因为面对简单的系统，更容易鼓起勇气；勇气可以来源于反馈，因为你可以及时获得每一步前进的状态（自动测试），会使得你更勇于重构代码。</p><p><code>PS 吐槽：拒绝做羞涩的程序员</code></p><p><a name="c9952e5f"></a></p><h3 id="四大价值观之外"><a href="#四大价值观之外" class="headerlink" title="四大价值观之外"></a>四大价值观之外</h3><p>在这四大价值观之下，隐藏着一个更深刻的东西，那就是尊重。因为这一切都建立在团队<strong>成员之间的相互关心、相互理解的基础之上</strong>。</p><p><a name="ebb94c7f"></a></p><h2 id="五个原则"><a href="#五个原则" class="headerlink" title="五个原则"></a>五个原则</h2><p><a name="79342d30"></a></p><h3 id="快速反馈"><a href="#快速反馈" class="headerlink" title="快速反馈"></a>快速反馈</h3><p>及时地、快速地获取反馈，并将所学到的知识尽快地投入到系统中去。也就是指开发人员应该通过较短的反馈循环迅速地了解现在的产品是否满足了客户的需求。这也是对反馈这一价值观的进一步补充。</p><p><a name="c5054ca1"></a></p><h3 id="简单性假设"><a href="#简单性假设" class="headerlink" title="简单性假设"></a>简单性假设</h3><p>类似地，简单性假设原则是对简单这一价值观的进一步补充。这一原则要求开发人员将每个问题都看得十分容易解决，也就是说只为本次迭代考虑，不去想未来可能需要什么，相信具有将来必要时增加系统复杂性的能力，也就是号召大家出色地完成今天的任务。</p><p><a name="8db13d5a"></a></p><h3 id="逐步修改"><a href="#逐步修改" class="headerlink" title="逐步修改"></a>逐步修改</h3><p>就像开车打方向盘一样，不要一次做出很大的改变，那样将会使得可控性变差，更适合的方法是进行微调。而在软件开发中，这样的道理同样适用，任何问题都应该通过一系列能够带来差异的微小改动来解决。</p><p><a name="f7caca65"></a></p><h3 id="提倡更改"><a href="#提倡更改" class="headerlink" title="提倡更改"></a>提倡更改</h3><p>在软件开发过程中，最好的办法是在解决最重要问题时，保留最多选项的那个。也就是说，尽量为下一次修改做好准备。</p><p><a name="c47c41cd"></a></p><h3 id="优质工作"><a href="#优质工作" class="headerlink" title="优质工作"></a>优质工作</h3><p>在实践中，<strong>经常看到许多开发人员喜欢将一些细小的问题留待后面解决</strong>。例如，界面的按钮有一些不平整，由于不影响使用就先不管；某一两个成员函数暂时没用就不先写等。这就是一种工作拖泥带水的现象，这样的坏习惯一旦养成，必然使得代码质量大打折扣。</p><p>而在 XP 方法论中，贯彻的是“小步快走”的开发原则，因此工作质量决不可打折扣，通常采用测试先行的编码方式来提供支持</p><p><code>PS 吐槽：细节！！！0.0</code></p><p><a name="3d09d655"></a></p><h2 id="十三个最佳实践"><a href="#十三个最佳实践" class="headerlink" title="十三个最佳实践"></a>十三个最佳实践</h2><p>在 XP 中，集成了 13 个最佳实践，有趣的是，它们没有一个是创新的概念，大多数概念和编程一样老。其主要创新点在于提供一种良好的思路，将这些最佳实践结合在一起，并且确保尽可能彻底地执行它们，使得它们能够在最大程度上相互支持，紧接下来，我们就对每一种最佳实践进行一番了解。</p><p><a name="89f33a4f"></a></p><h3 id="计划游戏"><a href="#计划游戏" class="headerlink" title="计划游戏"></a>计划游戏</h3><p>计划游戏的主要思想就是先快速地制定一份概要的计划，<strong>然后随着项目细节的不断清晰，再逐步完善这份计划</strong>。计划游戏产生的结果是一套用户故事及后续的一两次迭代的概要计划。</p><p>“客户负责业务决策，开发团队负责技术决策”是计划游戏获得成功的前提条件。也就是说，系统的范围、下一次迭代的发布时间、用户故事的优先级应该由客户决定；而每个用户故事所需的开发时间、不同技术的成本、如何组建团队、每个用户故事的风险，以及具体的开发顺序应该由开发团队决定。</p><p>好了，明白这些就可以进行计划游戏了。首先客户和开发人员坐在同一间屋子里，每个人都准备一支笔、一些用于记录用户故事的纸片，最好再准备一个白板，就可以开始了。</p><ul><li>客户编写故事：<strong>由客户谈论系统应该完成什么功能</strong>，然后用通俗的自然语言，使用自己的语汇，将其写在卡片上，这也就是用户故事。</li><li>开发人员进行估算：<strong>首先客户按优先级将用户故事分成必须要有、希望有、如果有更好三类</strong>，然后开发人员对每个用户故事进行估算，先从高优先级开始估算。如果在估算的时候，感到有一些故事太大，不容易进行估算，或者是估算的结果超过 2人/周，那么就应该对其进行分解，拆成 2 个或者多个小故事。</li><li>确定迭代的周期：接下来就是<strong>确定本次迭代的时间周期</strong>，这可以根据实际的情况进行确定，不过最佳的迭代周期是 2~3 周。有了迭代的时间之后，再结合参与的开发人数，算出可以完成的工作量总数。然后根据估算的结果，与客户协商，挑出时间上够、优先级合适的用户故事组合，形成计划。</li></ul><p><code>PS 吐槽：客户期望与 客户的期望--。--</code></p><p><a name="379eb4a3"></a></p><h3 id="小型发布"><a href="#小型发布" class="headerlink" title="小型发布"></a>小型发布</h3><p>XP 方法论秉承的是“持续集成，小步快走”的哲学，也就是说每一次发布的版本应该尽可能的小，当然前提条件是每个版本有足够的商业价值，值得发布。</p><p>由于小型发布可以使得集成更频繁，<strong>客户获得的中间结果也越频繁，反馈也就越频繁</strong>，客户就能够实时地了解项目的进展情况，从而提出更多的意见，以便在下一次迭代中计划进去。以实现更高的客户满意度。</p><p><code>PS 吐槽：走持续集成吧，不然产品真的拼不过向上的互联网公司</code></p><p><a name="f95b04b2"></a></p><h3 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h3><p>相对而言，隐喻这一个最佳实践是最令人费解的。什么是隐喻呢？根据词典中的解释是：“一种语言的表达手段，它用来暗示字面意义不相似的事物之间的相似之处”。那么这在软件开发中又有什么用呢？总结而言，常常用于四个方面。</p><ul><li><strong>寻求共识</strong>：也就是鼓励开发人员在寻求问题共识时，可以借用一些沟通双方都比较熟悉的事物来做类比，从而帮助大家更好地理解解决方案的关键结构，也就是更好地理解系统是什么、能做什么。</li><li><strong>发明共享词汇</strong>：通过隐喻，有助于提出一个用来表示对象、对象间的关系通用名称。例如，策略模式（用来表示可以实现多种不同策略的设计模式）、工厂模式（用来表示可以按需“生产”出所需类得设计模式）等。</li><li><strong>创新的武器</strong>：有的时候，可以借助其他东西来找到解决问题的新途径。例如：“我们可以将工作流看做一个生产线”。</li><li><strong>描述体系结构</strong>：体系结构是比较抽象的，引入隐喻能够大大减轻理解的复杂度。例如管道体系结构就是指两个构件之间通过一条传递消息的“管道”进行通信。</li></ul><p>当然，如果能够找到合适的隐喻是十分快乐的，但并不是每种情况都可以找到恰当的隐喻，你也<strong>没有必要强求</strong></p><p><a name="36ea26f4"></a></p><h3 id="简单设计"><a href="#简单设计" class="headerlink" title="简单设计"></a>简单设计</h3><p>强调简单设计的价值观，引出了简单性假设原则，落到实处就是“简单设计”实践。这个实践看上去似乎很容易理解，但却又经常被误解，许多批评者就指责 XP 忽略设计是不正确的。其实，XP 的简单设计实践并不是要忽略设计，而且认为设计不应该在编码之前一次性完成，因为那样只能建立在“情况不会发生变化”或者“我们可以预见所有的变化”之类的谎言的基础上的。</p><p>Kent Beck 概念中简单设计是这样的：</p><ul><li>能够通过所有的测试程序。</li><li>没有包括任何重复的代码。</li><li>清楚地表现了程序员赋予的所有意图。</li><li>包括尽可能少的类和方法</li><li>他认为要想保持设计简单的系统，需要具备简单思考的能力，拥有理解代码和修改的勇气，以及为了消除代码的“坏味道”而定期重构的习惯。</li><li>那么如何开始进行简单的设计呢？XP 实践者们也总结也一些具体的、可操作的思考方法。</li><li>首先写测试代码：具体将在后面详细描述。</li><li>保持每个类只负责一件事：SRP（单一职责原则）是面向对象设计的基础原则之一。</li><li>使用 Demeter（迪米特）法则：迪米特法则，也称为 LoD 法则、最少知识原则。也就是指一个对象应当对其他对象尽可能少地了解。用隐喻的方法来解释的话就是“只与你直接的朋友通信”、“不要和陌生人说话”。</li><li>使用 CRC 卡片进行探索。</li></ul><p><a name="91132b1b"></a></p><h3 id="测试先行／测试驱动开发"><a href="#测试先行／测试驱动开发" class="headerlink" title="测试先行／测试驱动开发"></a>测试先行／测试驱动开发</h3><p>当我第一次看到“测试先行”这个概念的时候，我的第一感觉就是不解，陷入了“程序都还没有写出来，测试什么呀？”的迷思。我开始天马行空地寻求相关的隐喻，终于找到了能够启发我的工匠，首先，我们来看看两个不同的工匠是如何工作的吧。</p><ul><li>工匠一：先拉上一根水平线，砌每一块砖时，都与这跟水平线进行比较，使得每一块砖都保持水平。</li><li>工匠二：先将一排砖都砌完，然后再拉上一根水平线，看看哪些砖有问题，对有问题的砖进行适当的调整。</li></ul><p>你会选择哪种工作方法呢？你一定会骂工匠二笨吧！这样多浪费时间呀！然而你自己想想，你平时在编写程序的时候又是怎么做的呢？我们就是按工匠二的方法在工作呀！甚至有时候比工匠二还笨，是整面墙都砌完了，直接进行“集成测试”，经常让整面的墙倒塌。看到这里，你还会觉得自己的方法高明吗？这个连工匠都明白的道理，自己却画地为牢呀。</p><p>不仅我们没有采用工匠一的工作方法，甚至有的时候程序员会以“开发工作太紧张”为理由，而忽略测试工作。但这样却导致了一个恶性循环，越是没有空编写测试程序，代码的效率与质量越差，花在找 Bug、解决 Bug 的时间也越来越多，实际产能大打降低。由于产能降低了，因此时间更紧张，压力更大。你想想，为什么不拉上一根水平线呢？难道，我们不能够将后面浪费的时间花在单元测试上，使得我们的程序一开始就更健壮，更加易于修改吗？不过，<strong>编写测试程序当然要比拉一条水平线难道多</strong>，所以我们需要引入“自动化测试工具”，免费的 xUnit 测试框架就是你最佳的选择。</p><p>为了鼓励程序员原意甚至喜欢在编写程序之前编写测试代码，XP 方法论还提供了许多有说服力的理由。</p><ul><li>如果你已经保持了简单的设计，那么编写测试代码根本不难。</li><li>如果你在结对编程，那么如果你想出一个好的测试代码，那么你的伙伴一定行。</li><li>当所有的测试都通过的时候，你再也不会担心所写的代码今后会“暗箭伤人”，那种感觉是相当棒的。</li><li>当你的客户看到所有的测试都通过的时候，会对程序充满前所未有的信心。</li><li>当你需要进行重构时，测试代码会给你带来更大的勇气，因为你要测试是否重构成功只需要一个按钮。</li></ul><p>测试先行是 XP 方法论中一个十分重要的最佳实践，并且其中所蕴含的知识与方法也十分丰富。</p><p><code>PS 吐槽：是啊测试也要强，你会发现一个好的互联网公司，不仅开发强，是什么都强！！要想改变产品的质量，人员的变革是必不可少的</code></p><p><a name="f1787db4"></a></p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>重构时一种对代码进行改进而不影响功能实现的技术，XP 需要开发人员在闻到代码的坏味道时，有重构代码的勇气。重构的目的是降低变化引发的风险，使得代码优化更加容易。通常重构发生在两种情况之下。</p><ul><li>实现某个特性之前：尝试改变现有的代码结构，以使得实现新的特性更加容易。</li><li>实现某个特性之后：检查刚刚写完的代码后，认真检查一下，看是否能够进行简化。</li></ul><p>在《重构》一书中，作者 Martin Fowler 提示我们：在考虑重构时，应该要养成编写并经常运行测试代码的习惯；要先编写代码，再进行重构；把每一次增加功能都当做一次重构的好时机；将每一个纠正错误当做一次重构的重要时机。同时，该书中也列出大量需要重构的情况和重构方法。</p><p>最后类似地，给还没有足够勇气进行重构的程序员打几剂强心针：</p><ul><li>XP 提倡集体代码所有制，因此你可以大胆地在任何需要修改的地方做改动。</li><li>由于在 XP 项目组中有完整的编码标准，因此在重构前无须重新定义格式。</li><li>在重构中遇到困难，和你结对编程的伙伴能够为你提供有效的帮助。</li><li>简单的设计，会给重构带来很大的帮助。</li><li>测试先行让你拥有了一个有效的检验器，随时运行一下就知道你重构的工作是否带来了影响。</li><li>由于 XP 在持续集成，因此你重构所带来的破坏很快就能够暴露，并且得以解决。</li></ul><p><strong>重构技术是对简单性设计的一个良好的补充</strong>，也是 XP 中重视“优质工作”的体现，这也是<strong>优秀的程序员必备的一项技能</strong>。</p><p><code>PS 吐槽：拿的工资多的</code></p><p><a name="bba011bf"></a></p><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>“什么！两个人坐在一起写程序？那岂不是对人力的巨大浪费吗？而且我在工作时可不喜欢有一个人坐在边上当检察官。”是的，正如这里列举出来的问题一样，结对编程技术还是被很多人质疑的。</p><p>不过，自从 20 世纪 60 年代，就有类似的实践在进行，长期以来的研究结果却给出了另外一番景象，那就是结对编程的效率反而比单独编程更高。<strong>一开始虽然会牺牲一些速度，但慢慢的，开发速度会逐渐加快，究其原因，主要是结对编程大打降低了沟通的成本，提供了工作的质量</strong>，具体表现在：</p><ul><li>所有的设计决策确保不是由一个人做出的。</li><li>系统的任何一个部分都肯定至少有 2 个人以上熟悉。</li><li>几乎不可能有 2 个人都忽略的测试项或者其他任务</li><li>结对组合的动态性，是一个企业知识管理的好途径。</li><li>代码总是能够保证被评审过。</li><li>而且 XP 方法论集成的其他最佳实践也能够使得结对编程更加容易进行：</li><li>编码标准可以消除一些无谓的分歧。</li><li>隐喻可以帮助结对伙伴更好地沟通。</li><li>简单设计可以使得结对伙伴更了解他们所从事的工作。</li></ul><p>结对编程技术被誉为 XP 保持工作质量、强调人文主义的一个典型的实践，应用得当还能够使得开发团队之前的协作更加流畅、知识交流与共享更加频繁，团队的稳定性也会更加稳固。</p><p><code>PS 吐槽：其实吧，在中国不太好有这样的环境，大多数老板是以先赚钱后产品为生，不是以产品为上后打销路的。。。</code></p><p><a name="0c9c1477"></a></p><h3 id="集体代码所有制"><a href="#集体代码所有制" class="headerlink" title="集体代码所有制"></a>集体代码所有制</h3><p>由于 XP 方法论鼓励团队进行结对编程，而且认为结对编程的组合应该动态地搭配，根据任务的不同、专业技能的不同进行最优组合。由于每个人都肯定会遇到不同的代码，<strong>所以代码的所有制就不再适合于私有，因为那样会给修改工作带来巨大的不便</strong>。</p><p>也就是说，团队中的每个成员都拥有对代码进行改进的权利，每个人都拥有全部代码，也都需要对全部代码负责。同时，XP 强调代码是谁破坏的（也就是修改后发生问题），就应该由谁来修复。</p><p>由于在 XP 中，有一些与之匹配的最佳实践，因此你并无须担心采用集体代码所有制会让你的代码变得越来越乱：</p><ul><li>由于在 XP 项目中，集成工作是一件经常性得工作，因此当有人修改代码而带来了集成的问题，会在很快的时间内被发现。</li><li>由于每一个类都会有一个测试代码，因此不论谁修改了代码，都需要运行这个测试代码，这样偶然性的破坏发生的概率将很小。</li><li>由于每一个代码的修改就是通过了结对的两个程序员共同思考，因此通常做出的修改都是对系统有益的。</li><li>由于大家都坚持了相同的编码标准，因此代码的可读性、可修改性都会比较好，而且还能够避免由于命名法、缩进等小问题引发经常性得代码修改。</li></ul><p>集成代码所有制是 XP 与其他敏捷方法的一个较大不同，也是从另一个侧面体现了 XP 中蕴含的很深厚的编码情节。</p><p><code>PS 吐槽：其实吧，在中国敢把代码给你，疯了吧？？？？</code></p><p><a name="ba50ec6f"></a></p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>在前面谈到小型发布、重构、结对编程、集体代码所有制等最佳实践的时候，我们多次看到“持续集成”的身影，可以说持续集成是对这些最佳实践的基本支撑条件。</p><p>可能大家会对持续集成与小型发布代表的意思混淆不清，其实小型发布是指在开发周期经常发布中间版本，而持续集成的含义则是要求 XP 团队每天尽可能多次地做代码集成，每次都在确保系统运行的单元测试通过之后进行。</p><p>这样，就可以及早地暴露、消除由于重构、集体代码所有制所引入的错误，从而减少解决问题的痛苦</p><p>要在开发过程中做到持续集成并不容易，首先需要养成这个习惯。而且集成工作往往是十分枯燥、烦琐的，因此适当地引入每日集成工具是十分必要的。XP 建议大家首先使用配置管理服务器将代码管理起来，然后使用 Ant 或 Nant 等 XP 工具，编写集成脚本，调用 xUint 等测试框架，这样就可以实现每当程序员将代码 Check in 到配置服务器上时，Ant 就会自动完成编译和集成，并调用测试代码完成相应的测试工作。</p><p><a name="e5594f39"></a></p><h3 id="每周工作-40-小时／可持续的速度"><a href="#每周工作-40-小时／可持续的速度" class="headerlink" title="每周工作 40 小时／可持续的速度"></a>每周工作 40 小时／可持续的速度</h3><p>这是最让开发人员开心的、管理者反对的一个最佳实践了，加班、再加班早已成为开发人员的家常便饭，也是管理者最常使用的一种策略，而 XP 方法论认为，加班最终会扼杀团队的积极性，最终导致项目失败，这也充分体现了 XP 方法关注人的因素比关注过程的因素更多一些。</p><p>Kent Beck 认为开发人员即使能够工作更长的时间，他们也不该这样做，因为这样做会使他们更容易厌倦编程工作，从而产生一些影响他们效能的其他问题。因此，每周工作 40 小时是一种顺势行为，是一种规律。其实对于开发人员和管理者来说，违反这种规律是不值得的。</p><ul><li>开发人员：如果不懂得休息，那么就无法将自己的节奏调整到最佳状态，那么就会带来很大的负面影响。而且在精神不集中的状态下，开发质量也得不到保证。</li><li>管理者：也许这可以称得上“第二种人月神话”，那就是你不得不通过延长每天的工作时间来获得更多的人月。这是因为，每个开发人员的工作精力是有限的，不可能无限增长，在精力不足的时候，不仅写出来的代码质量没有保障，而且还可能为项目带来退步的效果。因此采用加班的方式并不是一个理性的方式，是得不偿失的。</li></ul><p>不过有一点是需要解释的，“每周工作 40 小时”中的 40 不是一个绝对数，它所代表的意思是团队应该保证按照“正常的时间”进行工作。那么如何做到这一点呢？</p><ul><li>首先，定义符合你团队情况的“正常工作时间”。</li><li>其次，逐步将工作时间调整到“正常工作时间”。</li><li>再次，除非你的时间计划一团糟，否则不应该在时间妥协。</li><li>最后，鼓起勇气，制定一个合情合理的时间表。</li></ul><p>正如米卢说过的“享受足球”一样，同样地，每一个开发人员应该做到“享受编程”，那么“每周工作 40 小时”就是你的起点。</p><p>团队只有持久才有获胜的希望。他们以能够长期维持的速度努力工作，他们保存精力，他们把项目看作是马拉松长跑，而不是全速短跑。</p><p><code>PS 吐槽：这里的40小时 是打引号的哈哈哈</code></p><p><a name="6567f930"></a></p><h3 id="现场客户"><a href="#现场客户" class="headerlink" title="现场客户"></a>现场客户</h3><p>为了保证开发出来的结果与客户的预想接近，XP 方法论认为最重要的需要将客户请到开发现场。就像计划游戏中提到过的，在 XP 项目中，应该时刻保证客户负责业务决策，开发团队负责技术决策。因此，在项目中有客户在现场明确用户故事，并做出相应的业务决策，对于 XP 项目而言有着十分重要的意义。</p><p>也许有人会问，客户提交了用户故事之后不就完成工作了吗？其实很多尝试过用户故事的团队都会发现其太过简单，包含的信息量极少，XP方法论不会不了解，因此，不会把用户故事当做开发人员交付代码的唯一指示。用户故事只是一个起点，后面的细节还需要开发人员与客户之间建立起来的良好沟通来补充。</p><p>作为一名有经验的开发人员，绝对不会对现场客户的价值产生任何怀疑，但是都会觉得想要实现现场客户十分困难。要实现这一点，需要对客户进行沟通，让其明白，想对于开发团队，项目成功对于客户而言更为重要。而现场客户则是保障项目成功的一个重要措施，想想在你装修房子的时候，你是不是常常在充当现场客户的角色呢？其实这隐喻就是让客户理解现场客户重要性最好的突破口。</p><p>其实现场客户在具体实施时，也不是一定需要客户一直和开发团队在一起，而是在开发团队应该和客户能够随时沟通，可以是面谈，可以是在线聊天，可以是电话，当然面谈是必不可少的。其中的关键是当开发人员需要客户做出业务决策是，需要进一步了解业务细节时能够随时找到相应的客户。</p><p>不过，也有一些项目是可以不要现场客户参与的：</p><ul><li>当开发组织中已经有相关的领域专家时。</li><li>当做一些探索性工作，而且客户也不知道他想要什么时（例如新产品、新解决方案的研究与开发）。</li></ul><p>去尝试吧，现场客户不仅可以争取得到，而且还能使得团队焕然一新，与客户建立起良好的合作与信任。</p><p><a name="2bba9647"></a></p><h3 id="编码标准"><a href="#编码标准" class="headerlink" title="编码标准"></a>编码标准</h3><p>编码标准是一个“雅俗共享”的最佳实践，不管是代表重型方法论的 RUP，PSP，还是代表敏捷方法论的 XP，都认为开发团队应该拥有一个编码标准。XP 方法论认为拥有编码标准可以避免团队在一些与开发进度无关的细节问题上发生争论，而且会给重构、结对编程带来很大麻烦。试想如果有人将你上次写的代码的变量命名法做了修改，下次你需要再改这部分代码时，会是一种什么感觉呢？</p><p>不过，XP 方法论的编码标准的目的不是创建一个事无巨细的规则表，而是只要能够提供一个确保代码清晰，便于交流的指导方针。</p><p>如果你的团队已经拥有编码标准，就可以直接使用它，并在过程中进行完善。如果还没有，那么大家可以先进行编码，然后在过程中逐步总结出编码规则，边做边形成。当然除了这种文字规范以外，还可以采用一些如自动格式化代码工具之类的方法进行代码规范。，事实上，你只需要很好地贯彻执行其他的实践并且进行沟通，编码标准会很容易地浮现出来。</p><p><code>PS 吐槽：我看不懂你，你看不懂我</code></p><p><a name="f64ecfd7"></a></p><h3 id="配合是关键"><a href="#配合是关键" class="headerlink" title="配合是关键"></a>配合是关键</h3><p>有句经典名言“1+1 &gt; 2 ”最适合表达 XP 的观点，Kent Beck 认为 XP 方法论的最大价值在于在项目中融会贯通地运用12个最佳实践，而非单独地使用。你当然可以使用其中的一些实践，但这并不意味着你就运用了 XP 方法论。XP 方法论真正能够发挥其效能，就必须完整地运用12个实践。</p><p><img alt data-src="https://cdn.nlark.com/yuque/0/2019/png/351829/1564063718858-b66e79ee-1f7c-4b8e-99c5-e14cee9d1edc.png#align=left&display=inline&height=540&originHeight=540&originWidth=720&size=0&status=done&width=720" class="lazyload"></p><p>其实吧，唉算了不总结了，好好工作吧，多学一点<del>~</del></p><p><a href="https://blog.csdn.net/fw0124/article/details/48713959" target="_blank" rel="noopener">本文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈死海效应</title>
      <link href="/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%AD%BB%E6%B5%B7%E6%95%88%E5%BA%94/"/>
      <url>/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%AD%BB%E6%B5%B7%E6%95%88%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p><a name="9bV45"></a></p><h2 id="什么是死海效应？"><a href="#什么是死海效应？" class="headerlink" title="什么是死海效应？"></a>什么是死海效应？</h2><p>Bruce F. Webster 在 2008 年写了一篇文章「The Wetware Crisis: the Dead Sea effect」， 翻译过来是死海效应。</p><p>Bruce 在文章中阐述了一个概念：一个团队可能陷入一种反模式，称之为死海效应。 死海是位于约旦的一个高盐分水域，由于水分被蒸发，这里的盐度是正常海水的 8 倍。 将水分比喻为高质量人才，盐分比喻为低质量人才。 水分容易被蒸发，而补入不足，盐分不容易蒸发日积月累，进而导致整个团队的人才质量劣化。</p><p>借用经济学里面的一个概念：劣币驱逐良币。</p><p><a name="50765eda"></a></p><h2 id="为什么会有死海效应呢？"><a href="#为什么会有死海效应呢？" class="headerlink" title="为什么会有死海效应呢？"></a>为什么会有死海效应呢？</h2><p>在一个正常运作的团队中，整个人才系统应该是循环的。有新的成员加入，也有老的成员离开。 只要市场上人才质量不发生剧烈的波动，团队内人才质量应该是平稳的。 但死海效应中不这样，好的人才不断流失，低质量人才被留存，这个团队素质越来越差。 形成这种状况的原因其实挺简单：环境恶化，高质量人才有更强的实力，可以自由地选择满足自己期望的团队。 而低质量人才没有更多选择空间，从而只能在当前的环境下继续生存。</p><p>死海效应导致的恶劣后果是显而易见的。 现代组织中人是生产第一要素。 如果人才质量持续降低，那么整个团队会缺乏战斗力，商业上得不到发展，这个团队将面临瓦解的风险。</p><p>什么样的团队容易滋生死海效应，<strong>我总结了几个点：无压、不透明、人情。</strong></p><p><a name="d893448d"></a></p><h3 id="无压力"><a href="#无压力" class="headerlink" title="无压力"></a><strong>无压力</strong></h3><p>当一个公司的业务发展进入瓶颈期，战略上面没有远见， 抑或是已经占据了市场中的有利地形，温饱不愁，那么就容易失去压力。 我对商业的理解有限，就拿技术团队来做比喻： 当一个技术团队给业务提供的支撑足够并且业务发展平稳， 那么技术团队有两个选择：维持平稳的状态；给自己提出更高的技术要求。 前者是舒适的，后者长期带来回报，但是短期辛苦并且有风险。 前者的团队空间有限，挑战难度低，更容易产生死海效应。</p><p><code>PS 吐槽：真是看不惯那些接收不了新玩意的老派！！</code></p><p><a name="c3b8f768"></a></p><h3 id="不透明"><a href="#不透明" class="headerlink" title="不透明"></a>不透明</h3><p>这种不透明体现在多个方面： 战略上是否向全体员工透明？业绩结果是否向全体员工透明？团队和个人绩效结果是否透明？评价标准是否透明？ 不透明会会导致团队的不公平。 一线员工看不到未来发展的方向和业绩，无法感受到个体被组织所尊重。 也许有些人尸位素餐，却能获得高收益，自然无法让团队的高贡献者认可。 Google 有一系列方法，包括 OKR 透明化，TGIF（Thank God It’s Friday） 全体沟通会，有效的解决这个问题。</p><p><a name="6b15c406"></a></p><h3 id="重人情"><a href="#重人情" class="headerlink" title="重人情"></a>重人情</h3><p>大家在一起工作，时间一长或多或少会产生羁绊。 中国社会又特别讲究人情来往，今天你帮我一些忙，那我就得记在心上，未来有机会要还给你。 这当然是一种人和人之间沟通的一种黏合剂和缓冲，但是也是职业化程度低的表现。 企业的存在是有使命和目的，营造一种大家庭的氛围一定不在其使命中。 小团队早期可以家族化管理，但是一旦走上正轨，一定要规范化管理。 人情其实是对标准和制度的破坏，而企业的正常运转，恰恰最是需要对标准和制度的遵守。 讲究人情，也会对职责和评价产生破坏，这又会导致不公平，死海效应也会应运而生。 这点我是非常佩服阿里，它有一个出名的职务轮换制度，管理层不能长期担任同一职位，需要定期轮换。 这样就能保证关键人才在企业内部是流动的，不会锁定在特定岗位。 也就避免了长期锁定带来的人情账户、内部小团体。</p><p><code>PS 吐槽：能坚持到最后的人不一定都是精品，还有可能是糟粕！</code></p><p><a name="7abf79d5"></a></p><h2 id="怎么摆脱死海效应呢？"><a href="#怎么摆脱死海效应呢？" class="headerlink" title="怎么摆脱死海效应呢？"></a>怎么摆脱死海效应呢？</h2><p><strong>有这么些方法：追求卓越、制度和透明、人才标准和流动。</strong></p><p>我以前和一个候选人沟通，他的一句话让我印象深刻：公司业务高速发展时，就不会存在复杂的管理问题。 这是一种理想情况。 但业务发展需要时间，进入瓶颈期之后，想继续保持团队活力，改怎么办？追求卓越。 效率能否再提高一些？自动化的程度是否能够再提高？能不能向一流团队 FLAG 看齐？ 这样就开阔了团队和个人的发展空间。 一旦有了追求卓越的信念，即便业务发展稍缓，仍然能够抵御死海效应。</p><p>高质量人才离开往往是觉得受了委屈才离开，那么公平的制度和透明的实施就尤其重要。 保证不由某个个体的意志力转移，而是像机器一样可以运转，像数学一样可以被计算。 这个需要自上而下的贯彻，否则实施起来非常困难。 举一个例子，如果团队大部分成员会在月末调整绩效目标而获得更高的评分。 那么坚持不调整的人可能获得较低评分，这不是个体能够影响的局面。 没有自上而下的推动，制度和透明就只能是一阵清风。</p><p>最后是人才标准和流动。人才流动并非是一个坏事，如同人的生理循环，吸收有益物质，排除有害物质。 这个循环必须正向运行，设定合理的准入标准和淘汰标准，高质量输入，低质量淘汰。 末尾淘汰制听起来残酷，其实在广泛实施，比如阿里的 3.25 的考核，腾讯的年末淘汰一人。 对于大部分非家族公司来说，如果真的出现害群之马，难道不淘汰么？ 淘汰应该制度化，让所有人看到并且重视，而不是担心会造成集体不安就隐性操作， 这反而更容易产生猜测和担忧。</p><p><a name="9415a826"></a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一旦进入死海效应的恶性循环，我认为乱世用重典为佳，小打小闹不能形成大影响。 关键时刻就必须搞运动，做动员，大张旗鼓。 当然这需要高层有足够的决心和意志力。如果管理层计划偏安一隅，没有宏伟愿景， 那么十几年的企业寿命也能为股东赚回足够的钱，死海效应是存在即合理的现象。 <strong>低质量的人才管理成本也低，人才死海效应和业务劣化恶性循环， 最后进入企业衰老期，天道轮回，有生必有死，看开就好</strong>。</p><p><a href="https://mp.weixin.qq.com/s/XFnEguHzFOjBjigetA3iGA" target="_blank" rel="noopener">本文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈技术债</title>
      <link href="/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E5%80%BA/"/>
      <url>/2019/07/25/yuque/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E5%80%BA/</url>
      
        <content type="html"><![CDATA[<p><a name="59xki"></a></p><h2 id="技术债是什么？"><a href="#技术债是什么？" class="headerlink" title="技术债是什么？"></a><strong>技术债是什么？</strong></h2><p>出自于沃德·坎宁安之口，他首次将技术的复杂比作为负债，简称技术负债（技术债）。软件开发本来就是一项很复杂的工程，所以很多人都软件开发当作软件工程看待。开发出来的软件是用来服务于各个领域（金融，医疗，购物等），我们程序员不一定能完全了解某个领域（<strong>术业有专攻</strong>），所以就没法很好的把控这个领域的软件架构，必然就会产生技术负债。技术债是无法避免的，只是产生技术债或多或少的问题。</p><p>为什么会有技术债呢？</p><p>我认为技术债大概分为三大类。</p><p><a name="4841f34a"></a></p><h2 id="文档负债（包括需求分析负债，开发文档负债，测试文档负债）"><a href="#文档负债（包括需求分析负债，开发文档负债，测试文档负债）" class="headerlink" title="文档负债（包括需求分析负债，开发文档负债，测试文档负债）"></a><strong>文档负债（包括需求分析负债，开发文档负债，测试文档负债）</strong></h2><p><a name="d98920bb"></a></p><h3 id="需求分析负债"><a href="#需求分析负债" class="headerlink" title="需求分析负债"></a><strong>需求分析负债</strong></h3><p>不懂需求分析的软件开发工程师不是好的软件开发工程师，遇到问题一定要与上级领导或者客户及时反馈，及时沟通，某些需求不能做就是不能做，<strong>要持有一种质疑的心</strong>。找正确的途径去反馈问题而不是背地里去发恼骚，要懂得有效的沟通方式，让客户或者是领导理解技术实现痛点。从项目开始就必须要做好调研，不然软件开发工程师没有理解好项目需求而盲目开发项目，必然导致领域业务与开发业务不匹配， 从而付出更多的时间与精力去开发项目。不仅仅如此，调研期间必须要跟开发的经理做好沟通。</p><p><a name="5aaa1d7e"></a></p><h3 id="开发文档负债"><a href="#开发文档负债" class="headerlink" title="开发文档负债"></a><strong>开发文档负债</strong></h3><p>软件开发文档不齐全，或者是软件文档功能与项目代码功能不一致。</p><p>有两种以下情况：</p><ul><li>项目没有制定开发文档。没有制定代码规范文档，接口文档等相关技术文档。光看代码不看文档就够辛苦了，即使语义化变量名与函数名，也难易快速理解。（少见）</li><li>项目没有更新开发文档。项目开发初期还有文档，后来文档没有对应没有更新，因为有些需求几乎都是临时新增的，导致后期项目迭代的时候就造成大量的冗余代码。（常见）</li></ul><p><strong>软件开发文档是项目最系统最全面的反映，看文档比看代码更容易理解项目的功能模块</strong>。</p><p><a name="e04d6111"></a></p><h3 id="测试文档负债"><a href="#测试文档负债" class="headerlink" title="测试文档负债"></a><strong>测试文档负债</strong></h3><p>体现于软件测试覆盖率低，测试用例不足。</p><p>在大多数的企业中，为了控制人力成本，软件测试都是由软件开发工程师去完成，而不是由专业的软件测试人员去负责，这样做往往会忽略了一些软件漏洞（当局者迷，旁观者清），也给技术债埋下了更多的种子。一个企业如果不重视软件测试的话，做出来的软件项目绝对是一个不合格的产品。</p><p><a name="4b34299f"></a></p><h2 id="代码负债（包括架构负债，编码负债，业务负债）"><a href="#代码负债（包括架构负债，编码负债，业务负债）" class="headerlink" title="代码负债（包括架构负债，编码负债，业务负债）"></a>代码负债（包括架构负债，编码负债，业务负债）</h2><p><a name="cef02ea1"></a></p><h3 id="架构负债"><a href="#架构负债" class="headerlink" title="架构负债"></a><strong>架构负债</strong></h3><p><strong>前期项目架构评估不够充分，导致项目组织不合理，软件耦合度高，后期项目难以拓展与维护</strong>。</p><p>正所谓牵一发而动全身，业务需求不断新增，软件项目很难迭代，稍有不慎就容易出现漏洞，后来发现代码没法改，不得不推倒重来，重新开发项目。</p><p><a name="f5469fe6"></a></p><h3 id="编码负债"><a href="#编码负债" class="headerlink" title="编码负债"></a><strong>编码负债</strong></h3><p><strong>编码质量不高</strong>，导致开发团队难以协同工作。当遇到软件产品迭代就会出现一堆技术债，软件产品更是漏洞百出，难以维护。</p><p>体现在以下几个方面</p><ul><li>代码命名规范：代码命名没有规范，存在大量杂乱不堪的命名代码。</li><li>代码复杂度：条件语句过多，流程控制过于复杂，代码嵌套过多。（常见回调地狱）</li><li>代码耦合度：代码中参数，类，接口高耦合，需要大量修改代码。</li><li>代码行数：存在大量未使用的代码。</li></ul><p>良好的，统一的编码规范更好维护以及迭代项目，有利于代码的重构，一定程度上减少技术债。</p><p><a name="ebbb0efa"></a></p><h2 id="管理负债（包括工期负债，人员负债，协同负债，成本负债）"><a href="#管理负债（包括工期负债，人员负债，协同负债，成本负债）" class="headerlink" title="管理负债（包括工期负债，人员负债，协同负债，成本负债）"></a><strong>管理负债（包括工期负债，人员负债，协同负债，成本负债）</strong></h2><p><a name="27f6db0c"></a></p><h3 id="工期负债"><a href="#工期负债" class="headerlink" title="工期负债"></a><strong>工期负债</strong></h3><p><strong>项目期限也是技术债产生原因之一</strong>。现在的项目正如马士兵老师说的那样，现在的项目赶紧做，做完之后赶紧拿钱，说白了就是赚快钱。企业为了抢占市场占有率，必然想短期出产品，因此软件开发工程师必然只能沿用一些老解决方案，加快想项目开发进度。开发出来的产品质量和以前没有太大区别，软件生命周期短。</p><p><code>PS 吐槽：想做高大上不花成本和时间怎么可能呢？</code></p><p><a name="96fee94f"></a></p><h3 id="人员负债"><a href="#人员负债" class="headerlink" title="人员负债"></a><strong>人员负债</strong></h3><p>一个人员流动性大的开发团队导致项目开发难以开展或者是开发进度缓慢，再加上团队中的开发人员能力不尽相同，各有各的风格，即使规范了代码风格，但每个人的代码实现思路也不尽相同。技术债也随着人员流动而加大。</p><p><a name="8d6cd195"></a></p><h3 id="协同负债"><a href="#协同负债" class="headerlink" title="协同负债"></a><strong>协同负债</strong></h3><p>让开发团队的人知道“我是谁，我在哪，我在干什么”。</p><p>有两种以下值得注意：</p><ul><li>管理者必定充分认识自己的定位，该做什么就做什么，不要过分干涉组员的工作，但要监督组员工作质量。</li><li>管理者必定认真分配组员的开发任务，分工明确，各尽其职，避免重复开发模块。</li></ul><p>良好的协同可以避免一些重复工作，减少软件冗余代码，促使项目开发效率会事半功倍，保证如期进行，从而减少技术债增加。</p><p><a name="8e5dee3b"></a></p><h3 id="成本负债"><a href="#成本负债" class="headerlink" title="成本负债"></a><strong>成本负债</strong></h3><p>项目的软硬件环境配置决定项目的成本负债。控制好成本负债才可以获得更多的收益。<strong>聪明的管理者绝不会贪小便宜，只顾眼前的成本利益而造成更大的陈本负债，该花钱的地方就有花，不要节省。</strong></p><p><code>PS 吐槽：做产品的为什么不思考思考呢？</code></p><p><a name="74ffd8bb"></a></p><h2 id="技术债需要还吗？"><a href="#技术债需要还吗？" class="headerlink" title="技术债需要还吗？"></a><strong>技术债需要还吗？</strong></h2><p>不还？还出来混？！！</p><p>还债的好处，避免软件漏洞，提高软件健壮性，能保证一段时间不用加班（996）。</p><p>还债的缺点，无法支撑大规模的新项目需求，在原有基础上重构业务逻辑代码有一定的技术风险。</p><p><strong>不还债的好处，等待项目推倒重来，重新架构软件模型，提高软件扩展性与稳定性。</strong></p><p><strong>不还债的缺点，新项目必然花费的人力成本与时间更多，加班难以避免。</strong></p><p><code>PS 吐槽：越来越臃肿造成不必要的996？？？</code></p><p>还不还债，自己看着办吧。</p><p>总之，一个好产品好公司的诞生，是必须要跟上时代的！才能赢得同行的尊敬。</p><p><a href="http://www.cnblogs.com/Sroot/p/9110835.html" target="_blank" rel="noopener">本文参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
